package com.enhancesys.integration.services;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.security.MessageDigest;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import javax.annotation.security.RolesAllowed;
import javax.ejb.EJB;
import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.jws.WebService;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import net.treetechnologies.common.exception.ApplicationException;
import net.treetechnologies.common.logger.TLogger;
import net.treetechnologies.entities.masters.Status;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.io.IOUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.XML;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.postgresql.copy.CopyManager;
import org.postgresql.core.BaseConnection;
import org.postgresql.util.PSQLException;
import org.quartz.CronExpression;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.bootstrap.DOMImplementationRegistry;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSSerializer;
import org.xml.sax.InputSource;

import com.enhancesys.common.configuration.PropertiesLoader;
import com.enhancesys.entities.integration.BounceEmail;
import com.enhancesys.entities.integration.DailyDumpSummary;
import com.enhancesys.entities.integration.InterfaceAttribute;
import com.enhancesys.entities.integration.InterfaceFailure;
import com.enhancesys.entities.integration.InterfaceFileSummary;
import com.enhancesys.entities.integration.InterfaceFileSummaryDetails;
import com.enhancesys.entities.integration.InterfaceNotification;
import com.enhancesys.entities.integration.InterfaceSummary;
import com.enhancesys.entities.integration.Interfaces;
import com.enhancesys.entities.integration.KycSyncInfo;
import com.enhancesys.entities.integration.Module;
import com.enhancesys.integration.services.interfaces.FileBean;
import com.enhancesys.integration.services.interfaces.FilePropertiesBean;
import com.enhancesys.integration.services.interfaces.IntegrationConstants;
import com.enhancesys.integration.services.interfaces.IntegrationManagement;
import com.enhancesys.integration.services.interfaces.IntegrationManagementLocal;
import com.enhancesys.integration.services.interfaces.PullDataToFileBean;
import com.enhancesys.integration.services.interfaces.ReprocessFileBean;
import com.enhancesys.integration.services.interfaces.ResponseBean;
import com.enhancesys.integration.services.interfaces.ServerBean;
import com.enhancesys.integration.services.interfaces.consumer.DataConsumer;
import com.enhancesys.integration.services.interfaces.consumer.FileDataConsumer;
import com.enhancesys.integration.services.interfaces.converter.DataConverter;
import com.enhancesys.integration.services.interfaces.converter.LookupMappingLocal;
import com.enhancesys.integration.services.interfaces.merger.CSVMerger;
import com.enhancesys.integration.services.interfaces.processor.PullDataToFile;
import com.enhancesys.integration.services.interfaces.processor.PullFromExcel;
import com.enhancesys.integration.services.interfaces.processor.PullFromMongo;
import com.enhancesys.integration.services.interfaces.publisher.DataPublisher;
import com.enhancesys.integration.services.interfaces.rejection.RejectionFilePreparation;
import com.enhancesys.integration.services.interfaces.reprocess.ReProcess;
import com.enhancesys.integration.services.interfaces.util.IntegrationUtilManagementLocal;
import com.enhancesys.integration.services.util.MongoUtil;
import com.enhancesys.integration.services.util.TokuUser;
import com.enhancesys.snoc.utils.EncryptionUtil;
import com.jayway.jsonpath.JsonPath;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import com.mongodb.util.JSON;

/**
 * <b>Purpose:</b><br>
 * 		Implementation of IntegrationManagement interface operations..<br>
 * <br>
 * 
 * <b>DesignReference:</b><br>
 * <br>
 * <br>
 * 
 * <b>CopyRights:</b><br>
 * 		Enhancesys Innovations 2014<br>
 * <br>
 * 
 * <b>RevisionHistory:</b>
 * 
 * <pre>
 * <b>
 * Sl No   Modified Date        Author</b>
 * ==============================================
 * 1        04-07-2014		   Suresh Upparu
 * 	-- Base Release
 *
 * 2		16-10-2014			Ramana Rao K	
 * 	-- Services are changed based on the new tables and its naming conventions
 * 
 * 3		31-10-2014			Ramana Rao K
 * -- service processResponseConsumers validation for parent publisher id availability in current consumers ids condition is removed. 
 * 
 * 4		04-12-2014			Parthipan Rajagopal
 * -- service pulldataToFile is introduced. 
 * </pre>
 * 
 * <br>
 */

@Stateless
@TransactionAttribute(TransactionAttributeType.REQUIRED)
@TransactionManagement(TransactionManagementType.CONTAINER)
@WebService(endpointInterface = "com.enhancesys.integration.services.interfaces.IntegrationManagement", name = "IntegrationManagement")
@Remote({ IntegrationManagement.class })
@Local({ IntegrationManagementLocal.class })
public class IntegrationManagementImpl
{
	@PersistenceContext(unitName = "com.enhancesys.dev")
	EntityManager entityManager;

	@EJB
	IntegrationUtilManagementLocal integrationUtilManagementLocal;

	@EJB
	IntegrationManagementLocal integrationManagementLocal ;

	@EJB
	LookupMappingLocal lookupMappingLocal;
	
	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given module name parameter from the request.
	 *     2. If the module name is empty or null then throw an exception.
	 *     3. Otherwise fetch the Module object from the persistence layer.
	 *     4. Return the Module object.
	 * </pre>
	 * @param name
	 * @return Module
	 * @throws ApplicationException
	 */

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public String getModules() throws ApplicationException
	{
		/*if (TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getModules");
		}*/

		List<Module> moduleList = null;
		List<Map<String,Object>> modulesList = null;
		JSONObject jsonObject = null;
		Map<String,Object> moduleMap = null;
		try
		{
			moduleList = entityManager.createQuery("from " + Module.class.getCanonicalName()+" order by name_v").getResultList();
			entityManager.flush();

			modulesList = new ArrayList<Map<String,Object>>(); 

			for(Module module : moduleList)
			{
				moduleMap = new HashMap<String, Object>();
				moduleMap.put("id", module.getModuleId());
				moduleMap.put("name", module.getName());
				modulesList.add(moduleMap);
			}
			jsonObject = new JSONObject();
			jsonObject.put("res_code", "100");
			jsonObject.put("result", modulesList);
			return jsonObject.toString();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetModuleException("Error in initialising entity manager", nullPointerException);
		}
		catch (Exception exception)
		{
			TLogger.error("Unhandled Exception " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetModuleException("Unhandled Exception " + exception.getMessage(), exception);
		}
		finally
		{
			moduleList = null;
			modulesList = null;
			jsonObject = null;
			moduleMap = null;
			/*	if (TLogger.debugIsEnabled())
			{
				TLogger.debug("Entry getLineTypes");
			}*/
		}



	}
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public Module getModuleByName(String name) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getModuleByName.. Started at --> "+ new Date());
		}*/

		Module module = null;
		Query query = null;
		List<Module> moduleList = null;
		try
		{
			//TLogger.debug("getModuleByName service received module name->"+name);
			if(name == null || "".equalsIgnoreCase(name))
			{
				TLogger.error("Module name should not be empty..");
				throw new IntegrationManagement.GetModuleByNameException("Module name should not be empty..", null);
			}

			query = entityManager.createQuery("from " + Module.class.getCanonicalName() + " where upper(name) = upper(:name)", Module.class);
			query.setParameter("name", name);
			moduleList = query.getResultList();
			if(!moduleList.isEmpty())
			{
				module = moduleList.iterator().next();
			}

			return module;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetModuleByNameException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetModuleByNameException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetModuleByNameException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;
			query = null;
			moduleList = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getModuleByName service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given moduleId parameter from the request.
	 *     2. If the moduleId is empty then throw an exception.
	 *     3. Otherwise fetch the Module object from the persistence layer.
	 *     4. Return the Module object.
	 * </pre>
	 * @param moduleId
	 * @return Module
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public Module getModule(Long moduleId) throws ApplicationException
	{

		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getModule.. Started at --> "+ new Date());
		}*/

		Module module = null;

		try
		{
			//TLogger.debug("getModule service received module id-->"+moduleId);
			if(moduleId == null)
			{
				TLogger.error("Module Id should not be empty..");
				throw new IntegrationManagement.GetModuleException("Module Id should not be empty..", null);
			}

			module = entityManager.find(Module.class, moduleId);

			return module;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetModuleException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetModuleException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetModuleException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getModule service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceId parameter from the request.
	 *     2. If the interfaceId is empty then throw an exception.
	 *     3. Otherwise fetch the Interfaces object from the persistence layer.
	 *     4. Return the Interfaces object.
	 * </pre>
	 * @param interfaceId
	 * @return Interfaces
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public Interfaces getInterfaceById(Long interfaceId) throws ApplicationException
	{
		/*Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug(+" : Entry getInterfaceById.. Started at --> "+ new Date());
		}*/

		Interfaces interfaces = null;

		try
		{
//			TLogger.debug(+" : getInterfaceById service received interface id-->"+interfaceId);
			if(interfaceId == null)
			{
				TLogger.error("Interfaces Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceByIdException("Interfaces Id should not be empty..", null);
			}

			interfaces = entityManager.find(Interfaces.class, interfaceId);

			return interfaces;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceByIdException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceByIdException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceByIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug(+" : Exit getInterfaceById service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;*/
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given transactionType parameter from the request.
	 *     2. If the interfaceType is empty then throw an exception.
	 *     3. Otherwise fetch the Interfaces objects from the persistence layer.
	 *     4. Return the Interfaces objects list.
	 * </pre>
	 * @param transactionType
	 * @return List<Interfaces>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<Interfaces> getInterfacesByTransactionType(Long transactionType) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfacesByTransactionType.. Started at --> "+ new Date());
		}*/
		List<Interfaces> interfaceList = null;
		Query query = null;
		try
		{

			//TLogger.debug("getInterfacesByTransactionType service received transactionType -->"+transactionType);
			if(transactionType == null)
			{
				TLogger.error("TransactionType should not be empty..");
				throw new IntegrationManagement.GetInterfacesByTransactionTypeException("TransactionType Id should not be empty..", null);
			}

			query = entityManager.createQuery("from " + Interfaces.class.getCanonicalName() + " where transactionType = :transactionType");
			query.setParameter("transactionType", transactionType);

			interfaceList = query.getResultList();

			return interfaceList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceList = null;
			query = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfacesByInterfaceType service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}




	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public String getInterfaceFilesByModuleAndOrgId(Long moduleId,Long orgId,Long orgType) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfacesByModuleId.. Started at --> "+ new Date());
		}*/
		List<Interfaces> interfaceList = null;
		Query query = null;
		Map<String,Object> interfaceMap = null;
		JSONObject jsonObject = null;
		List<InterfaceFileSummary> interfaceFileSummaries = null;
		List<Map<String,Object>> interfacesList = null;
		String clientName  = null;
		try
		{

			//	TLogger.debug("getInterfacesByModuleId service received module Id -->"+moduleId);
			if(moduleId == null)
			{
				TLogger.error("moduleId should not be empty..");
				throw new IntegrationManagement.GetInterfacesByTransactionTypeException("moduleId Id should not be empty..", null);
			}

			query = entityManager.createQuery("from " + Interfaces.class.getCanonicalName() + " where module.moduleId = :moduleId");
			query.setParameter("moduleId", moduleId);

			interfaceList = query.getResultList();

			interfacesList = new ArrayList<Map<String,Object>>();
			for(Interfaces interfaces : interfaceList)
			{
				interfaceFileSummaries = getInterfaceFileSummaryByInterfaceId(interfaces.getInterfaceId());

				for(InterfaceFileSummary interfaceFileSummary : interfaceFileSummaries)
				{
					if((orgType != null && IntegrationConstants.KS_SYS_ORG_TYPE_INTERFACE_LIST.contains(orgType.toString())) || interfaceFileSummary.getUploadedBy().equals(orgId))
					{
						clientName = getInterfaceAttributeValue(interfaces.getInterfaceId(), interfaceFileSummary.getUploadedBy()+"_NAME");
						interfaceMap = new HashMap<String, Object>();
						interfaceMap.put("id", interfaceFileSummary.getFileId() != null ?String.valueOf(interfaceFileSummary.getFileId()):"");
						interfaceMap.put("updloadedBy", interfaceFileSummary.getUploadedBy() != null ?String.valueOf(interfaceFileSummary.getUploadedBy()) : "");
						interfaceMap.put("clientName", clientName != null ?clientName : "");
						interfaceMap.put("processedOn", interfaceFileSummary.getProcessedOn() != null ?String.valueOf(interfaceFileSummary.getProcessedOn()):"");
						interfaceMap.put("updloadedOn", interfaceFileSummary.getUploadedOn() != null ?String.valueOf(interfaceFileSummary.getUploadedOn()):"");
						interfaceMap.put("status", interfaceFileSummary.getStatus().getName());
						interfaceMap.put("totalCount", interfaceFileSummary.getTotalCount() != null ?String.valueOf(interfaceFileSummary.getTotalCount()):"0");
						interfaceMap.put("errorCount", interfaceFileSummary.getErrorCount() != null ?String.valueOf(interfaceFileSummary.getErrorCount()):"0");
						interfaceMap.put("successCount",interfaceFileSummary.getSuccessCount() != null ?String.valueOf(interfaceFileSummary.getSuccessCount()):"0");
						interfaceMap.put("message",interfaceFileSummary.getMessage() != null ?String.valueOf(interfaceFileSummary.getMessage()):"");
						interfacesList.add(interfaceMap);
					}
				}
			}
			jsonObject = new JSONObject();
			jsonObject.put("res_code", "100");
			jsonObject.put("result", interfacesList);
			return jsonObject.toString();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfacesByTransactionTypeException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceList = null;
			query = null;
			interfaceMap = null;
			jsonObject = null;
			interfaceFileSummaries = null;
			interfacesList = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfacesByInterfaceType service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}
	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceId parameter from the request.
	 *     2. If the interfaceId is empty then throw an exception.
	 *     3. Otherwise fetch the Interface object from the persistence layer.
	 *     4. Get the attributes from the Interface.
	 *     5. Return the InterfaceAttribute objects list.
	 * </pre>
	 * @param interfaceId
	 * @return Set<InterfaceAttribute>
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public Set<InterfaceAttribute> getInterfaceAttributes(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceAttributes.. Started at --> "+ new Date());
		}

		Set<InterfaceAttribute> attributeList = null;
		Interfaces interfaces = null;
		try
		{
			TLogger.debug("getInterfaceAttributes service received interface id-->"+interfaceId);
			if(interfaceId == null)
			{
				TLogger.error("Interface Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceAttributesException("Interface Id should not be empty..", null);
			}

			interfaces = getInterfaceById(interfaceId);

			if(interfaces == null)
			{
				TLogger.error("Interfaces object does not exist for interfaceId : " + interfaceId);
				throw new IntegrationManagement.GetInterfaceAttributesException("Interfaces object does not exist for interfaceId : " + interfaceId, null);
			}

			attributeList = interfaces.getAttributes();

			return attributeList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceAttributesException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceAttributesException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceAttributesException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			attributeList = null;
			interfaces = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceAttributes service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given transactionId parameter from the request.
	 *     2. If the transactionId is empty then throw an exception.
	 *     3. Otherwise fetch the InterfaceSummary object from the persistence layer.
	 *     4. Return the InterfaceSummary object.
	 * </pre>
	 * @param transactionId
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public InterfaceSummary getInterfaceSummary(Long transactionId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummary.. Started at --> "+ new Date());
		}*/

		InterfaceSummary interfaceSummary = null;

		try
		{

			//TLogger.debug("getInterfaceSummary service received transaction id-->"+transactionId);
			if(transactionId == null)
			{
				TLogger.error("transaction Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceSummaryException("transaction Id should not be empty..", null);
			}

			interfaceSummary = entityManager.find(InterfaceSummary.class, transactionId);

			return interfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given status parameter from the request.
	 *     2. If the status is empty then throw an exception.
	 *     3. Otherwise fetch the InterfaceSummary objects from the persistence layer.
	 *     4. Return the InterfaceSummary objects list.
	 * </pre>
	 * @param status
	 * @return List<InterfaceSummary>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceSummary> getInterfaceSummariesByStatus(Long status) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummariesByStatus.. Started at --> "+ new Date());
		}*/

		Query query = null;
		List<InterfaceSummary> interfaceSummaryList = null;

		try
		{
			//TLogger.debug("getInterfaceSummariesByStatus service received status id-->"+status);
			if(status == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.GetInterfaceSummariesByStatusException("Status should not be empty", null);
			}

			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + 
					" where status.statusId =:status ORDER BY requestTime", InterfaceSummary.class);
			query.setParameter("status", status);

			query.setMaxResults(IntegrationConstants.INTERFACE_SUMMARY_LIMIT.intValue());
			interfaceSummaryList = query.getResultList();

			return interfaceSummaryList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			interfaceSummaryList = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummariesByStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceSummary parameter from the request.
	 *     2. If the interfaceSummary is empty then throw an exception.
	 *     3. If the interfaceId is empty then throw an exception.
	 *     4. If the originalRequestData is empty then throw an exception.
	 *     5. If the requestData is empty then throw an exception.
	 *     6. If the status is empty then throw an exception.
	 *     7. Otherwise Set the values into the interfaceSummary object.
	 *     8. Persist the interfaceSummary object.
	 *     9. Return the InterfaceSummary object.
	 * </pre>
	 * @param interfaceSummary
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceSummary createInterfaceSummary(InterfaceSummary interfaceSummary) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry createInterfaceSummary.. Started at --> "+ new Date());
		//		}

		InterfaceSummary newInterfaceSummary = null;

		try
		{


			if(interfaceSummary == null)
			{
				TLogger.error("InterfaceSummary object should not be empty..");
				throw new IntegrationManagement.CreateInterfaceSummaryException("InterfaceSummary object should not be empty..", null);
			}

			//TLogger.debug("createInterfaceSummary service received interface summary Object for transaction id -->"+interfaceSummary.getTransactionId());
			if(interfaceSummary.getInterfaces() == null || interfaceSummary.getInterfaces().getInterfaceId() == null)
			{
				TLogger.error("Interface Id should not be empty..");
				throw new IntegrationManagement.CreateInterfaceSummaryException("Interface Id should not be empty..", null);
			}

			newInterfaceSummary = new InterfaceSummary();
			newInterfaceSummary.setInterfaces(entityManager.find(Interfaces.class, interfaceSummary.getInterfaces().getInterfaceId()));

			//validation for original request data
			if(interfaceSummary.getOriginalRequestData() == null || "".equals(new String(interfaceSummary.getOriginalRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim()))
			{
				TLogger.error("OriginalRequestData should not be empty..");
				throw new IntegrationManagement.CreateInterfaceSummaryException("OriginalRequestData should not be empty..", null);
			}

			newInterfaceSummary.setOriginalRequestData(interfaceSummary.getOriginalRequestData());

			if(interfaceSummary.getRequestData() == null || "".equals(new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim()))
			{
				TLogger.error("RequestData should not be empty..");
				throw new IntegrationManagement.CreateInterfaceSummaryException("RequestData should not be empty..", null);
			}

			newInterfaceSummary.setRequestData(interfaceSummary.getRequestData());
			newInterfaceSummary.setRequestTime(interfaceSummary.getRequestTime());
			newInterfaceSummary.setDueTime(interfaceSummary.getDueTime());
			newInterfaceSummary.setAckData(interfaceSummary.getAckData());
			newInterfaceSummary.setAckTime(interfaceSummary.getAckTime());	
			newInterfaceSummary.setOriginalResponseData(interfaceSummary.getOriginalResponseData());
			newInterfaceSummary.setResponseTime(interfaceSummary.getResponseTime());
			newInterfaceSummary.setResponseData(interfaceSummary.getResponseData());

			if(interfaceSummary.getStatus() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.CreateInterfaceSummaryException("Status should not be empty..", null);
			}

			newInterfaceSummary.setStatus(this.entityManager.find(Status.class,interfaceSummary.getStatus().getStatusId()));
			newInterfaceSummary.setRetryCount(interfaceSummary.getRetryCount());
			newInterfaceSummary.setReferenceData1(interfaceSummary.getReferenceData1());
			newInterfaceSummary.setReferenceData2(interfaceSummary.getReferenceData2());
			newInterfaceSummary.setReferenceData3(interfaceSummary.getReferenceData3());
			newInterfaceSummary.setReferenceData4(interfaceSummary.getReferenceData4());
			newInterfaceSummary.setReferenceData5(interfaceSummary.getReferenceData5());

			entityManager.persist(newInterfaceSummary);
			entityManager.flush();

			return newInterfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateInterfaceSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateInterfaceSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateInterfaceSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newInterfaceSummary = null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit createInterfaceSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceSummary parameter from the request.
	 *     2. If the interfaceSummary is empty then throw an exception.
	 *     3. If the transactionId is empty then throw an exception.
	 *     4. Otherwise get the existing InterfaceSummary object from the persistence layer.
	 *     5. If the existing InterfaceSummary is empty then throw an exception.
	 *     6. If the originalRequestData is empty then throw an exception.
	 *     7. If the requestData is empty then throw an exception.
	 *     8. If the status is empty then throw an exception.
	 *     9. Otherwise Set the values into the existing InterfaceSummary object.
	 *     10. Persist the existing InterfaceSummary object.
	 *     11. Return the InterfaceSummary object.
	 * </pre>
	 * @param interfaceSummary
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceSummary updateInterfaceSummary(InterfaceSummary interfaceSummary) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry updateInterfaceSummary.. Started at --> "+ new Date());
		}*/

		InterfaceSummary existingInterfaceSummary = null;

		try
		{
			TLogger.debug("Entry in updateInterfaceSummary...");
			
			if(interfaceSummary == null)
			{
				TLogger.error("interfaceSummary object should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceSummaryException("InterfaceSummary object should not be empty..", null);
			}

			//TLogger.debug("updateInterfaceSummary service received interface summary object for transaction id-->"+interfaceSummary.getTransactionId());

			if(interfaceSummary.getTransactionId() == null)
			{
				TLogger.error("TransactionId should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceSummaryException("TransactionId  should not be empty..", null);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("TransactionId ::: "+interfaceSummary.getTransactionId()+"interface id::::"+interfaceSummary.getInterfaces().getInterfaceId());
			}

			existingInterfaceSummary = entityManager.find(InterfaceSummary.class, interfaceSummary.getTransactionId());

			if(existingInterfaceSummary == null)
			{
				TLogger.error("InterfaceSummary object does not exist..");
				throw new IntegrationManagement.UpdateInterfaceSummaryException("InterfaceSummary object does not exist..", null);
			}
			//TLogger.debug("existingInterfaceSummary id--->"+existingInterfaceSummary.getTransactionId());
			if(interfaceSummary.getInterfaces() != null && interfaceSummary.getInterfaces().getInterfaceId() != null)
				existingInterfaceSummary.setInterfaces(entityManager.find(Interfaces.class, interfaceSummary.getInterfaces().getInterfaceId()));

			/*if(interfaceSummary.getOriginalRequestData() == null || "".equals(byteToString(interfaceSummary.getOriginalRequestData()).trim()))
			{
				TLogger.error("OriginalRequestData should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceSummaryException("OriginalRequestData should not be empty..", null);
			}

			existingInterfaceSummary.setOriginalRequestData(interfaceSummary.getOriginalRequestData());*/

			/*if(interfaceSummary.getRequestData() != null && !new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim().isEmpty())
			{
				existingInterfaceSummary.setRequestData(interfaceSummary.getRequestData());
			}*/

			/*if(interfaceSummary.getRequestTime()!=null)
			{
				existingInterfaceSummary.setRequestTime(interfaceSummary.getRequestTime());
			}*/

			if(interfaceSummary.getDueTime()!=null)
			{
				existingInterfaceSummary.setDueTime(interfaceSummary.getDueTime());
			}

			if(interfaceSummary.getAckData()!=null && !"".equalsIgnoreCase(new String(interfaceSummary.getAckData(),IntegrationConstants.FILE_ENCODE_FORMAT).trim()))
			{
				existingInterfaceSummary.setAckData(interfaceSummary.getAckData());
			}

			if(interfaceSummary.getAckTime()!=null)
			{
				existingInterfaceSummary.setAckTime(interfaceSummary.getAckTime());			
			}

			if(interfaceSummary.getOriginalResponseData()!=null && !"".equalsIgnoreCase(new String(interfaceSummary.getOriginalResponseData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim()) )
			{
				existingInterfaceSummary.setOriginalResponseData(interfaceSummary.getOriginalResponseData());
			}

			if(interfaceSummary.getResponseTime()!=null)
			{
				existingInterfaceSummary.setResponseTime(interfaceSummary.getResponseTime());
			}

			if(interfaceSummary.getResponseData()!=null && !"".equalsIgnoreCase(new String(interfaceSummary.getResponseData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim()))
			{
				existingInterfaceSummary.setResponseData(interfaceSummary.getResponseData());
			}

			if(interfaceSummary.getStatus() == null || interfaceSummary.getStatus().getStatusId() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceSummaryException("Status should not be empty..", null);
			}

			existingInterfaceSummary.setStatus(this.entityManager.find(Status.class,interfaceSummary.getStatus().getStatusId()));

			if(interfaceSummary.getRetryCount()!=null)
			{
				existingInterfaceSummary.setRetryCount(interfaceSummary.getRetryCount());
			}

			if(interfaceSummary.getReferenceData1() != null && !"".equalsIgnoreCase(interfaceSummary.getReferenceData1().trim()))
			{
				existingInterfaceSummary.setReferenceData1(interfaceSummary.getReferenceData1());
			}

			if(interfaceSummary.getReferenceData2() != null)
			{
				existingInterfaceSummary.setReferenceData2(interfaceSummary.getReferenceData2());
			}

			if(interfaceSummary.getReferenceData3() != null)
			{
				existingInterfaceSummary.setReferenceData3(interfaceSummary.getReferenceData3());
			}

			if(interfaceSummary.getReferenceData4() != null)
			{
				existingInterfaceSummary.setReferenceData4(interfaceSummary.getReferenceData4());
			}

			if(interfaceSummary.getReferenceData5() != null && !"".equalsIgnoreCase(interfaceSummary.getReferenceData5().trim()))
			{
				existingInterfaceSummary.setReferenceData5(interfaceSummary.getReferenceData5());
			}
			//			TLogger.debug("existingInterfaceSummary before flush");
			entityManager.flush();
			/*if(existingInterfaceSummary != null)
				TLogger.debug("Updated transaction id-->"+existingInterfaceSummary.getTransactionId());*/
			
			TLogger.debug("Exit in updateInterfaceSummary...");
			return existingInterfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			existingInterfaceSummary = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit updateInterfaceSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given transactionId and status as input parameters.
	 * 		2. Validate the transactionId and status, if they are empty then throw the corresponding exception.
	 * 		3. Otherwise get the interfaceSummary object from the persistence layer.
	 * 		4. Validate the interfaceSummary, if its empty then throw an exception.
	 * 		5. Otherwise set the status to the interfaceSummary object.
	 * 		6. Return interfaceSummary object. 
	 * </pre>
	 * @param transactionId
	 * @param status
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public InterfaceSummary updateInterfaceSummaryStatus(Long transactionId, Long status) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry updateInterfaceSummaryStatus.. Started at --> "+ new Date());
		}*/

		InterfaceSummary interfaceSummary = null;

		try
		{

			//TLogger.debug("updateInterfaceSummaryStatus service received transaction id and status-->"+transactionId+","+status);
			if(transactionId == null)
			{
				if(transactionId == null)
				{
					TLogger.error("Transaction id should not be empty..");
					throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Transaction id should not be empty..", null);
				}
			}

			if(status == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Status should not be empty..", null);
			}

			interfaceSummary = entityManager.find(InterfaceSummary.class, transactionId);
			if(interfaceSummary == null)
			{
				TLogger.error("Interface Summary does not exist for the given transaction id : " + transactionId);
				throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Interface Summary does not exist for the given transaction id : " + transactionId, null);
			}

			//			entityManager.refresh(interfaceSummary,LockModeType.PESSIMISTIC_WRITE);

			interfaceSummary.setStatus(entityManager.find(Status.class, status));

			//			entityManager.flush();
			interfaceSummary = integrationManagementLocal.updateInterfaceSummary(interfaceSummary);

			return interfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceSummaryStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			/*	if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit updateInterfaceSummaryStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given transactionFailureId parameter from the request.
	 *     2. If the transactionFailureId is empty then throw an exception.
	 *     3. Otherwise fetch the InterfaceFailure object from the persistence layer.
	 *     4. Return the InterfaceFailure object.
	 * </pre>
	 * @param transactionId
	 * @return InterfaceFailure
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public InterfaceFailure getInterfaceFailure(Long transactionFailureId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFailure.. Started at --> "+ new Date());
		}*/

		InterfaceFailure interfaceFailure = null;

		try
		{

			//TLogger.debug("getInterfaceFailure service received transaction Failure id-->"+transactionFailureId);
			if(transactionFailureId == null)
			{
				TLogger.error("transaction failure Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceFailureException("transaction failure Id should not be empty..", null);
			}

			interfaceFailure = entityManager.find(InterfaceFailure.class, transactionFailureId);

			return interfaceFailure;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFailureException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFailureException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFailureException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceFailure = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFailure service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given transactionId parameter from the request.
	 *     2. If the transactionId is empty then throw an exception.
	 *     3. Otherwise fetch the list of InterfaceFailure object from the persistence layer based on the transactionId.
	 *     4. Return the InterfaceFailure list object.
	 * </pre>
	 * @param transactionId
	 * @return List<InterfaceFailure>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFailure> getInterfaceFailureByTransactionId(Long transactionId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry getInterfaceFailureByTransactionId.. Started at --> "+ new Date());
		//		}

		List<InterfaceFailure> interfaceFailureList = null;
		Query query = null;

		try
		{
			//TLogger.debug("getInterfaceFailureByTransactionId service received transaction id-->"+transactionId);
			if(transactionId == null)
			{
				TLogger.error("transaction Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceFailureByTransactionIdException("transaction Id should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceFailure.class.getCanonicalName() + " where interfaceSummary.transactionId =:transactionId");
			query.setParameter("transactionId", transactionId);
			interfaceFailureList = query.getResultList();

			return interfaceFailureList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFailureByTransactionIdException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFailureByTransactionIdException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFailureByTransactionIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceFailureList = null;
			query = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFailureByTransactionId service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceFailure parameter from the request.
	 *     2. If the interfaceFailure object is empty then throw an exception.
	 *     3. If the transaction id is empty then throw an exception.
	 *     4. Otherwise get the interfaceSummary object from the persistence layer.
	 *     5. If the interfaceSummary object is empty then throw an exception.
	 *     6. If the error code is empty then throw an exception.
	 *     7. If the error message is empty then throw an exception.
	 *     8. Otherwise Set the values into the ApplicationInterfaceFailure object.
	 *     9. Persist the InterfaceFailure object.
	 *     10. Return the InterfaceFailure object.
	 * </pre>
	 * @param interfaceFailure
	 * @return InterfaceFailure
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceFailure createInterfaceFailure(InterfaceFailure interfaceFailure) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry createInterfaceFailure.. Started at --> "+ new Date());
		//		}

		InterfaceFailure newInterfaceFailure = null;
		InterfaceSummary interfaceSummary = null;

		try
		{
			if(interfaceFailure == null)
			{
				TLogger.error("interfaceFailure object should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFailureException("interfaceFailure object should not be empty", null);
			}

			//TLogger.debug("createInterfaceFailure service received interfaceFailure object for  transaction Failure id-->"+interfaceFailure.getTransactionFailureId());
			if(interfaceFailure.getInterfaceSummary() == null || interfaceFailure.getInterfaceSummary().getTransactionId() == null)
			{
				TLogger.error("TransactionId should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFailureException("TransactionId should not be empty..", null);
			}

			interfaceSummary = entityManager.find(InterfaceSummary.class, interfaceFailure.getInterfaceSummary().getTransactionId());

			if(interfaceSummary == null)
			{
				TLogger.error("Invalid TransactionId ::: "+interfaceFailure.getInterfaceSummary().getTransactionId());
				throw new IntegrationManagement.CreateInterfaceFailureException("Invalid TransactionId..."+interfaceFailure.getInterfaceSummary().getTransactionId(), null);
			}

			newInterfaceFailure = new InterfaceFailure();
			newInterfaceFailure.setInterfaceSummary(getInterfaceSummary(interfaceSummary.getTransactionId()));
			newInterfaceFailure.setAckData(interfaceFailure.getAckData());
			newInterfaceFailure.setAckTime(interfaceFailure.getAckTime());
			newInterfaceFailure.setResponseData(interfaceFailure.getResponseData());
			newInterfaceFailure.setResponseTime(interfaceFailure.getResponseTime());
			newInterfaceFailure.setFileId(interfaceFailure.getFileId());

			if(interfaceFailure.getErrorCode() == null)
			{
				TLogger.error("Error code should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFailureException("Error code should not be empty..", null);
			}
			//TLogger.debug("error code-->"+interfaceFailure.getErrorCode());
			newInterfaceFailure.setErrorCode(interfaceFailure.getErrorCode());

			if(interfaceFailure.getErrorMessage() == null)
			{
				TLogger.error("Error message should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFailureException("Error message should not be empty..", null);
			}
//			TLogger.debug("error message-->"+interfaceFailure.getErrorMessage());
			newInterfaceFailure.setErrorMessage(interfaceFailure.getErrorMessage());

			entityManager.persist(newInterfaceFailure);
			entityManager.flush();

			return newInterfaceFailure;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateInterfaceFailureException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateInterfaceFailureException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateInterfaceFailureException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			newInterfaceFailure = null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit createInterfaceFailure service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given input parameters.
	 * 		2. Populate the requiredStatusList.
	 * 		3. Validate the given status list with the requiredStatusList.
	 * 		4. If the given status does not contain in the requiredStatusList, then throw an exception.
	 * 		5. Get the interfaces object from the persistence layer.
	 * 		6. Validate the interfaces object, if it does not exist, then throw an exception.
	 * 		7. Verify the interface type of the interfaces object, if its asynchronous file interface type then invoke prepareFile() service.
	 * 		8. Otherwise get the list of transactionIds based on the priority on exist from the persistence layer for the given interface and status list.
	 * </pre>
	 * @param status
	 * @param interfaceId
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default") 
	public void processInQueueRecords(List<Long> status, Long interfaceId, Long fileStatus, List<Long> partners) throws ApplicationException 
	{ 
		Long startTime = System.currentTimeMillis();


		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processInQueueRecords.. " + interfaceId + " : Started at --> "+ new Date());
		}

		Interfaces interfaces = null;
		List<Object> transactionList = null;
		List<Long> requiredStatusList = null;
		List<Long> fileIds = null;
		Query query = null;
		Query query1 = null;

		try 
		{ 

			TLogger.debug("processInQueueRecords service received interface id and status list-->"+interfaceId+","+status);
			requiredStatusList = new ArrayList<Long>();
			fileIds = new ArrayList<Long>();

			requiredStatusList.add(IntegrationConstants.IN_QUEUE_STATUS);
			requiredStatusList.add(IntegrationConstants.QUEUE_ATTEMPT_FAILED_STATUS);
			requiredStatusList.add(IntegrationConstants.ERROR_STATUS);
			TLogger.debug("processInQueueRecords service required status list-->"+requiredStatusList+" and partnerd list->"+partners);
			if(!requiredStatusList.containsAll(status))
			{
				TLogger.error("Pls configure the proper status list to process in-queue records..");
				throw new IntegrationManagement.ProcessInQueueRecordsException("Pls configure the proper status list to process in-queue records..", null);
			}

			interfaces = getInterfaceById(interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the id : " + interfaceId);
				throw new IntegrationManagement.ProcessInQueueRecordsException("Interface does not exist for the id : " + interfaceId, null);
			}

			if(IntegrationConstants.ASYNC_FILE_INTERFACE_TYPE.equals(interfaces.getInterfaceType()) && IntegrationConstants.SEND_TRANS_TYPE.equals(interfaces.getTransactionType()))
			{
				prepareFile(interfaces);
			}
			else
			{
				/*if(interfaces.getModule().getPriority() != null)
				{
					query = entityManager.createQuery("select trans_id_n from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_summary interfaceSummary, "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".ms_interface interface, " 
							+IntegrationConstants.INTERFACE_SCHEMA_NAME+".ms_module module where interfaceSummary.interface_id_n =:interfaceId and interfaceSummary.status_n in (:statusIds) and retry_count_n < :retryCount " +
							"ORDER BY interfacesummary.ref_data5_v, interfaceSummary.request_time_dt, module.priority_n desc");
				}*/
				if(fileStatus != null)
				{
					if(partners != null)
					{
						query = entityManager.createNativeQuery("select file_id_n from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_file_summary where interface_id_n =:interfaceId and status_n =:fileStatus and uploaded_by_n in (:partners) "); 
						query.setParameter("partners", partners); 
					}
					else
					{
						query = entityManager.createNativeQuery("select file_id_n from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_file_summary where interface_id_n =:interfaceId and status_n =:fileStatus  "); 
					}
					query.setParameter("interfaceId", interfaceId);
					query.setParameter("fileStatus", fileStatus);
					transactionList = query.getResultList(); 
					TLogger.debug("Process in-queue records job for interface id-->"+interfaceId+" and for partners -->"+partners+" totally quried "+transactionList.size()+" files from DB");
					for (Object transactionObj : transactionList) 
					{
						fileIds.add(((Number)transactionObj).longValue());
					}
					if(fileIds != null && !fileIds.isEmpty())
					{
						query1 = entityManager.createNativeQuery("select trans_id_n from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_summary where status_n In (:statusIds) and ref_data3_n In (:fileids) and retry_count_n < :retryCount ORDER BY request_Time_dt"); 

						query1.setParameter("statusIds", status);
						query1.setParameter("fileids", fileIds);
						query1.setParameter("retryCount", 5);
						//				query.setMaxResults(IntegrationConstants.INTERFACE_SUMMARY_LIMIT.intValue()); 

						transactionList = query1.getResultList(); 
						TLogger.debug("Process in-queue records job for interface id-->"+interfaceId+" and for partners -->"+partners+" totally quried "+transactionList.size()+" records from DB");
						for (Object transactionObj : transactionList) 
						{
							processInterfaceSummary(((Number)transactionObj).longValue(), getInterfaceSummary(((Number)transactionObj).longValue()).getRetryCount()+1);
						}
					}
				}
				else
				{
					query1 = entityManager.createNativeQuery("select trans_id_n from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_summary where interface_id_n =:interfaceId and  status_n In (:statusIds) and retry_count_n < :retryCount ORDER BY request_Time_dt"); 
					query1.setParameter("interfaceId", interfaceId);
					query1.setParameter("statusIds", status);
					query1.setParameter("retryCount", 5);
					transactionList = query1.getResultList(); 
					TLogger.debug("Process in-queue records job for interface id-->"+interfaceId+" and for partners -->"+partners+" totally quried "+transactionList.size()+" records from DB");
					for (Object transactionObj : transactionList) 
					{
						//					transactionIds.add(((Number)transactionObj).longValue());
						try
						{
							processInterfaceSummary(((Number)transactionObj).longValue(), getInterfaceSummary(((Number)transactionObj).longValue()).getRetryCount()+1);
						}
						catch(Exception exception)
						{
							TLogger.error("Exception Occured : While processing Interface Summary Transaction : " + transactionObj.toString());
						}
					}
				}
			}
		} 
		catch (NullPointerException nullPointerException) 
		{ 
			TLogger.error("Error in initialising entity manager", nullPointerException); 
			throw new IntegrationManagement.ProcessInQueueRecordsException("Error in initialising entity manager", nullPointerException); 
		} 
		catch(PersistenceException persistenceException) 
		{ 
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
			throw new IntegrationManagement.ProcessInQueueRecordsException("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
		} 
		catch(ApplicationException applicationException) 
		{ 
			TLogger.error(applicationException.getMessage(), applicationException); 
			throw applicationException; 
		} 
		catch(Exception exception) 
		{ 
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception); 
			throw new IntegrationManagement.ProcessInQueueRecordsException("Unhandled Exception :: " + exception.getMessage(), exception); 
		} 
		finally 
		{ 
			interfaces = null;
			transactionList = null;
			requiredStatusList = null;
			query = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processInQueueRecords " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		} 
	}



	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given parameters statusList and interfaceList.
	 * 		2. Verify the provided status list with the required status list.
	 * 		3. If the provided list does not contain the required list, then throw an exception.
	 * 		4. Get the list of interfaces and verify the interfaceType.
	 * 		5. If the interfaceType is queue type then get the interfaceSummary objects from the persistence layer.
	 * 		6. Iterate the interfaceSummary list and invoke publishItem() with the interfaceSummary object.
	 * 		7. If the interfaceType is file type then get the interface attributes.
	 * 		8. And invoke the prepareFile() with the corresponding values.
	 * </pre>
	 * @param status
	 * @param intefaceIds
	 * @throws ApplicationException
	 */
	@RolesAllowed("default") 
	//	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void processInterfaceSummary(Long trasactionId, Long retryCount) throws ApplicationException 
	{ 
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processInterfaceSummary Started at --> "+ new Date()+" and received trasaction id-->"+trasactionId);
		}

		InterfaceSummary interfaceSummary = null;
		InterfaceFailure interfaceFailure = null;
		Context context = null;
		DataPublisher dataPublisher = null;
		DataConverter dataConverter = null;
		ResponseBean responseBean = null;
		String convertedRequestData = null;
		Long maxRetryCount = null;

		try 
		{ 
			interfaceSummary = entityManager.find(InterfaceSummary.class, trasactionId);
			if(interfaceSummary == null)
			{
				TLogger.error("Interface Summary does not exist for the id : " + trasactionId);
				throw new IntegrationManagement.ProcessInterfaceSummaryException("Interface Summary does not exist for the id : " + trasactionId, null);
			}

			if(IntegrationConstants.ASYNC_QUEUE_INTERFACE_TYPE.equals(interfaceSummary.getInterfaces().getInterfaceType()))
			{
				publishItem(interfaceSummary); 
			}
			else if(IntegrationConstants.ASYNC_WS_INTERFACE_TYPE.equals(interfaceSummary.getInterfaces().getInterfaceType()))
			{
				context = new InitialContext();
				dataPublisher = (DataPublisher) context.lookup(interfaceSummary.getInterfaces().getPublisher());
				dataConverter = (DataConverter) context.lookup(interfaceSummary.getInterfaces().getConverter());

				convertedRequestData = dataConverter.processRequest(interfaceSummary.getInterfaces().getInterfaceId(), new String(interfaceSummary.getRequestData(),IntegrationConstants.FILE_ENCODE_FORMAT),null);
				responseBean = dataPublisher.processRequest(interfaceSummary.getTransactionId(), convertedRequestData, null,null);
				if("Error".equalsIgnoreCase(responseBean.getStatus()))
				{
					responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
					responseBean.setTransactionId(interfaceSummary.getTransactionId());
					responseBean.setRetryCount(interfaceSummary.getRetryCount() + 1L);
					integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
				}
				else
				{
					integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getResponseData(), interfaceSummary.getTransactionId(), interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.RES_AVAILABLE_STATUS, null);
				}
			}
			else if(IntegrationConstants.SYNC_INTERFACE_TYPE.equals(interfaceSummary.getInterfaces().getInterfaceType()))
			{
				context = new InitialContext();
				dataPublisher = (DataPublisher) context.lookup(interfaceSummary.getInterfaces().getPublisher());
				responseBean = dataPublisher.processRequest(interfaceSummary.getTransactionId(), new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT), null,null);
				if("Error".equalsIgnoreCase(responseBean.getStatus()))
				{
					maxRetryCount = Long.valueOf(getInterfaceAttributeValue(interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.RETRY_COUNT_ATTR));
					TLogger.debug("Service call error :txnId:"+interfaceSummary.getTransactionId());
					if(IntegrationConstants.RETRY_ERROR_CODE_LIST.contains(String.valueOf(responseBean.getErrorCode())) && 
							retryCount < maxRetryCount)
					{
						//Thread.sleep(retryCount*IntegrationConstants.RETRY_WAITING_TIME);
						processInterfaceSummary(trasactionId, retryCount + 1);
					}
					else
					{
						if(IntegrationConstants.SM_SYNC_INTERFACE_IDS.contains(interfaceSummary.getInterfaces().getInterfaceId().toString()))
						{
							integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getErrorMessage(), interfaceSummary.getTransactionId(), interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.RES_AVAILABLE_STATUS, retryCount);

							interfaceFailure = new InterfaceFailure();
							interfaceFailure.setInterfaceSummary(interfaceSummary);

							if(responseBean.getErrorMessage() != null)
							{
								interfaceFailure.setResponseData(responseBean.getErrorMessage().getBytes());
								interfaceFailure.setResponseTime(responseBean.getResponseTime());
							}

							interfaceFailure.setErrorCode(responseBean.getErrorCode());
							interfaceFailure.setErrorMessage(responseBean.getErrorMessage());
							integrationManagementLocal.createInterfaceFailure(interfaceFailure);
						}
						else
						{
							if(responseBean.getStatusId() == null)
								responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
							responseBean.setTransactionId(interfaceSummary.getTransactionId());
							responseBean.setRetryCount(retryCount);
							integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
						}
					}
					// entityManager.flush();
				}
				else
				{
					//TLogger.debug("summary.getTransactionId:: "+summary.getTransactionId()+" interfaces.getInterfaceId()::"+ interfaces.getInterfaceId());
					if(IntegrationConstants.COMPLETED_STATUS_INTERFACE_IDS.contains(String.valueOf(interfaceSummary.getInterfaces().getInterfaceId().longValue())))
					{
						//TLogger.debug("retailer dc and invoice status is updated: "+interfaces.getInterfaceId()+" for txnId :"+responseBean.getTransactionId());
						integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getResponseData(), interfaceSummary.getTransactionId(), interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.COMPLETED_STATUS, null);
					}
					else
					{
						integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getResponseData(), interfaceSummary.getTransactionId(), interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.RES_AVAILABLE_STATUS, null);
					}
				}
			}
		} 
		catch (NullPointerException nullPointerException) 
		{ 
			TLogger.error("Error in initialising entity manager", nullPointerException); 
			throw new IntegrationManagement.ProcessInterfaceSummaryException("Error in initialising entity manager", nullPointerException); 
		} 
		catch(PersistenceException persistenceException) 
		{ 
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
			throw new IntegrationManagement.ProcessInterfaceSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
		} 
		catch(ApplicationException applicationException) 
		{ 
			TLogger.error(applicationException.getMessage(), applicationException); 
			throw applicationException; 
		} 
		catch(Exception exception) 
		{ 
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception); 
			throw new IntegrationManagement.ProcessInterfaceSummaryException("Unhandled Exception :: " + exception.getMessage(), exception); 
		} 
		finally 
		{ 
			interfaceSummary = null;
			interfaceFailure = null;
			context = null;
			dataPublisher = null;
			dataConverter = null;
			convertedRequestData = null;
			responseBean = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processInterfaceSummary service for transaction id "+trasactionId+" at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		} 
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given interfaceSummary parameter.
	 * 		2. If the interfaceSummary object is empty then throw an exception.
	 * 		3. Get the interface from the summary object.
	 * 		4. Get the retry attribute from the interface.
	 * 		5. Get the publisher from the interface and invoke processRequest() with interfaceId, transactionId and requestData.
	 * 		6. If there is any failure then increment the summaryRetryCount and publish again until the retry reaches.
	 * 		7. Otherwise update the interfaceSummary with the ackData, time and processed status.
	 * 		8. If the response is exists then update responseData, time and responseAvailable status.
	 * </pre>
	 * @param interfaceSummary
	 * @throws ApplicationException
	 */
	private void publishItem(InterfaceSummary interfaceSummary) throws ApplicationException 
	{ 
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry publishItem.. Started at --> "+ new Date());
		}*/
		Interfaces interfaces = null; 
		Long retryCount = null; 
		Long summaryRetryCount = null; 
		Context context = null;
		DataPublisher dataPublisher = null;
		ResponseBean responseBean = null;
		String interfaceAttribute = null;

		try 
		{ 

			if(interfaceSummary == null) 
			{ 
				TLogger.error("InterfaceSummary should not be empty.."); 
				throw new Exception("InterfaceSummary should not be empty", null); 
			} 
			//TLogger.debug("publishItem service received interfaceSummary object for transaction id-->"+interfaceSummary.getTransactionId());
			interfaces = interfaceSummary.getInterfaces(); 

			interfaceAttribute = this.getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.RETRY_COUNT_ATTR); 

			if(interfaceAttribute!=null) 
			{ 
				retryCount = Long.parseLong(interfaceAttribute);
			} 

			summaryRetryCount = interfaceSummary.getRetryCount(); 

			if(summaryRetryCount==null) 
				summaryRetryCount = 0L; 

			context = new InitialContext(); 
			dataPublisher = (DataPublisher) context.lookup(interfaces.getPublisher()); 
			responseBean = dataPublisher.processRequest(interfaceSummary.getTransactionId(), new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT), null,null); 

			if(responseBean.getStatus().equalsIgnoreCase("error")) 
			{ 
				if(retryCount > 0) 
				{ 
					summaryRetryCount ++; 
				} 

				if(!retryCount.equals(summaryRetryCount)) 
				{
					responseBean.setStatusId(IntegrationConstants.QUEUE_ATTEMPT_FAILED_STATUS); 
				}
				else 
				{
					responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
				}

				responseBean.setTransactionId(interfaceSummary.getTransactionId());
				responseBean.setRetryCount(summaryRetryCount); 
				integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean); 
			} 
			else 
			{ 
				//				entityManager.refresh(interfaceSummary,LockModeType.PESSIMISTIC_WRITE);
				//				TLogger.debug("interfaceSummary :"+interfaceSummary);
				interfaceSummary.setAckData(responseBean.getAckData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT)); 
				interfaceSummary.setAckTime(responseBean.getAckTime()); 

				if(IntegrationConstants.COMPLETED_STATUS_INTERFACE_IDS.contains(String.valueOf(interfaces.getInterfaceId().longValue())))
				{
					//TLogger.debug("retailer dc and invoice status is updated: "+interfaces.getInterfaceId()+" for txnId :"+responseBean.getTransactionId());
					interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
				}
				else
				{
					interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.PROCESSED_STATUS)); 
				}

				if(responseBean.getResponseData() != null) 
				{ 
					interfaceSummary.setResponseData(responseBean.getResponseData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT)); 
					interfaceSummary.setResponseTime(responseBean.getResponseTime()); 
					interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.RES_AVAILABLE_STATUS)); 
				} 

				//TLogger.debug("interfaceSummary txnId :"+interfaceSummary.getTransactionId()+" status: "+interfaceSummary.getStatus().getStatusId());
				//				entityManager.flush();
				integrationManagementLocal.updateInterfaceSummary(interfaceSummary);
			} 
		} 
		catch(Exception exception) 
		{ 
			TLogger.error("Unhandled Exception " + exception.getMessage(), exception); 
		} 
		finally 
		{ 
			interfaces = null; 
			retryCount = null; 
			summaryRetryCount = null; 
			interfaceAttribute = null;
			context = null;
			dataPublisher = null;
			responseBean = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit publishItem service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		} 
	} 

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given parameter status.
	 * 		2. Get the list of interfaceSummary objects from the persistence layer based on the status.
	 * 		3. If the list is empty return.  
	 * 		4. Otherwise invoke the call back and update the status as completed on success.
	 * 		5. In case of failure update with the failure status. 
	 * </pre>
	 * @param interfaceId
	 * @param status
	 * @throws ApplicationException
	 */
	@SuppressWarnings({ "unchecked", "unused" }) 
	@RolesAllowed("default") 
	public void processResponseAvailableRecords(Long interfaceId, Long status) throws ApplicationException 
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processResponseAvailableRecords.. Started at --> " + interfaceId + " : "+ new Date());
		}
		List<InterfaceSummary> interfaceSummaryList = null;
		List<Long> transIds = null;
		Set<String> totalItemIdSet = null;
		Set<String> nonCompletedIdSet = null;
		Query query = null;
		Context context = null;
		Object callbackObject = null;
		Method callbackMethod = null;
		ResponseBean responseBean = null;
		StringWriter stringWriter = null;
		PrintWriter printWriter = null;
		String errorMessage = null;

		try
		{

			TLogger.debug("processResponseAvailableRecords service received status id-->"+status);
			/*query = entityManager.createQuery("select summary from " + InterfaceSummary.class.getCanonicalName() + " summary where " +
					"summary.referenceData1 in (select distinct ais.referenceData1 from " + InterfaceSummary.class.getCanonicalName() + 
					" ais where ais.status.statusId =:statusId) and summary.interfaces.interfaceId =:interfaceId and summary.status.statusId != :completedStatusId ", InterfaceSummary.class);*/
			query = entityManager.createQuery("select summary from " + InterfaceSummary.class.getCanonicalName() + " summary where " + 
					"summary.interfaces.interfaceId =:interfaceId and summary.status.statusId =:statusId");
			query.setParameter("statusId", status);
			query.setParameter("interfaceId", interfaceId);
//			query.setParameter("completedStatusId", IntegrationConstants.COMPLETED_STATUS);

			interfaceSummaryList = query.getResultList();

			if(interfaceSummaryList.size()==0)
				return;

			/*totalItemIdSet = new HashSet<String>();
			nonCompletedIdSet = new HashSet<String>();

			for (InterfaceSummary interfaceSummary : interfaceSummaryList) 
			{
				if(!IntegrationConstants.RES_AVAILABLE_STATUS.equals(interfaceSummary.getStatus().getStatusId()))
				{
					nonCompletedIdSet.add(interfaceSummary.getReferenceData1());
				}

				totalItemIdSet.add(interfaceSummary.getReferenceData1());
			}

			totalItemIdSet.removeAll(nonCompletedIdSet);

			//			TLogger.debug("totalItemIdSet :: " + totalItemIdSet);
			if(totalItemIdSet.size()==0)
				return;*/

			context = new InitialContext();

			/*for (String orderItemId : totalItemIdSet) 
			{*/
				for (InterfaceSummary applicationInterfaceSummary : interfaceSummaryList) 
				{
					/*if(applicationInterfaceSummary.getReferenceData1().equals(orderItemId))
					{*/
						if(applicationInterfaceSummary.getInterfaces().getModule().getCallBack() == null)
						{
							//TLogger.error("Callback is not Configured, for the module : " + applicationInterfaceSummary.getInterfaces().getModule().getModuleId());
						}
						else
						{
							//							if(!IntegrationConstants.EMAIL_NOTIFICATION_INTERFACE_ID.equals(applicationInterfaceSummary.getInterfaces().getInterfaceId()) && 
							//									!IntegrationConstants.SMS_NOTIFICATION_INTERFACE_ID.equals(applicationInterfaceSummary.getInterfaces().getInterfaceId()))
							//							{
							
							try
							{
								responseBean = new ResponseBean();
								responseBean.setTransactionId(applicationInterfaceSummary.getTransactionId());
								
								if(applicationInterfaceSummary.getInterfaces().getInterfaceId().longValue() == IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue())
									transIds = getSummaryTransIdsByRefData3(applicationInterfaceSummary.getTransactionId(), null);
								
								integrationManagementLocal.processCallback(applicationInterfaceSummary.getTransactionId());
							}
							catch(Exception exception)
							{
								stringWriter = new StringWriter();
								printWriter = new PrintWriter(stringWriter);
								exception.printStackTrace(printWriter);
								responseBean.setResponseData(stringWriter.toString());
								responseBean.setResponseTime(new Date());
								responseBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
								errorMessage = exception.getMessage();
								if(exception.getCause() != null)
									errorMessage = exception.getCause().getClass() + ": " + exception.getCause().getMessage();

								if(errorMessage != null && errorMessage.trim().length() > IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue())
								{
									errorMessage = errorMessage.substring(0, (IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue() - 1));
								}
								responseBean.setErrorMessage(errorMessage != null ? errorMessage.trim() : "Unhandled Exception..");
								responseBean.setStatusId(IntegrationConstants.CALL_BACK_FAILED_STATUS);
								
								TLogger.error("Call Back invocation failed for Process :: " + applicationInterfaceSummary.getTransactionId());
								TLogger.debug("responseBean.getStatusId : " + responseBean.getStatusId());
								integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
								
								//Updating child transactions of Organization..
								if(transIds != null)
								{
									for(Long transId : transIds)
									{
										responseBean.setTransactionId(transId);
										integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
									}
								}
							}
							
							/*callbackObject = context.lookup(applicationInterfaceSummary.getInterfaces().getModule().getCallBack());
							callbackMethod = callbackObject.getClass().getMethod(IntegrationConstants.CALL_BACK_METHOD_NAME, new Class[]{String.class, String.class});
							try
							{
								callbackMethod.invoke(callbackObject, new Object[]{applicationInterfaceSummary.getTransactionId().toString(), new String(applicationInterfaceSummary.getResponseData(),IntegrationConstants.FILE_ENCODE_FORMAT)});
								applicationInterfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
							}
							catch(Exception exception)
							{
								TLogger.error("Call Back invocation failed for Process :: " + applicationInterfaceSummary.getInterfaces().getModule().getCallBack(), exception);
								//								integrationUtilManagementLocal.updateInterfaceSummaryFailerStatus(applicationInterfaceSummary.getTransactionId());
								applicationInterfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.CALL_BACK_FAILED_STATUS));
								//								entityManager.flush();
								integrationManagementLocal.updateInterfaceSummary(applicationInterfaceSummary);
								return;
							}*/
							//							}
						}
//					}
				}
//			}
			//			entityManager.flush();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.ProcessResponseAvailableRecordsException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ProcessResponseAvailableRecordsException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessResponseAvailableRecordsException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummaryList = null;
			totalItemIdSet = null;
			nonCompletedIdSet = null;
			query = null;
			context = null;
			callbackObject = null;
			callbackMethod = null;
			responseBean = null;
			stringWriter = null;
			printWriter = null;
			errorMessage = null;
			transIds = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processResponseAvailableRecords " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

			startTime = null;
		}
	} 

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param transactionId
	 * @throws ApplicationException
	 */
	@RolesAllowed("default") 
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void processCallback(Long transactionId) throws ApplicationException
	{
		String           errorMessage      = null;
		Object           callbackObject    = null;
		Object           response          = null;
		Method           callbackMethod    = null;
		Long             callbackRetryLimit= null;
		Context          context           = null;
		List<Long>       transIds          = null;
		PrintWriter      pWriter           = null;
		StringWriter     sWriter           = null;
		ResponseBean     responseBean      = null;
		InterfaceSummary summary           = null;
		InterfaceSummary childSummary      = null;
		Long             interfaceId       = null;
		String callbackRetryLimitAttr      = null;
		try
		{
			TLogger.debug("Inside the processCallback Method with transactionId ::: " + transactionId);
		
			summary = entityManager.find(InterfaceSummary.class, transactionId);
			if(summary == null)
			{
				TLogger.error("Summary does not exist for the id :: " + transactionId);
				throw new IntegrationManagement.ProcessResponseAvailableRecordsException("Summary does not exist for the id :: " + transactionId, null);
			}

			responseBean = new ResponseBean();
			responseBean.setTransactionId(transactionId);

			context = new InitialContext();
			callbackObject = context.lookup(summary.getInterfaces().getModule().getCallBack());
			callbackMethod = callbackObject.getClass().getMethod(IntegrationConstants.CALL_BACK_METHOD_NAME, new Class[]{String.class, String.class});
			interfaceId    = summary.getInterfaces().getInterfaceId().longValue(); 
			
			if(interfaceId  == IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue())
				transIds = getSummaryTransIdsByRefData3(transactionId, null);

			callbackRetryLimitAttr = getInterfaceAttributeValue(interfaceId, IntegrationConstants.CALLBACK_RETRY_LIMIT_ATTR);
			if(callbackRetryLimitAttr != null)
				callbackRetryLimit = Long.parseLong(callbackRetryLimitAttr);
			TLogger.debug("callbackRetryLimit ::: "+callbackRetryLimit);
			
			try
			{
				response = callbackMethod.invoke(callbackObject, new Object[]{transactionId.toString(), new String(summary.getResponseData())});
				
				TLogger.debug("response instanceof ResponseBean  ::: " + (response instanceof ResponseBean));
				
				if(response instanceof ResponseBean)
				{
					responseBean = (ResponseBean) response;
				}

				TLogger.debug("responseBean.getStatus()  ::: " +responseBean.getStatus());
				
				if(responseBean.getStatus() != null && !responseBean.getStatus().trim().isEmpty())
				{
					responseBean.setTransactionId(transactionId);
					if(responseBean.getStatus().trim().equals("Error"))
					{
						if(callbackRetryLimit != null)
						{
							if(callbackRetryLimit.longValue() > summary.getRetryCount().longValue())
							{
								TLogger.debug("callbackRetryLimit.longValue() > summary.getRetryCount().longValue() ::: "+ ( callbackRetryLimit.longValue() > summary.getRetryCount().longValue()));

								BasicDBObject  query = new BasicDBObject(); 

								query.put("transaction_id", transactionId);
								query.put("status", 174l);
								
								TLogger.debug("mongoUtil.findOne(\"snoc_interface\", \"interface_summary\", query) ::: " +mongoUtil.findOne("snoc_interface", "interface_summary", query));
								
								if(mongoUtil.findOne("snoc_interface", "interface_summary", query) == null)
								{
									TLogger.debug("Inside if block");
										
									summary.setRetryCount(summary.getRetryCount()+1l);
									
									entityManager.flush();
									TLogger.debug("Inside if block ::: entityManager Flushed" );
									processCallback(transactionId);
								}
								else
								{
									TLogger.debug("Inside else block");
									summary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));

									//Updating child transactions of Organization..
									if(transIds != null)
									{
										for(Long transId : transIds)
										{
											childSummary = entityManager.find(InterfaceSummary.class, transId);
											childSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
										}
									}
									entityManager.flush();
									TLogger.debug("Inside else block ::: entityManager Flushed" );
								}
							}
						}
						sWriter = new StringWriter();
						pWriter = new PrintWriter(sWriter);
						responseBean.setResponseData(sWriter.toString());
						responseBean.setResponseTime(new Date());
						responseBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
						errorMessage = responseBean.getErrorMessage();
						if(errorMessage != null && errorMessage.trim().length() > IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue())
						{
							errorMessage = errorMessage.substring(0, (IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue() - 1));
						}
						responseBean.setErrorMessage(errorMessage != null ? errorMessage.trim() : "Unhandled Exception..");
						responseBean.setStatusId(IntegrationConstants.CALL_BACK_FAILED_STATUS);

						TLogger.error("Call Back : invocation failed for Process :: " + summary.getInterfaces().getModule().getCallBack());
						TLogger.debug("responseBean.getStatusId : " + responseBean.getStatusId());
						integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);

						//Updating child transactions of Organization..
						if(transIds != null)
						{
							for(Long transId : transIds)
							{
								responseBean.setTransactionId(transId);
								integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
							}
						}
					}
					else
					{
						summary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));

						//Updating child transactions of Organization..
						if(transIds != null)
						{
							for(Long transId : transIds)
							{
								childSummary = entityManager.find(InterfaceSummary.class, transId);
								childSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
							}
						}
						entityManager.flush();
					}
				}
				
			}
			catch(Exception exception)
			{
				sWriter = new StringWriter();
				pWriter = new PrintWriter(sWriter);
				exception.printStackTrace(pWriter);
				responseBean.setResponseData(sWriter.toString());
				responseBean.setResponseTime(new Date());
				responseBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
				errorMessage = exception.getMessage();
				if(exception.getCause() != null)
					errorMessage = exception.getCause().getClass() + ": " + exception.getCause().getMessage();

				if(errorMessage != null && errorMessage.trim().length() > IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue())
				{
					errorMessage = errorMessage.substring(0, (IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue() - 1));
				}

				responseBean.setErrorMessage(errorMessage != null ? errorMessage.trim() : "Unhandled Exception..");
				responseBean.setStatusId(IntegrationConstants.CALL_BACK_FAILED_STATUS);

				TLogger.error("Call Back :: invocation failed for Process :: " + summary.getInterfaces().getModule().getCallBack());
				TLogger.debug("responseBean.getStatusId : " + responseBean.getStatusId());
				integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);

				//Updating child transactions of Organization..
				if(transIds != null)
				{
					for(Long transId : transIds)
					{
						responseBean.setTransactionId(transId);
						integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
					}
				}
				return;
			}
			TLogger.debug("Exiting form processCallback ..");
			
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error("Application Exception :: " + applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessResponseAvailableRecordsException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			callbackObject = null;
			context = null;
			summary = null;
			childSummary = null;
			callbackMethod = null;
			sWriter = null;
			pWriter = null;
			responseBean = null;
			errorMessage = null;
			transIds = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Reads the given input parameters.
	 * 		2. Get the receive transaction type interfaceList.
	 * 		3. Iterate the interfaceList and get the publisherInterface of the interface from attributes.
	 * 		4. If the interfaceList doesn't contain the publisherInterface then get the noOfItems to consume.
	 * 		5. Iterate noOfItems to consume and create the consumer using jndi lookup.
	 * 		6. Invoke processRequest service with interfaceId on consumer object.
	 * 		7. If the responeData is not empty then get the transactionId using publisherInterface and responseData.
	 * 		8. Invoke updateInterfaceSummaryByResponse service with transactionId, interfaceId and responseAvailable status to update the summary.
	 * </pre>
	 * @param interfaceIds
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void processResponseConsumers(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processResponseConsumers.. interfaceId --> "+interfaceId+" Started at"+ new Date());
		}
		Interfaces interfaces = null;
		List<InterfaceAttribute> queueNameAttributes = null;
		Context context = null;
		Long noOfItemsToConsume = 1L;
		Long publisherInterfaceId = null;
		String publisherInterface = null;
		FileDataConsumer fileDataConsumer = null;
		try
		{
			context = new InitialContext();

			//			query = entityManager.createQuery("from " + Interfaces.class.getCanonicalName() + 
			//					" where interfaceId =:interfaceId and transactionType =:transactionType");
			//			query.setParameter("interfaceId", interfaceId);
			//			query.setParameter("transactionType", IntegrationConstants.RECEIVE_TRANS_TYPE);

			//			interfacesList = query.getResultList();

			interfaces = entityManager.find(Interfaces.class, interfaceId);

			if(IntegrationConstants.RECEIVE_TRANS_TYPE.equals(interfaces.getTransactionType()))
			{
				if(IntegrationConstants.ASYNC_QUEUE_INTERFACE_TYPE.equals(interfaces.getInterfaceType()))
				{
					for (InterfaceAttribute attribute : interfaces.getAttributes()) 
					{
						if(IntegrationConstants.PUBLISHER_INTERFACE_ATTR.equalsIgnoreCase(attribute.getName()))
						{
							publisherInterface = attribute.getValue();
						}
						else if(IntegrationConstants.CONSUME_NO_OF_ITEMS_ATTR.equalsIgnoreCase(attribute.getName()))
						{
							noOfItemsToConsume = Long.valueOf(attribute.getValue());
						}
						else if(attribute.getName().endsWith(IntegrationConstants.QUEUE_NAMES_SET_ATTR))
						{
							queueNameAttributes = new ArrayList<InterfaceAttribute>();
							for(String queueNameAttribute : attribute.getValue().split(IntegrationConstants.COMMA_DELIMITER))
							{
								queueNameAttributes.add(getInterfaceAttributeValueByInterfaceIdAndname(interfaces.getInterfaceId(), queueNameAttribute.trim()));
							}
						}
					}

					if(!IntegrationConstants.NOTIFICATION_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
					{
						if(publisherInterface == null )
						{
							TLogger.error("Pls configure publisher interface attribute for Interface : " + interfaces.getInterfaceId());
							throw new IntegrationManagement.ProcessResponseConsumersException("Pls publisher interface attribute for Interface : " + interfaces.getInterfaceId(), null);
						}

						publisherInterfaceId = Long.valueOf(publisherInterface);
					}
					/*if(!interfaceIds.contains(publisherInterfaceId)){
						continue;
					}*/

					if(queueNameAttributes == null || queueNameAttributes.isEmpty())
					{
						processResponse(interfaces, null, noOfItemsToConsume, publisherInterfaceId);
					}
					else
					{
						for (InterfaceAttribute queueNameAttribute : queueNameAttributes) 
						{
							processResponse(interfaces, queueNameAttribute, noOfItemsToConsume, publisherInterfaceId);
						}
					}
				}
				else if(IntegrationConstants.ASYNC_FILE_INTERFACE_TYPE.equals(interfaces.getInterfaceType()))
				{
					fileDataConsumer = (FileDataConsumer) context.lookup(interfaces.getPublisher());
					fileDataConsumer.processRequest(interfaces.getInterfaceId());
				}
			}
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
			throw new IntegrationManagement.ProcessResponseConsumersException("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ProcessResponseConsumersException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessResponseConsumersException("Unhandled Exception :: "+exception.getMessage(), exception);
		}
		finally
		{
			//			interfaceAttribute = null;
			//			interfacesList = null;
			//			query = null;
			context = null;
			noOfItemsToConsume = 1L;
			publisherInterfaceId = null;
			publisherInterface = null;
			fileDataConsumer = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processResponseConsumers " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;

		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Alogrithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaces
	 * @param queueNameAttribute
	 * @param noOfItemsToConsume
	 * @param publisherInterfaceId
	 */
	@SuppressWarnings("unchecked")
	private void processResponse(Interfaces interfaces, InterfaceAttribute queueNameAttribute, Long noOfItemsToConsume, Long publisherInterfaceId) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processResponse.. queueName :: " + queueNameAttribute);
		}

		//		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceSummary interfaceSummary = null;
		DataConsumer consumer = null;
		Context context = null;
		ResponseBean responseBean = null;
		//		Object referenceId = null;
		//		String transIdAttribute = null;
		String refId = null;
		String refType = null;
		Long transactionId = null;
		Long consumerInterfaceId = null;
		ObjectMapper objectMapper = null;
		try
		{
			context = new InitialContext();
			consumer = (DataConsumer) context.lookup(interfaces.getPublisher());

			for(long i = 0; i < noOfItemsToConsume; i++)
			{
				if(queueNameAttribute != null)
					responseBean = consumer.processRequest(interfaces.getInterfaceId(), queueNameAttribute.getValue());
				else
					responseBean = consumer.processRequest(interfaces.getInterfaceId(), null);
				//need to implement jeopardy for the error case..
				if(responseBean.getResponseData() == null)
				{
					TLogger.debug("Response is empty from Queue..");
					break;
				}

				if(IntegrationConstants.NOTIFICATION_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
				{

					//					transIdAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.TRANS_ID_PATH_ATTR);
					//					TLogger.debug("transIdAttribute ::"+transIdAttribute);
					objectMapper = new ObjectMapper();
					Map<String,Object> jsonMap = objectMapper.readValue(responseBean.getResponseData(), Map.class);					
					//					TLogger.debug("refId ::"+refId);
					publishInterfaceData(interfaces.getModule().getModuleId(), null, String.valueOf(jsonMap.get("sourceRefId")), responseBean.getResponseData(), null);

				}
				else
				{
					if(responseBean.getResponseData().contains(IntegrationConstants.ORDER_TYPE) && responseBean.getResponseData().contains(IntegrationConstants.ORDER_ID))
					{
						refType = responseBean.getResponseData().substring(responseBean.getResponseData().indexOf(IntegrationConstants.ORDER_TYPE));
						refType = refType.substring(0, refType.indexOf(','));
						if(refType.contains(":"))
						{
							refType = refType.split(":")[1].trim();
							//							TLogger.debug("Ref Type :: ==================================== " + refType);
						}
						else
						{
							refType = null;
						}

						refId = responseBean.getResponseData().substring(responseBean.getResponseData().indexOf(IntegrationConstants.ORDER_ID));
						refId = refId.substring(0, refId.indexOf(','));
						if(refId.contains(":"))
						{
							refId = refId.split(":")[1].trim();
							//							TLogger.debug("Ref ID :: ==================================== " + refId);
						}
						else
						{
							refId = null;
						}

						//						TLogger.debug("Order Type : " + refType + " :: Order Id : " + refId);
						if(refType != null && refId != null)
							publishInterfaceData(null, Long.parseLong(refType.trim()), refId.trim(), responseBean.getResponseData(), null);
					}
					else if(responseBean.getResponseData().contains(IntegrationConstants.FORM_NAME))
					{
						refId = responseBean.getResponseData().substring(responseBean.getResponseData().indexOf(IntegrationConstants._ID));
						refId = refId.substring(0, refId.indexOf(','));
						if(refId.contains(":"))
						{
							refId = refId.split(":")[1].trim();
						}
						else
						{
							refId = null;
						}
						publishInterfaceData(interfaces.getModule().getModuleId(),null, refId.trim(), responseBean.getResponseData(), null);
					}
					else
					{
						transactionId = Long.parseLong(getTransactionId(publisherInterfaceId, responseBean.getResponseData()));
						//						TLogger.debug("transactionId :: " + transactionId);
						if(transactionId != null)
						{
							interfaceSummary = entityManager.find(InterfaceSummary.class, transactionId);
						}
						if(interfaceSummary == null)
						{
							TLogger.error("InterfaceSummary does not exist for the transactionId :: " + transactionId);
							throw new IntegrationManagement.ProcessResponseConsumersException("InterfaceSummary does not exist for the transactionId :: " + transactionId, null);
						}

						if(!IntegrationConstants.PROCESSED_STATUS.equals(interfaceSummary.getStatus().getStatusId()))
						{
							responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
							responseBean.setTransactionId(interfaceSummary.getTransactionId());
							responseBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
							responseBean.setErrorMessage("InterfaceSummary status should be 'processed' to recieve the response");
							integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean); 
						}
						else
						{
							for(Interfaces consumerInterfaces : interfaceSummary.getInterfaces().getModule().getInterfaces())
							{
								if(IntegrationConstants.RECEIVE_TRANS_TYPE.equals(consumerInterfaces.getTransactionType()))
								{
									consumerInterfaceId = consumerInterfaces.getInterfaceId();
									break;
								}
							}
							//							TLogger.debug("transactionId :"+transactionId+"publisher interfaceIdd: "+interfaceSummary.getInterfaces().getInterfaceId()+" consumerInterfaceId: "+consumerInterfaceId);
							updateInterfaceSummaryByResponse(responseBean.getResponseData(), transactionId, consumerInterfaceId, IntegrationConstants.RES_AVAILABLE_STATUS, null);
						}
					}
				}
			}
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
			throw new IntegrationManagement.ProcessResponseConsumersException("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ProcessResponseConsumersException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessResponseConsumersException("Unhandled Exception :: "+exception.getMessage(), exception);
		}
		finally
		{
			//			interfaceFileSummary = null;
			interfaceSummary = null;
			consumer = null;
			context = null;
			responseBean = null;
			//			referenceId = null;
			//			transIdAttribute = null;
			refId = null;
			refType = null;
			transactionId = null;
			consumerInterfaceId = null;
			objectMapper = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processResponse.. queueName :: " + queueNameAttribute);
			}
		}
	}

	@RolesAllowed("default")
	public void processReceivedFiles(Long interfaceId, List<Long> partners) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();

		TLogger.debug("Entry processReceivedFiles :: interfaceId :" + interfaceId);
		Interfaces interfaces = null;
		BufferedReader br = null;
		String fileType = null;
		String fileProcessType = null;
		String line = null;
		String mergerClass = null;
		Context context = null;
		CSVMerger csvMerger = null;
		File controlFile = null;
		List<String> controlFields = null;
		JSONObject localServerjsonObject = null;
		JSONParser jsonParser = null;
		Map<String,Object> inputMap = null; 
		boolean success = true;
		boolean isValid = true;
		String errorReason = "";
		File actualFile = null;
		File backupFile = null;
		List<InterfaceFileSummary> interfaceFileSummaryList = null;
		Set<InterfaceFileSummaryDetails> interfaceFileSummaryDetailsSet = null;
		BufferedReader brcsv1 = null;
		InputStreamReader inputStreamReader = null;
		InputStream inputStream = null;
		String fileName = null;
		String fileHeaders = null;
		String firstFileHeaders = null;
		String secondFileHeaders = null;
		Boolean additionalFieldsFile = null;
		Long fileRecordsLimit = null;
		
		try
		{
			if(interfaceId == null)
			{
				TLogger.error("InterfaceId should not be empty..");
				throw new IntegrationManagement.processReceivedFilesException("InterfaceId should not be empty.. ", null);
			}

			interfaces = entityManager.find(Interfaces.class, interfaceId);

			if(interfaces == null )
			{
				TLogger.error("InterfaceId is invalid..");
				throw new IntegrationManagement.processReceivedFilesException("InterfaceId is invalid.. ", null);
			}

			for(InterfaceAttribute interfaceAttribute : interfaces.getAttributes())
			{
				if(IntegrationConstants.RECEIVED_FILE_TYPE_ATTR.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					fileType = interfaceAttribute.getValue();
				}
				else if(IntegrationConstants.CSV_MERGER_ATTR.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					mergerClass = interfaceAttribute.getValue();
				}
				else if(IntegrationConstants.FILE_PROCESS_TYPE_ATTR.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					fileProcessType = interfaceAttribute.getValue();
				}
				else if(IntegrationConstants.FIRST_FILE_HEADER_VALIDATION_ATTR.equalsIgnoreCase(interfaceAttribute.getName()) 
						|| IntegrationConstants.FILE_HEADER_ATTR.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					firstFileHeaders = interfaceAttribute.getValue();
				}
				else if(IntegrationConstants.SECOND_FILE_HEADER_VALIDATION_ATTR.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					secondFileHeaders = interfaceAttribute.getValue();
				}
				else if(IntegrationConstants.ADDITIONAL_FIELDS_FILE.equalsIgnoreCase(interfaceAttribute.getName()))
				{
					additionalFieldsFile = Boolean.valueOf(interfaceAttribute.getValue());
				}
				else if(IntegrationConstants.INCOMING_FILE_RECORDS_LIMIT.equalsIgnoreCase(interfaceAttribute.getName()) && !interfaceAttribute.getValue().trim().isEmpty())
				{
					fileRecordsLimit = Long.parseLong(interfaceAttribute.getValue());
				}
			}
			/*
			 * generic validation
			 */
			interfaceFileSummaryList = new ArrayList<InterfaceFileSummary>();
			if(partners != null && !partners.isEmpty())
			{
				for(Long partnerId : partners)
				{
					interfaceFileSummaryList.addAll(getInterfaceFileSummaryByInterfaceIdAndStatus(interfaceId, IntegrationConstants.FILE_RECEIVED_STATUS, partnerId));
				}
			}
			else
			{
				interfaceFileSummaryList = getInterfaceFileSummaryByInterfaceIdAndStatus(interfaceId, IntegrationConstants.FILE_RECEIVED_STATUS, null);
			}			
			outer : for(InterfaceFileSummary interfaceFileSummary : interfaceFileSummaryList)
			{
				try
				{
					errorReason = "";
					jsonParser = new JSONParser();
					localServerjsonObject = (JSONObject) jsonParser.parse(interfaceFileSummary.getLocalServerDetails());
					interfaceFileSummaryDetailsSet = interfaceFileSummary.getFileSummaryDetails();
					for(InterfaceFileSummaryDetails interfaceFileSummaryDetails : interfaceFileSummaryDetailsSet)
					{
						isValid = true;
						actualFile = new File(localServerjsonObject.get("Dir")+interfaceFileSummaryDetails.getFileName());
						if(!actualFile.exists())
						{
							TLogger.debug("File does not exists at specified location.." + actualFile.getPath());
							interfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_REJECTED_STATUS));
							interfaceFileSummary.setMessage("File does not exists at specified location.." + actualFile.getPath());
							interfaceFileSummary.setErrorMessage("File does not exists at specified location.." + actualFile.getPath());
							integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);
							continue outer;
						}
						String encodedHashKey = getEncodedKey(actualFile);
						controlFile = new File(localServerjsonObject.get("CtlDir")+interfaceFileSummaryDetails.getControlFileName());
						br = new BufferedReader(new FileReader(controlFile));
						line = br.readLine();
						controlFields = Arrays.asList(line.split(IntegrationConstants.CONTROL_FILE_DELIMETER));
						try
						{
							if(!encodedHashKey.equalsIgnoreCase(controlFields.get(IntegrationConstants.CTL_MD5_HASHKEY_INDEX)))
							{
								isValid = false;
								if(errorReason.isEmpty())
									errorReason = "Received MD5 in ctl (" + controlFields.get(IntegrationConstants.CTL_MD5_HASHKEY_INDEX) + ") and generated MD5 (" + encodedHashKey + ") do not match";
								else
									errorReason = errorReason + " , received MD5 in ctl (" + controlFields.get(IntegrationConstants.CTL_MD5_HASHKEY_INDEX) + " and generated MD5 (" + encodedHashKey + ") do not match";
							}
							if(actualFile.length() != Long.parseLong(controlFields.get(IntegrationConstants.CTL_FILE_SIZE_INDEX)))
							{
								isValid = false;
								if("".equals(errorReason))
									errorReason = "Received file size in ctl (" + controlFields.get(IntegrationConstants.CTL_FILE_SIZE_INDEX) + ") and actual file size (" + actualFile.length() + ") are not equal";
								else
									errorReason = errorReason + " , received file size in ctl (" + controlFields.get(IntegrationConstants.CTL_FILE_SIZE_INDEX) + ") and actual file size (" + actualFile.length() + ") are not equal";
							}
							if(!actualFile.getName().equals(controlFields.get(IntegrationConstants.CTL_FILE_NAME_INDEX)))
							{
								isValid = false;
								if(errorReason.isEmpty())
									errorReason = "Received file name (" + controlFields.get(IntegrationConstants.CTL_FILE_NAME_INDEX) + ") in ctl does not match with actual file name (" + actualFile.getName() + ")";
								else
									errorReason = errorReason + " , received file name (" + controlFields.get(IntegrationConstants.CTL_FILE_NAME_INDEX) + ") in ctl does not match with actual file name (" +actualFile.getName() + ")";
							}
							int count = countLines(actualFile);
							if(count != Integer.parseInt(controlFields.get(IntegrationConstants.CTL_RECORD_COUNT_INDEX).trim()))
							{
								isValid = false;
								if(errorReason.isEmpty())
									errorReason = "Received line count in ctl (" + controlFields.get(IntegrationConstants.CTL_RECORD_COUNT_INDEX) + ") and actual file lines count (" + count + ") do not match";
								else
									errorReason = errorReason + " , received line count in ctl (" + controlFields.get(IntegrationConstants.CTL_RECORD_COUNT_INDEX) + ") and actual file lines count (" + count + ") do not match";
							}
							if(fileRecordsLimit != null && (count-1) > fileRecordsLimit)
							{
								isValid = false;
								if(errorReason.isEmpty())
									errorReason = "The records count(" + (count-1) + ") in the file exceeds the limit";
								else
									errorReason = errorReason + " , the records count(" + (count-1) + ") in the file exceeds the limit";
							}
						}
						catch(Exception e)
						{
							isValid = false;
							if(errorReason.isEmpty())
								errorReason = "Ctl file contains invalid data or not in agreed format";
							else
								errorReason = errorReason + " , ctl file contains invalid data or not in agreed format";
							TLogger.error("Ctl file contains invalid data-->", e);
						}
						if(isValid)
						{
							try
							{
								inputStream = new FileInputStream(actualFile);
								inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
								brcsv1 = new BufferedReader(inputStreamReader);
								fileName = actualFile.getName();
								fileHeaders = brcsv1.readLine();
								fileHeaders = fileHeaders.trim();
//								TLogger.debug("Name :::" + actualFile.getName());
								if(fileHeaders.startsWith("\uFEFF"))
								{
									fileHeaders = fileHeaders.substring(1);
								}

								/*if(fileName.contains("_01_"))
								{
									if(!firstFileHeaders.equals(fileHeaders))
									{
										isValid = false;
										if("".equals(errorReason))
											errorReason = "File header format is invalid in " + fileName;
										else
											errorReason = errorReason + " , file header format is invalid in " + fileName;
									}
								}
								if(fileName.contains("_02_"))
								{
									if(!secondFileHeaders.equals(fileHeaders))
									{
										isValid = false;
										if("".equals(errorReason))
											errorReason = "File header format is invalid in " + fileName;
										else
											errorReason = errorReason + " , file header format is invalid in " + fileName;
									}
								}*/
								if(additionalFieldsFile != null && additionalFieldsFile)
								{
									if(!secondFileHeaders.equals(fileHeaders))
									{
										isValid = false;
										if(errorReason.isEmpty())
											errorReason = "File header format is invalid in " + fileName;
										else
											errorReason = errorReason + " , file header format is invalid in " + fileName;
									}
								}
								else if(!firstFileHeaders.equals(fileHeaders))
								{
									isValid = false;
									if(errorReason.isEmpty())
										errorReason = "File header format is invalid in " + fileName;
									else
										errorReason = errorReason + " , file header format is invalid in " + fileName;
								}

								inputStream.close();
								inputStreamReader.close();
								brcsv1.close();
							}
							catch(Exception e)
							{
								isValid = false;
								if(errorReason.isEmpty())
									errorReason = "File header format is invalid";
								else
									errorReason = errorReason + " , file header format is invalid";
								TLogger.error("File header contains invalid data-->", e);
							}
						}
						if(!isValid)
						{
							TLogger.debug("Invalid file and error reason is -->"+errorReason);
							backupFile = new File((String)localServerjsonObject.get("RejectedDir") + File.separator + actualFile.getName());

							backupFile(actualFile, backupFile);
							actualFile.delete();

							backupFile = new File((String)localServerjsonObject.get("RejectedCtlDir") + File.separator + controlFile.getName());
							backupFile(controlFile, backupFile);
							controlFile.delete();

							interfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_REJECTED_STATUS));
							interfaceFileSummary.setMessage(errorReason);
							integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);

							/***** added here for changing the status in file_Summary details if md5 is null and moving files  to sftp  *****/

							interfaceFileSummaryDetails.setFileType(IntegrationConstants.REJECTED_FILE_TYPE_CHAR);
							integrationManagementLocal.updateInterfaceFileSummaryDetails(interfaceFileSummaryDetails);
							inputMap = new HashMap<String,Object>();
							inputMap.put("partnerName",getInterfaceAttributeValue(interfaces.getInterfaceId(), interfaceFileSummary.getUploadedBy()+"_NAME"));
							inputMap.put("interfaceName", interfaces.getName());
							inputMap.put("actualFile", interfaceFileSummaryDetails.getFileName());
							inputMap.put("controlFile", interfaceFileSummaryDetails.getControlFileName());
							inputMap.put("reason", errorReason);

							integrationUtilManagementLocal.prepareNotificationJsonData(interfaceId, IntegrationConstants.FILE_REJECTION_AT_CTL_SCENARIO+"_"+interfaceFileSummary.getUploadedBy(), inputMap);
							success = false;
						}
						br.close();
					}
					if(!success)
					{
						sendFile(interfaceFileSummary.getFileId(), IntegrationConstants.REJECTED_FILE_TYPE_CHAR);
						continue;
					}
					if(IntegrationConstants.RESPONSE_FILE_TYPE.equalsIgnoreCase(fileType))
					{
						while ((line = br.readLine()) != null) 
						{
							try
							{
								//							transactionId = getTransactionId(interfaceId, line);
								//							updateInterfaceSummaryByResponse(line, transactionId, interfaceId, IntegrationConstants.RES_AVAILABLE_STATUS);
							}
							catch(Exception e)
							{
								TLogger.error("Unhandled Exception -->", e);
								//							fileOutputStream.write(line.getBytes());
							}
						}
					}
					else if(IntegrationConstants.REQUEST_FILE_TYPE.equalsIgnoreCase(fileType))
					{
						if(IntegrationConstants.FILE_TRANSFER_PROCESS.equalsIgnoreCase(fileProcessType))
						{
							sendFile(interfaceFileSummary.getFileId(), IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
							InterfaceFileSummary newInterfaceFileSummary = entityManager.find(InterfaceFileSummary.class, interfaceFileSummary.getFileId());
							newInterfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_PROCESSED));
							newInterfaceFileSummary.setProcessedOn(new Date());
							integrationManagementLocal.updateInterfaceFileSummary(newInterfaceFileSummary);
						}
						else
						{	
							context = new InitialContext();
							csvMerger = (CSVMerger) context.lookup(mergerClass);
							if(csvMerger == null)
							{
								TLogger.error("Pls configure the csv merger for the inteface id :: " + interfaces.getInterfaceId());
								return;
							}
							try
							{
								csvMerger.processRequest(interfaces.getInterfaceId(), interfaceFileSummary.getFileId());
							}
							catch(Exception e)
							{
								errorReason = "Internal Server Error, Please contact support team...";
								TLogger.debug("invalid file and error reason is -->"+e.getMessage());
								if(actualFile.exists())
								{
									backupFile = new File((String)localServerjsonObject.get("RejectedDir") + File.separator + actualFile.getName());

									backupFile(actualFile, backupFile);
									compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath() + "." + IntegrationConstants.ZIP_FILE_FORMAT);
									actualFile.delete();
									backupFile.delete();
								}
								if(controlFile.exists())
								{
									backupFile = new File((String)localServerjsonObject.get("RejectedCtlDir") + File.separator + controlFile.getName());

									backupFile(controlFile, backupFile);
									compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath() + "." + IntegrationConstants.ZIP_FILE_FORMAT);
									controlFile.delete();
									backupFile.delete();
								}
								interfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_REJECTED_STATUS));
								interfaceFileSummary.setMessage(errorReason);
								interfaceFileSummary.setErrorMessage(e.getMessage().length() > IntegrationConstants.FILE_SUM_ERROR_MSG_CHAR_LIMIT ? e.getMessage().substring(0, (IntegrationConstants.FILE_SUM_ERROR_MSG_CHAR_LIMIT - 1)) : e.getMessage());

								integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);

								/***** added here for changing the status in file_Summary details if md5 is null and moving files  to sftp  *****/
								interfaceFileSummaryDetailsSet = interfaceFileSummary.getFileSummaryDetails();
								for(InterfaceFileSummaryDetails interfaceFileSummaryDetails :interfaceFileSummaryDetailsSet )
								{
									interfaceFileSummaryDetails.setFileType(IntegrationConstants.REJECTED_FILE_TYPE_CHAR);
									integrationManagementLocal.updateInterfaceFileSummaryDetails(interfaceFileSummaryDetails);
									inputMap = new HashMap<String,Object>();
									inputMap.put("partnerName",getInterfaceAttributeValue(interfaces.getInterfaceId(), interfaceFileSummary.getUploadedBy()+"_NAME"));
									inputMap.put("interfaceName", interfaces.getName());
									inputMap.put("actualFile", interfaceFileSummaryDetails.getFileName());
									inputMap.put("controlFile", interfaceFileSummaryDetails.getControlFileName());
									inputMap.put("reason", errorReason);
									inputMap.put("errorCode",IntegrationConstants.INTERNAL_SERVER_ERROR);
									inputMap.put("fileNames", interfaceFileSummaryDetails.getFileName());
								}
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaceId, IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+interfaceFileSummary.getUploadedBy(), inputMap);
								success = false;
							}
							if(br != null)
								br.close();
						}
					}
					for(InterfaceFileSummaryDetails interfaceFileSummaryDetails : interfaceFileSummaryDetailsSet)
					{
						TLogger.debug("Inside ... interfaceFileSummaryDetails.getFileName() :: " + interfaceFileSummaryDetails.getFileName());
						TLogger.debug("localServerjsonObject :: " + localServerjsonObject);
						if(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR.equalsIgnoreCase(interfaceFileSummaryDetails.getFileType()))
						{
							actualFile = new File(localServerjsonObject.get("BkpDir") + interfaceFileSummaryDetails.getFileName());
							if(actualFile.exists())
							{
								compressGzipFile(actualFile.getAbsolutePath(), actualFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
								actualFile.delete();
							}
							controlFile = new File(localServerjsonObject.get("CtlBkpDir") + interfaceFileSummaryDetails.getControlFileName());
							if(controlFile.exists())
							{
								compressGzipFile(controlFile.getAbsolutePath(), controlFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
								controlFile.delete();
							}
						}
						else if(IntegrationConstants.REJECTED_FILE_TYPE_CHAR.equalsIgnoreCase(interfaceFileSummaryDetails.getFileType()))
						{
							actualFile = new File(localServerjsonObject.get("RejectedBkpDir") + interfaceFileSummaryDetails.getFileName());
							if(actualFile.exists())
							{
								compressGzipFile(actualFile.getAbsolutePath(), actualFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
								actualFile.delete();
							}
							controlFile = new File(localServerjsonObject.get("RejectedCtlBkpDir") + interfaceFileSummaryDetails.getControlFileName());
							if(controlFile.exists())
							{
								compressGzipFile(controlFile.getAbsolutePath(), controlFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
								controlFile.delete();
							}
						}
						else if(IntegrationConstants.FILTER_FILE_TYPE_CHAR.equalsIgnoreCase(interfaceFileSummaryDetails.getFileType()))
						{
							if(localServerjsonObject.get("FilterBkpDir") != null)
							{
								actualFile = new File(localServerjsonObject.get("FilterBkpDir") + interfaceFileSummaryDetails.getFileName());
								if(actualFile.exists())
								{
									compressGzipFile(actualFile.getAbsolutePath(), actualFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
									actualFile.delete();
								}
							}
							if(localServerjsonObject.get("FilterCtlBkpDir") != null)
							{
								controlFile = new File(localServerjsonObject.get("FilterCtlBkpDir") + interfaceFileSummaryDetails.getControlFileName());
								TLogger.debug("interfaceFileSummaryDetails.getControlFileName() : " + interfaceFileSummaryDetails.getControlFileName() + " :: controlFile : " + controlFile.getAbsolutePath());
								if(controlFile.exists())
								{
									compressGzipFile(controlFile.getAbsolutePath(), controlFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
									controlFile.delete();
								}
							}
						}
					}
					entityManager.refresh(interfaceFileSummary);
					TLogger.debug("InterfaceId : " + interfaceId + " : FileId : " + interfaceFileSummary.getFileId() + " processReceivedFiles method is completed at " + new Date());
				}
				catch(Exception e)
				{
					TLogger.error("Exception on process received files - file summary loop :", e);
					continue;
				}
			}
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
			throw new IntegrationManagement.processReceivedFilesException("NullPointer Exception " + nullPointerException.getMessage(), nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.processReceivedFilesException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(), exception);
			throw new IntegrationManagement.processReceivedFilesException("Unhandled Exception :: "+exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			fileType = null;
			fileProcessType = null;
			line = null;
			mergerClass = null;
			context = null;
			csvMerger = null;
			controlFile = null;
			controlFields = null;
			localServerjsonObject = null;
			jsonParser = null;
			inputMap = null; 
			actualFile = null;
			backupFile = null;
			interfaceFileSummaryList = null;
			interfaceFileSummaryDetailsSet = null;
			errorReason = null;
			fileName = null;
			fileHeaders = null;
			firstFileHeaders = null;
			secondFileHeaders = null;
			additionalFieldsFile = null;
			fileRecordsLimit = null;
			try 
			{
				if(br!=null)
					br.close();
			} 
			catch (IOException e) 
			{
				TLogger.error("Unhandled Exception -->", e);
			}
			try 
			{
				if(inputStream != null)
					inputStream.close();
				if(inputStreamReader != null)
					inputStreamReader.close();
				if(brcsv1!=null)
					brcsv1.close();
			} 
			catch (IOException e) 
			{
				TLogger.error("Unhandled Exception -->", e);
			}
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processReceivedFiles " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

			inputStream = null;
			inputStreamReader = null;
			brcsv1 = null;
			startTime = null;
		}
	}

	@RolesAllowed("default")
	public void reProcessFileBasedOrders(Long interfaceId, Long fileId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();

		TLogger.debug("Entry reProcessFileBasedOrders :: interfaceId :" + interfaceId + " fileId :: "+fileId);
		boolean validInterface = true;
		String reProcessClass = null;
		Context context = null;
		CSVMerger csvMerger = null;
		InterfaceFileSummary interfaceFileSummary = null;
		Date uploadedDate = null;
		Query failureTblDltQry = null;
		DB db = null;
		DBCollection collection = null;
		DBCursor cursor = null;
		DBObject queryObj = null;

		try
		{
			reProcessClass = "java:global/EnhancesysManagement/IntegrationServices/reProcessClass!com.enhancesys.integration.services.interfaces.merger.CSVMerger";
			if(interfaceId == null)
			{
				TLogger.error("InterfaceId should not be empty..");
				throw new IntegrationManagement.reProcessFileOrdersException("InterfaceId should not be empty.. ", null);
			}
			if(fileId == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.reProcessFileOrdersException("FileId should not be empty.. ", null);
			}

			interfaceFileSummary = integrationManagementLocal.getInterfaceFileSummary(fileId);

			if(interfaceFileSummary.getInterfaces().getInterfaceId().longValue() != interfaceId.longValue())
			{
				TLogger.error("Given File Id is not associated with given Interface Id..");
				throw new IntegrationManagement.reProcessFileOrdersException("Given File Id is not associated with given Interface Id..", null);
			}

			uploadedDate = interfaceFileSummary.getUploadedOn();
			int differenceInDays = (int) ((new Date().getTime() - uploadedDate.getTime()) / (1000 * 60 * 60 * 24));
			TLogger.debug("Difference in Days :: " + differenceInDays);

			if(IntegrationConstants.SP_STOCK_DUMP_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.INTERFACE_SCHEMA_NAME + ".sp_stock_dump where file_id=:fileId and status=:status");
					failureTblDltQry.setParameter("fileId", fileId.toString());
					failureTblDltQry.setParameter("status", IntegrationConstants.st_error);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from sp_stock_dump, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessPendingSPStockDump");
			}
			else if(IntegrationConstants.SP_ALLOC_DUMP_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.INTERFACE_SCHEMA_NAME + ".sp_alloc_dump where file_id=:fileId and status=:status");
					failureTblDltQry.setParameter("fileId", fileId.toString());
					failureTblDltQry.setParameter("status", IntegrationConstants.st_error);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from sp_alloc_dump, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessPendingSPAllocDump");
			}
			else if(IntegrationConstants.VO_STOCK_DUMP_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.INTERFACE_SCHEMA_NAME + ".stock_dump_voucher where file_id_n=:fileId and status=:status ");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from stock_dump_voucher, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessPendingVoucherStockDump");
			}
			else if(IntegrationConstants.VO_ALLOC_DUMP_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.INTERFACE_SCHEMA_NAME + ".alloc_dump_voucher where file_id_n=:fileId and status=:status");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from alloc_dump_voucher, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessPendingVoucherAllocDump");
			}
			else if(IntegrationConstants.ORG_SYNC_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_failure where trans_id_n in (select trans_id_n from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=:fileId and status_n=:status)");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_interface_failure, File Id : " + fileId);

					failureTblDltQry = entityManager.createNativeQuery("delete from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=:fileId and status_n=:status");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_interface_summary, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessOrgSync");
			}
			else if(IntegrationConstants.USER_SYNC_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_failure where trans_id_n in (select trans_id_n from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=:fileId and status_n=:status)");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_interface_failure, File Id : " + fileId);

					failureTblDltQry = entityManager.createNativeQuery("delete from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=:fileId and status_n=:status");
					failureTblDltQry.setParameter("fileId", fileId);
					failureTblDltQry.setParameter("status", IntegrationConstants.ERROR_STATUS);
					deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_interface_summary, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}				
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessUserSync");
			}
			else if(IntegrationConstants.ACTIVATION_FEED_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					db = TokuUser.adminMongoClient.getDB("interface");
					collection = db.getCollection("act_data");

					queryObj = new BasicDBObject();
					queryObj.put("file_id", fileId);
					queryObj.put("status", 770l);
					cursor = collection.find(queryObj).batchSize(100);
					if(cursor.hasNext())
					{
						WriteResult result = collection.remove(queryObj);
						TLogger.debug("Deleted : " + result.getN() + " documents from act_data collection, File Id : " + fileId);
					}
					cursor.close();
					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessActivationFeed");
			}
			else if(IntegrationConstants.DEACTIVATION_FEED_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					db = TokuUser.adminMongoClient.getDB("interface");
					collection = db.getCollection("deact_data");

					queryObj = new BasicDBObject();
					queryObj.put("file_id", fileId);
					queryObj.put("status", 770l);
					cursor = collection.find(queryObj).batchSize(100);
					if(cursor.hasNext())
					{
						WriteResult result = collection.remove(queryObj);
						TLogger.debug("Deleted : " + result.getN() + " documents from deact_data collection, File Id : " + fileId);
					}
					cursor.close();
					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessDeactivationFeed");
			}
			else if(IntegrationConstants.VOUCHER_REDEMPTION_FEED_INTERFACE_ID.longValue() == interfaceId.longValue())
			{
				if(differenceInDays > 30)
				{
					db = TokuUser.adminMongoClient.getDB("interface");
					collection = db.getCollection("redeem_data");

					queryObj = new BasicDBObject();
					queryObj.put("file_id", fileId);
					queryObj.put("status", 770l);
					cursor = collection.find(queryObj).batchSize(100);
					if(cursor.hasNext())
					{
						WriteResult result = collection.remove(queryObj);
						TLogger.debug("Deleted : " + result.getN() + " documents from redeem_data collection, File Id : " + fileId);
					}
					cursor.close();
					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReProcessVoucherRedemption");
			}
			else if(IntegrationConstants.KPI_FEED_INTERFACE_LIST.contains(interfaceId.toString()))
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.KPI_SCHEMA_NAME+".tr_temp_upload_aggr_failure where file_id_n=:fileId");
					failureTblDltQry.setParameter("fileId", fileId);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_temp_upload_aggr_failure, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
					//throw new IntegrationManagement.reProcessFileOrdersException("Reprocess Time Period Exceeded..", null);
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReprocessKPIAggregation");
			}
			else
				validInterface = false;

			if(validInterface)
			{
				context = new InitialContext();
				csvMerger = (CSVMerger) context.lookup(reProcessClass);

				try
				{
					csvMerger.processRequest(interfaceId, fileId);
				}
				catch(Exception e)
				{
					TLogger.error("Internal Server Error, Please contact support team.." + fileId);
				}
			}
			else
			{
				TLogger.error("Please provide valid reProcess InterfaceId");
			}

		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(), exception);
			throw new IntegrationManagement.reProcessFileOrdersException("Unhandled Exception :: "+exception.getMessage(), exception);
		}
		finally
		{
			reProcessClass = null;
			context = null;
			csvMerger = null;
			interfaceFileSummary = null;
			failureTblDltQry = null;
			uploadedDate = null;
			db = null;
			collection = null;
			queryObj = null;
			if(cursor != null)
				cursor.close();
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit reProcessFileBasedOrders service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @return ReprocessFileBean
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public ReprocessFileBean getFilesForReprocess(Long interfaceId) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getFilesForReprocess.." + interfaceId);
		}

		ReprocessFileBean reprocessFileBean = null;
		Query query = null;
		List<Object> resultList = null;
		BasicDBObject fieldLookupConf = null;
		BasicDBObject reprocessConf = null;
		String fieldLookupConfStr = null;

		try
		{
			fieldLookupConfStr = getInterfaceAttributeValue(interfaceId, IntegrationConstants.FIELD_LOOKUP_CONF_ATTR);
			if(fieldLookupConfStr == null)
			{
				TLogger.debug("FieldLookupConf configuration is not configured for interface : " + interfaceId);
				return null;
			}

			fieldLookupConf = (BasicDBObject) JSON.parse(fieldLookupConfStr);
			if(fieldLookupConf.containsField("reprocess") && fieldLookupConf.get("reprocess") != null)
				reprocessConf = (BasicDBObject) fieldLookupConf.get("reprocess");
			if(reprocessConf == null)
			{
				TLogger.debug("Reprocess configuration is not configured for interface : " + interfaceId);
				return null;
			}

			reprocessFileBean = new ReprocessFileBean();
			query = entityManager.createNativeQuery("select distinct(file_id_n) from "+IntegrationConstants.KPI_SCHEMA_NAME+".tr_temp_upload_aggr_failure where event_type_n=:eventType and error_code=:errorCode");
			query.setParameter("eventType", reprocessConf.getLong("event_type"));
			query.setParameter("errorCode", reprocessConf.getLong("error_code"));
			resultList = query.getResultList();
			if(!resultList.isEmpty())
			{
				for(Object row : resultList)
				{
					reprocessFileBean.getFiles().add(((Number) row).longValue());
				}
				reprocessFileBean.setErrorCode(reprocessConf.getLong("error_code"));
			}

			return reprocessFileBean;
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPoiinter Exception : " + nullPointerException.getMessage(), nullPointerException);
			throw new IntegrationManagement.GetFilesForReprocessException("NullPoiinter Exception : " + nullPointerException.getMessage(), nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception : " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetFilesForReprocessException("Persistence Exception : " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch (Exception exception)
		{
			TLogger.error("Unhandled Exception : " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetFilesForReprocessException("Unhandled Exception : " + exception.getMessage(), exception);
		}
		finally
		{
			reprocessFileBean = null;
			query = null;
			resultList = null;
			fieldLookupConf = null;
			reprocessConf = null;
			fieldLookupConfStr = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getFilesForReprocess.." + interfaceId);
			}
		}
	}

	/**
	 * @author Harish Kumar S
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param fileId
	 * @param errorCode
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void reProcessFilesBasedOnErrorCode(Long interfaceId, Long fileId, Long errorCode) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();

		TLogger.debug("Entry reProcessFilesBasedOnErrorCode :: interfaceId :" + interfaceId + " fileId :: " + fileId + " ErrorCode :: " + errorCode);
		boolean validInterface = true;
		String reProcessClass = null;
		Context context = null;
		ReProcess reProcess = null;
		InterfaceFileSummary interfaceFileSummary = null;
		Date uploadedDate = null;
		Query failureTblDltQry = null;
		String retryCount = null;

		try
		{
			reProcessClass = "java:global/EnhancesysManagement/IntegrationServices/reProcessClass!com.enhancesys.integration.services.interfaces.reprocess.ReProcess";
			if(interfaceId == null)
			{
				TLogger.error("InterfaceId should not be empty..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("InterfaceId should not be empty.. ", null);
			}
			if(fileId == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("FileId should not be empty.. ", null);
			}

			if(errorCode == null)
			{
				TLogger.error("ErrorCode should not be empty..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("ErrorCode should not be empty.. ", null);
			}
			if(!IntegrationConstants.KPI_LACCI_FEED_ERROR_CODE_LIST.contains(errorCode.toString()))
			{
				TLogger.error("Invalid Error Code..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Invalid Error Code..", null);
			}

			retryCount = integrationManagementLocal.getInterfaceAttributeValue(interfaceId, IntegrationConstants.RETRY_COUNT_ATTR);
			if(retryCount == null)
			{
				TLogger.error("Retry Count attribute is not configured for the interface..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Retry Count attribute is not configured for the interface..", null);
			}

			interfaceFileSummary = integrationManagementLocal.getInterfaceFileSummary(fileId);

			if(interfaceFileSummary == null)
			{
				TLogger.error("Invalid File Id..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Invalid File Id..", null);
			}

			if(interfaceFileSummary.getRetryCount().longValue() >= Long.parseLong(retryCount))
			{
				TLogger.error("Retry Count has reached maximum limit..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Retry Count has reached maximum limit..", null);
			}

			if(interfaceFileSummary.getInterfaces().getInterfaceId().longValue() != interfaceId.longValue())
			{
				TLogger.error("Given File Id is not associated with given Interface Id..");
				throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Given File Id is not associated with given Interface Id..", null);
			}

			uploadedDate = interfaceFileSummary.getUploadedOn();
			int differenceInDays = (int) ((new Date().getTime() - uploadedDate.getTime()) / (1000 * 60 * 60 * 24));
			TLogger.debug("Difference in Days :: " + differenceInDays);

			if(IntegrationConstants.KPI_LACCI_FEED_INTERFACE_LIST.contains(interfaceId.toString()))
			{
				if(differenceInDays > 30)
				{
					failureTblDltQry = entityManager.createNativeQuery("delete from "+IntegrationConstants.KPI_SCHEMA_NAME+".tr_temp_upload_aggr_failure where file_id_n=:fileId");
					failureTblDltQry.setParameter("fileId", fileId);
					int deletedRowCount = failureTblDltQry.executeUpdate();
					entityManager.flush();
					TLogger.debug("Deleted " + deletedRowCount + " rows from tr_temp_upload_aggr_failure, File Id : " + fileId);

					TLogger.debug("Reprocess Time Period Exceeded..");
					return;
					//throw new IntegrationManagement.reProcessFileOrdersException("Reprocess Time Period Exceeded..", null);
				}
				reProcessClass = reProcessClass.replace("reProcessClass", "ReprocessKPILacciAggregation");
			}
			else
				validInterface = false;

			if(validInterface)
			{
				context = new InitialContext();
				reProcess = (ReProcess) context.lookup(reProcessClass);

				try
				{
					reProcess.processRequest(interfaceId, fileId, errorCode);
				}
				catch(Exception e)
				{
					TLogger.error("Internal Server Error, Please contact support team.." + fileId);
				}
			}
			else
			{
				TLogger.error("Please provide valid reProcess InterfaceId");
			}

		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(), exception);
			throw new IntegrationManagement.reProcessFilesBasedOnErrorCodeException("Unhandled Exception :: "+exception.getMessage(), exception);
		}
		finally
		{
			reProcessClass = null;
			context = null;
			reProcess = null;
			interfaceFileSummary = null;
			failureTblDltQry = null;
			uploadedDate = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit reProcessFilesBasedOnErrorCode service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
		}
	}

	public static int countLines(File aFile) throws IOException {
		LineNumberReader reader = null;
		try {
			reader = new LineNumberReader(new FileReader(aFile));
			while ((reader.readLine()) != null)
				continue;
			return reader.getLineNumber();
		} catch (Exception ex) {
			return -1;
		} finally { 
			if(reader != null) 
				reader.close();
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given interfaceId and parameterName parameters.
	 * 		2. Get the list of interfaceAttribute objects for the given parameter values.
	 * 		3. If the interfaceAttribute list is not empty then get the attribute and return the same.
	 * </pre>
	 * @param interfaceId
	 * @param parameterName
	 * @return InterfaceAttribute
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public String getInterfaceAttributeValue(Long interfaceId, String parameterName) throws ApplicationException 
	{ 
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry getInterfaceAttributeValue.. Started at --> "+ new Date());
		//		}


		List<Object> resultList = null;
		Object row = null;
		Query query = null;
		String value = null;

		try 
		{ 

			//			TLogger.debug("getInterfaceAttributeValue service received interface id and parameter Name-->"+interfaceId+","+parameterName);
			query = entityManager.createNativeQuery("select value_v from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".ms_interface_attr where interface_id_n=:interfaceId and name_v=:name order by name_v");
			query.setParameter("interfaceId", interfaceId);
			query.setParameter("name", parameterName);

			resultList = query.getResultList();
			if(!resultList.isEmpty())
			{
				row = resultList.get(0);
				value = row.toString();
			}

			return value;
		} 
		catch(Exception e) 
		{ 
			TLogger.error(e.getMessage(), e); 
			throw new IntegrationManagement.GetApplicationInterfaceAttributeException(e.getMessage(), e); 
		} 
		finally
		{
			resultList = null;
			row = null;
			query = null;
			value = null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit getInterfaceAttributeValue service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	} 

	/**
	 * @author Parthipan Rajagopal
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given interfaceId and parameterName parameters.
	 * 		2. Get the interfaceAttribute objects for the given parameter values.
	 * 		3. If the interfaceAttribute list is not empty then get the attribute and return the same.
	 * </pre>
	 * @param interfaceId
	 * @param parameterName
	 * @return InterfaceAttribute
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public InterfaceAttribute getInterfaceAttributeValueByInterfaceIdAndname(Long interfaceId, String parameterName) throws ApplicationException 
	{ 
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry getInterfaceAttributeValueByInterfaceIdAndname.. Started at --> "+ new Date());
		//			TLogger.debug("getInterfaceAttributeValueByInterfaceIdAndname.. inputs --> interfaceId-->"+ interfaceId+" --> parameterName-->"+parameterName);
		//		}


		InterfaceAttribute interfaceAttribute = null;
		Query query = null;

		try 
		{ 

			//			TLogger.debug("getInterfaceAttributeValue service received interface id and parameter Name-->"+interfaceId+","+parameterName);
			query = entityManager.createQuery("from " + InterfaceAttribute.class.getCanonicalName() + " where interfaces.interfaceId =:interfaceId and name_v=:name");
			query.setParameter("interfaceId", interfaceId);
			query.setParameter("name", parameterName);

			interfaceAttribute = (InterfaceAttribute) query.getSingleResult();

			return interfaceAttribute;
		} 
		catch(Exception e) 
		{ 
			TLogger.error(e.getMessage(), e); 
			throw new IntegrationManagement.GetApplicationInterfaceAttributeException(e.getMessage(), e); 
		} 
		finally
		{
			query = null;
			interfaceAttribute = null;
			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit getInterfaceAttributeValue service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	} 

	/**
	 * 
	 * @param interfaceId
	 * @param responseData
	 * @return Long
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public String getTransactionId(Long interfaceId, String responseData) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getTransactionId.. Started at --> "+ new Date());
		}*/


		Interfaces applicationInterface = null;
		DocumentBuilderFactory docBuilderFactory = null;
		DocumentBuilder documentBuilder = null;
		Document document = null;
		XPathFactory factory = null;
		XPath xpath = null;
		XPathExpression expression = null;
		Object result = null;
		String path = null;
		String transIdDelimeter = null;
		String[] splittedResponseData = null;
		String dataformat = null;

		try
		{
			//			TLogger.debug("getTransactionId service received interface id and response data-->"+interfaceId+","+responseData);
			if(interfaceId == null)
			{
				TLogger.error("InterfaceId should not be empty..");
				throw new IntegrationManagement.GetTransactionIdException("InterfaceId should not be empty..", null);
			}

			applicationInterface = entityManager.find(Interfaces.class, interfaceId);

			if(applicationInterface == null)
			{
				TLogger.error("ApplicationInterface object does not exist for interfaceId : " + interfaceId);
				throw new IntegrationManagement.GetTransactionIdException("ApplicationInterface object does not exist for interfaceId : " + interfaceId, null);
			}

			for (InterfaceAttribute attribute : applicationInterface.getAttributes()) 
			{
				if(IntegrationConstants.TRANS_ID_PATH_ATTR.equalsIgnoreCase(attribute.getName()))
				{
					path = attribute.getValue();
				}
				else if(IntegrationConstants.TRANS_ID_DELIMETER.equalsIgnoreCase(attribute.getName()))
				{
					transIdDelimeter = attribute.getValue();
				}
				else if(IntegrationConstants.REMOTE_FILE_FORMAT.equalsIgnoreCase(attribute.getName()))
				{
					dataformat = attribute.getValue();
				}
			}

			if(IntegrationConstants.ASYNC_QUEUE_INTERFACE_TYPE.equals(applicationInterface.getInterfaceType()))
			{
				if(path == null)
				{
					return null;
				}

				docBuilderFactory = DocumentBuilderFactory.newInstance();
				documentBuilder = docBuilderFactory.newDocumentBuilder();
				document = documentBuilder.parse(new ByteArrayInputStream(responseData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT)));
				document.getDocumentElement().normalize();

				factory = XPathFactory.newInstance();
				xpath = factory.newXPath();
				expression = xpath.compile(path);
				result = expression.evaluate(document, XPathConstants.STRING);

				if(result == null)
				{
					return null;
				}
				//return Long.valueOf(result.toString());
			}
			else
			{
				//				TLogger.debug("dataformat : "+dataformat);
				if(IntegrationConstants.XML_TRANSACTION_TYPE.equalsIgnoreCase(dataformat))
				{
					docBuilderFactory = DocumentBuilderFactory.newInstance();
					documentBuilder = docBuilderFactory.newDocumentBuilder();
					document = documentBuilder.parse(new ByteArrayInputStream(responseData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT)));
					document.getDocumentElement().normalize();

					factory = XPathFactory.newInstance();
					xpath = factory.newXPath();
					expression = xpath.compile(path);
					result = expression.evaluate(document, XPathConstants.STRING);

					//return Long.valueOf(result.toString());
				}
				else if(IntegrationConstants.CSV_TRANSACTION_TYPE.equalsIgnoreCase(dataformat) || transIdDelimeter != null)
				{
					splittedResponseData = responseData.split(transIdDelimeter);
					int indexValue = Integer.parseInt(path);
					result = splittedResponseData[indexValue]; 

					//	return Long.valueOf(result.toString());
				}
			}

			if(result == null || "".equalsIgnoreCase(result.toString().trim()))
			{
				return null;
			}
			return result.toString();
		}
		catch(NumberFormatException numberFormatException)
		{
			TLogger.error("Error in initialising entity manager"+path, numberFormatException);
			throw new IntegrationManagement.GetTransactionIdException("Error in initialising entity manager"+path, numberFormatException);
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetTransactionIdException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetTransactionIdException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetTransactionIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			applicationInterface = null;
			docBuilderFactory = null;
			documentBuilder = null;
			document = null;
			factory = null;
			xpath = null;
			expression = null;
			result = null;
			path = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getTransactionId service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * 
	 * @param refData1
	 * @param interfaceId
	 * @param status
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public List<InterfaceSummary> getInterfaceSummaryByRefData1(String refData1, Long refData2, Long interfaceId, Long status, Long refData5) throws ApplicationException
	{

		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry getInterfaceSummaryByRefData1.. Started at --> "+ new Date());
		//		}


		List<InterfaceSummary> interfaceSummaries = null;
		Query query = null;
		StringBuffer queryString = new StringBuffer();

		try
		{


			//TLogger.debug("Entry getInterfaceSummaryByRefData1 service received ..refData1 : "+refData1 +" interfaceId : "+ interfaceId +" status: "+  status+" refdata2: "+refData2+" refData5: "+refData5);
			if(refData1 == null || "".equals(refData1.trim()))
			{
				TLogger.error("refData1 Id should not be empty..");
				throw new IntegrationManagement.GetInterfaceSummaryException("refData1 Id should not be empty..", null);
			}

			queryString.append("from " + InterfaceSummary.class.getCanonicalName() + " where referenceData1=:refData1");

			if(refData2 != null)
			{
				queryString.append(" and referenceData2 =:refData2");
			}

			if(refData5 != null)
			{
				queryString.append(" and referenceData5 =:refData5");
			}

			if(interfaceId != null)
			{
				queryString.append(" and interfaces.interfaceId =:interfaceId");
			}

			if(status != null)
			{
				queryString.append(" and status.statusId =:status");
			}

			query = entityManager.createQuery(queryString.toString());
			query.setParameter("refData1", refData1);
			if(refData2 != null)
			{
				query.setParameter("refData2",refData2);
			}
			if(interfaceId != null)
			{
				query.setParameter("interfaceId", interfaceId);
			}

			if(status != null)
			{
				query.setParameter("status", status);
			}
			if(refData5 != null)
			{
				query.setParameter("refData5",refData5.toString());
			}
			interfaceSummaries = query.getResultList();

			return interfaceSummaries;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummaries = null;
			query = null;
			queryString = null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit getInterfaceSummaryByRefData1 service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given input parameters refData5 and status.
	 * 		2. Verify the refData5 value, if its empty then throw an exception.
	 * 		3. Otherwise fetch the interfaceSummary object from the persistence layer using the refData5 and status.
	 * 		4. Return the interfaceSummary object.
	 * </pre>
	 * @param refData5
	 * @param status
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public InterfaceSummary getInterfaceSummaryByRefData5(String refData5, Long status) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*	if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummaryByRefData5.. Started at --> "+ new Date());
		}*/

		InterfaceSummary interfaceSummary = null;
		List<InterfaceSummary> interfaceSummaries = null;
		Query query = null;

		try
		{

			TLogger.debug("getInterfaceSummaryByRefData5 service received refData5 and status-->"+refData5+","+status);
			if(refData5 == null || "".equals(refData5.trim()))
			{
				TLogger.error("refData5 should not be empty..");
				throw new IntegrationManagement.GetInterfaceSummaryByRefData5Exception("refData5 should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName()+" where referenceData5=:refData5 and status.statusId=:status");
			query.setParameter("refData5",refData5);
			query.setParameter("status", status);

			interfaceSummaries = query.getResultList();

			if(!interfaceSummaries.isEmpty())
			{
				interfaceSummary = interfaceSummaries.get(0); 
			}

			return interfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData5Exception("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData5Exception("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData5Exception("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			interfaceSummaries = null;
			query = null;
			/*
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummaryByRefData5 service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Parthipan Rajagopal
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given input parameters refData5 and status.
	 * 		2. Verify the refData5 value, if its empty then throw an exception.
	 * 		3. Otherwise fetch the interfaceSummary object from the persistence layer using the refData5 and status.
	 * 		4. Return the interfaceSummary object.
	 * </pre>
	 * @param refData5
	 * @param status
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public InterfaceSummary getInterfaceSummaryByRefData4(Long refData4) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummaryByRefData4.. Started at --> "+ new Date());
		}*/

		InterfaceSummary interfaceSummary = null;
		List<InterfaceSummary> interfaceSummaries = null;
		Query query = null;

		try
		{

			//TLogger.debug("getInterfaceSummaryByRefData4 service received refData4-->"+refData4);
			if(refData4 == null)
			{
				TLogger.error("refData4 should not be empty..");
				throw new IntegrationManagement.GetInterfaceSummaryByRefData5Exception("refData4 should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName()+" where referenceData4=:refData4");
			query.setParameter("refData4",refData4);

			interfaceSummaries = query.getResultList();
			//TLogger.debug("interfaceSummaries--->"+interfaceSummaries);
			if(!interfaceSummaries.isEmpty())
			{
				interfaceSummary = interfaceSummaries.get(0); 
			}

			return interfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData4Exception("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData4Exception("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummaryByRefData4Exception("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			interfaceSummaries = null;
			query = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummaryByRefData4 service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * 
	 * @param responseString
	 * @param transactionId
	 * @param interfaceId
	 * @param status
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	//	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void updateInterfaceSummaryByResponse(String responseString, Long transactionId, Long interfaceId, Long status, Long retryCount)throws ApplicationException 
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry updateInterfaceSummaryByResponse.. Started at --> "+ new Date());
		}*/
		InterfaceSummary interfaceSummary = null;
		Interfaces interfaces = null;
		Context context = null;
		String convertedResponseData = null;
		DataConverter dataConverter = null;
		Query query = null;
		List<InterfaceAttribute> attributesList = null;
		String responseIdPath = null;
		Date resDate = null;
		InterfaceAttribute interfaceAttr = null;
		InterfaceFileSummary interfaceFileSummary = null;
		org.json.JSONObject jsonResponse = null;
		JSONObject responseObject = null;
//		List<InterfaceSummary> summaries = null;
		InterfaceSummary summary = null;
		BasicDBObject requestObj = null;
		BasicDBObject orgObj = null;
		BasicDBObject request = null;
		BasicDBObject orgStatusRqst = null;

		try
		{
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Entry updateInterfaceSummaryByResponse.. service received interfaceId: "+interfaceId +" transactionId: "+transactionId+", responseString: "+responseString);
			}*/
			resDate = new Date();
			interfaceSummary = getInterfaceSummary(transactionId);
			interfaces = getInterfaceById(interfaceId);

			if(interfaceSummary == null)
			{
				TLogger.debug("InterfaceSummary does not exist for the transaction id " + transactionId );
				throw new Exception("InterfaceSummary does not exist for the transaction id " + transactionId , null);
			}

			if(interfaces.getTransactionType().equals(IntegrationConstants.RECEIVE_TRANS_TYPE) && interfaces.getConverter() != null && !"".equals(interfaces.getConverter().trim()))
			{
				TLogger.debug("Converting response for interface id :: " + interfaces.getInterfaceId());
				context = new InitialContext();
				dataConverter = (DataConverter) context.lookup(interfaces.getConverter());
				convertedResponseData = dataConverter.processRequest(interfaces.getInterfaceId(), responseString,null);
			}
			else
			{
				convertedResponseData = responseString;

				if(IntegrationConstants.SM_SYNC_INTERFACE_IDS.contains(interfaces.getInterfaceId().toString()))
				{
					responseObject = new JSONObject();
					if(responseString.contains("res:ResultCode"))
					{
						jsonResponse = XML.toJSONObject(responseString).getJSONObject("soapenv:Envelope").getJSONObject("soapenv:Body").getJSONObject("api:Result").getJSONObject("res:Body");
						TLogger.debug("JSON Response body Object ::"+jsonResponse);
					}
					if(jsonResponse != null && jsonResponse.getString("res:ResultCode").equals("0"))
					{
						responseObject.put("res_code", 100L);
						interfaceSummary.setReferenceData4(0L);
						if(interfaceSummary.getReferenceData3() != null)
							status = IntegrationConstants.COMPLETED_STATUS;

						if(IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue() == interfaceSummary.getInterfaces().getInterfaceId())
						{
							try
							{
								integrationManagementLocal.publishInternalRequest(IntegrationConstants.SM_USER_CREATION_MODULE_ID, new String(interfaceSummary.getOriginalRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT), interfaceSummary.getReferenceData1(), interfaceSummary.getTransactionId());
							}
							catch(ApplicationException applicationException)
							{
								TLogger.error("User creation operation failed : " + applicationException.getMessage());
							}
							catch(Exception exception)
							{
								TLogger.error("User creation operation failed : " + exception.getMessage());
							}
						}
					}
					else 
					{
						if(IntegrationConstants.USER_CREATION_INTERFACE_ID.longValue() == interfaceSummary.getInterfaces().getInterfaceId())
						{
							if(interfaceSummary.getReferenceData3() != null)
							{
								summary = entityManager.find(InterfaceSummary.class, interfaceSummary.getReferenceData3());
								if(summary != null && summary.getInterfaces().getInterfaceId().longValue() == IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue())
								{
									requestObj = (BasicDBObject) JSON.parse(new String(summary.getOriginalRequestData(),IntegrationConstants.FILE_ENCODE_FORMAT));
									orgObj = (BasicDBObject) ((BasicDBObject)requestObj.get("payload")).get("organization");
									request = new BasicDBObject();
									request.put("org_id", orgObj.getLong("org_id"));
									request.put("status", IntegrationConstants.ORG_TERMINATION_STATUS);
									orgStatusRqst = new BasicDBObject("organization", request);
									integrationManagementLocal.publishInternalRequest(IntegrationConstants.SM_ORG_STATUS_CHANGE_MODULE_ID, (new BasicDBObject().append("payload", orgStatusRqst)).toString(), summary.getReferenceData1(), summary.getTransactionId());
								}
							}
						}
						responseObject.put("res_code", 101L);
						responseObject.put("ext_error_code", (jsonResponse != null ? jsonResponse.getString("res:ResultCode") : 2L));
						interfaceSummary.setReferenceData4(jsonResponse != null ? 1L : 2L);
						if(interfaceSummary.getReferenceData3() != null)
							status = IntegrationConstants.ERROR_STATUS;
					}

					if(jsonResponse != null)
						responseObject.put("res_msg", getSMInterfaceMessage(interfaceSummary.getInterfaces().getInterfaceId(), jsonResponse.getString("res:ResultCode").equals("0") ? true : false) + jsonResponse.get("res:ResultDesc"));
					else
						responseObject.put("res_msg", responseString);
					responseObject.put("trans_id", interfaceSummary.getTransactionId());
					convertedResponseData = responseObject.toJSONString();
				}
				else
				{
					query = entityManager.createQuery("from " + InterfaceAttribute.class.getCanonicalName() + " where name = :name and value =:value");
					query.setParameter("name", IntegrationConstants.PUBLISHER_INTERFACE_ATTR);
					query.setParameter("value", interfaceId.toString());
					attributesList = query.getResultList();
					//TLogger.debug("attributesList ::"+attributesList);
					if(!attributesList.isEmpty())
					{
						interfaceAttr = attributesList.get(0);
						context = new InitialContext();		
						if(!"".equals(interfaceAttr.getInterfaces().getConverter().trim()))
						{
							dataConverter = (DataConverter) context.lookup(interfaceAttr.getInterfaces().getConverter());
							if(dataConverter != null)
							{
								convertedResponseData = dataConverter.processRequest(interfaceAttr.getInterfaces().getInterfaceId(), responseString,null);
								//TLogger.debug(IntegrationConstants.EXT_REF_ID_IN_CONVERTER_TEMPLATE+"========"+ interfaceSummary.getReferenceData1());
								convertedResponseData = convertedResponseData.replaceAll(IntegrationConstants.EXT_REF_ID_IN_CONVERTER_TEMPLATE, interfaceSummary.getReferenceData1());
							}
						}
					}
				}
			}

			//TLogger.debug("Converted response :: " + convertedResponseData);

			//			entityManager.refresh(interfaceSummary, LockModeType.PESSIMISTIC_WRITE);
			responseIdPath = getInterfaceAttributeValue(interfaceId, IntegrationConstants.RESPONSE_ID_PATH_ATTR);
			if(responseIdPath != null && !"".equals(responseIdPath))
			{
				Object responseId = getJsonValue(responseIdPath, responseString);
				if(responseId != null)
					interfaceSummary.setReferenceData4(((Integer)responseId).longValue());
			}

			if(responseString != null)
				interfaceSummary.setOriginalResponseData(responseString.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));

			interfaceSummary.setResponseTime(resDate);
			interfaceSummary.setStatus(entityManager.find(Status.class, status));
			if(interfaceSummary.getReferenceData3() != null && !"".equals(interfaceSummary.getReferenceData3()) && IntegrationConstants.COMPLETED_STATUS.equals(status))
			{
				interfaceFileSummary = getInterfaceFileSummary(interfaceSummary.getReferenceData3());
				if(interfaceFileSummary != null)
				{
					if(interfaceFileSummary.getSuccessCount() == null)
						interfaceFileSummary.setSuccessCount(1L);
					else
						interfaceFileSummary.setSuccessCount(interfaceFileSummary.getSuccessCount()+1);
					integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);
				}
			}

			if(IntegrationConstants.REQ_ONLY_UPLOAD_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
			{
				interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
			}

			if(convertedResponseData != null)
			{
				interfaceSummary.setResponseData(convertedResponseData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			}

			if(retryCount != null)
				interfaceSummary.setRetryCount(retryCount);
			integrationManagementLocal.updateInterfaceSummary(interfaceSummary);
			//			entityManager.flush();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceSummaryByResponseException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceSummaryByResponseException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceSummaryByResponseException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			interfaces = null;
			context = null;
			convertedResponseData = null;
			dataConverter = null;
			query = null;
			attributesList = null;
			responseIdPath = null;
			resDate = null;
			interfaceAttr = null;
			interfaceFileSummary = null;
			jsonResponse = null;
			responseObject = null;
//			summaries = null;
			summary = null;
			requestObj = null;
			orgObj = null;
			request = null;
			orgStatusRqst = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit updateInterfaceSummaryByResponse service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given moduleId, refType, refId and requestData parameters from the request.
	 *     2. Validate moduleId, If the moduleId is null then validate refType.
	 *     3. If the refType is empty then throw an exception.
	 *     4. Otherwise get the moduleId from the entityMapping using refType.
	 *     5. Validate the requestData, if the requestData is empty then throw an exception.
	 *     6. Get Module object from the persistence layer using the moduleId.
	 *     7. Validate module, If the module is empty then throw an exception.
	 *     8. Get the set of Interfaces from Module and validate it, if the set is empty then throw an exception.
	 *     9. Otherwise iterate the interfaces set.
	 *     10. If the transactionType is not consumerTransactionType, then invoke the processConvertRequest service.
	 * </pre>
	 * @param moduleId
	 * @param refType
	 * @param refId
	 * @param requestData
	 * @return void
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public void publishInterfaceData(Long moduleId, Long refType, String refId, String requestData, Long clientId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();

		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry publishInterfaceData.. Started at --> "+ new Date());
		}*/
		Module module = null;
		Query query = null;
		Object row = null;
		List<Object> resultList = null;
		Set<Interfaces> interfacesSet = null;

		try
		{
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("publishInterfaceData..service received moduleId:"+moduleId +" refType :"+refType +" refId :"+refId);
			}*/
			if(moduleId == null)
			{
				if(refType == null)
				{
					TLogger.error("Reference type should not be empty, since module id is empty..");
					throw new IntegrationManagement.PublishInterfaceDataException("Reference type should not be empty, since module id is empty..", null);
				}

				if(refId == null)
				{
					TLogger.error("Reference id should not be empty, since reference type exist..");
					throw new IntegrationManagement.PublishInterfaceDataException("Reference id should not be empty, since reference type exist..", null);
				}

				query = entityManager.createNativeQuery("select id_1_v from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_entity_Mapping where entity_Type_n =:entityType and entity_Id_n =:entityId and application_id_n =:application");
				query.setParameter("entityType", IntegrationConstants.INTERFACE_ENTITY_TYPE);
				query.setParameter("entityId", refType);
				query.setParameter("application", IntegrationConstants.INTERFACE_APPLICATION_ID);

				resultList = query.getResultList();
				if(!resultList.isEmpty())
				{
					row = resultList.get(0);
					moduleId = Long.parseLong(row.toString());
				}
				else
				{
					TLogger.error("Reference type does not exist in entity mapping - " + refType);
					throw new IntegrationManagement.PublishInterfaceDataException("RefType does not exist in entity mapping" + refType, null);
				}
			}

			if(requestData == null || "".equals(requestData.trim()))
			{
				TLogger.error("RequestData should not be empty..");
				throw new IntegrationManagement.PublishInterfaceDataException("RequestData should not be empty..", null);
			}

			module = getModule(moduleId);

			if(module == null)
			{
				TLogger.error("Module does not exist for the given module Id : " + moduleId);
				throw new IntegrationManagement.PublishInterfaceDataException("Module does not exist for the given module Id : " + moduleId, null);
			}

			interfacesSet = module.getInterfaces();
			if(interfacesSet.isEmpty())
			{
				TLogger.error("Pls configure the interfaces for the module :: " + moduleId);
				throw new IntegrationManagement.PublishInterfaceDataException("Pls configure the interfaces for the module :: " + moduleId, null);
			}

			for (Interfaces interfaces : interfacesSet) 
			{
				if(IntegrationConstants.SEND_TRANS_TYPE.equals(interfaces.getTransactionType()))
				{
					//					TLogger.debug("interfaces: "+interfaces);
					processConvertRequest(interfaces, refId, requestData, clientId);
				}
			}
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PublishInterfaceDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PublishInterfaceDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PublishInterfaceDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;
			query = null;
			row = null;
			interfacesSet = null;
			resultList = null;
			moduleId = null;
			/*
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit publishInterfaceData service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaces, refId and requestData parameters from the request.
	 *     2. Verify the interface converter value, if the converter value is not empty of the interface.
	 *     3. If the value is not empty then create the context object and get the converter object from the interfaces using lookup.
	 *     4. If the converter object is empty then throw an exception.
	 *     5. Invoke the processRequest service with the intefaceId and requestData and get the requestData.
	 *     6. Create the summary object and set the values and invoke the createInterfaceSummary service.
	 *     7. Update the requestData with the transaction Id as reference number.
	 *     8. If the interfaceType is synchronous then invoke the publisher with the requestData.
	 *     9. On failure create an InterfaceFailureSummary with the errorCode and errorMessage.
	 *     10. On success update InterfaceSummary with the responseData.
	 * </pre>
	 * @param interfaces
	 * @param refId
	 * @param requestData
	 * @return void
	 * @throws Exception 
	 */
	private void processConvertRequest(Interfaces interfaces, String refId, String requestData, Long clientId) throws Exception
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processConvertRequest.. Started at --> "+ new Date());
		}*/
		InterfaceSummary interfaceSummary = null;
		InterfaceSummary newInterfaceSummary = null;
		InterfaceSummary summary = null;

		DataConverter dataConverter = null;
		DataPublisher dataPublisher = null;
		ResponseBean responseBean = null;
		Context context = null;

		String convertedRequestData = null;
		JSONObject jsonObject = null;
		JSONParser jsonParser = null;
		Long errorCode = null;
		String errorMessage = null;
		String fileId = null;
		Boolean success = true;
		try
		{

			/*	if(TLogger.debugIsEnabled())
			{
				TLogger.debug(" processConvertRequest..service received interfaces Id: "+interfaces.getInterfaceId()+" refId::"+refId);
				//				TLogger.debug("requestData-->"+requestData);
			}*/
			convertedRequestData = requestData;
			context = new InitialContext();					

			if(interfaces.getConverter() != null && !"".equals(interfaces.getConverter().trim()))
			{
				dataConverter = (DataConverter) context.lookup(interfaces.getConverter());

				if(dataConverter == null)
				{
					TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
					throw new IntegrationManagement.PublishInterfaceDataException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
				}
				convertedRequestData = dataConverter.processRequest(interfaces.getInterfaceId(), requestData,null);
			}
			interfaceSummary = new InterfaceSummary();
			//TLogger.debug("convertedRequestData--->"+convertedRequestData);
			if(IntegrationConstants.JSON_CONVERTER_INTERFACE_LIST.contains(Long.toString(interfaces.getInterfaceId().longValue())))
			{
				jsonParser = new JSONParser();
				jsonObject = (JSONObject) jsonParser.parse(convertedRequestData);
				if(jsonObject.containsKey("STATUS"))
				{
					if("FAIL".equalsIgnoreCase((String)jsonObject.get("STATUS")))
					{
						errorCode = (Long) jsonObject.get("ErrorCode");
						errorMessage = (String) jsonObject.get("ErrorMessage");
						success = false;
					}
					else
					{
						jsonObject.remove("STATUS");
						convertedRequestData = jsonObject.toJSONString();
					}
				}
				fileId = refId;
				refId = getTransactionId(interfaces.getInterfaceId(), requestData).toString();
				interfaceSummary.setReferenceData3(Long.parseLong(fileId));
				interfaceSummary.setReferenceData2(clientId);
				if(success && (IntegrationConstants.INVENTORY_WRITE_INTERFACE_LIST.contains(Long.toString(interfaces.getInterfaceId().longValue())) || IntegrationConstants.STOCK_BALANCE_INTERFACE_LIST.contains(Long.toString(interfaces.getInterfaceId().longValue()))))
				{
					interfaceSummary.setReferenceData5(String.valueOf(getJsonValue(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.SNOC_ORDER_TYPE_PATH_ATTR), convertedRequestData)));
				}
			}
			interfaceSummary.setReferenceData1(refId);
			interfaceSummary.setInterfaces(interfaces);
			interfaceSummary.setOriginalRequestData(requestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestTime(new Date());
			interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.IN_QUEUE_STATUS));

			if(convertedRequestData.endsWith("Error"))
			{
				List<String> convertedDataList = Arrays.asList(convertedRequestData.split(","));
				for(String msg : convertedDataList)
				{
					if(msg.contains("ErrorCode"))
					{
						errorCode = Long.parseLong(msg.split(":")[1]);
					}else if(msg.contains("ErrorMessage"))
					{
						errorMessage = msg.split(":")[1];
					}
				}
				success = false;
			}
			interfaceSummary.setRetryCount(0L);
			if(convertedRequestData.contains(IntegrationConstants.INTERFACE_FILE_SUMMARY_ID_IN_CONVERTER_TEMPLATE))
			{
				convertedRequestData = convertedRequestData.replace(IntegrationConstants.INTERFACE_FILE_SUMMARY_ID_IN_CONVERTER_TEMPLATE, fileId);
				interfaceSummary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			}
			newInterfaceSummary = integrationManagementLocal.createInterfaceSummary(interfaceSummary);
			summary = entityManager.find(InterfaceSummary.class, newInterfaceSummary.getTransactionId());
			if(!success)
			{
				responseBean = new ResponseBean();
				responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
				responseBean.setTransactionId(summary.getTransactionId());
				responseBean.setErrorCode(errorCode);
				responseBean.setErrorMessage(errorMessage);
				integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
				return;
			}


			if(convertedRequestData.contains(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE))
			{
				convertedRequestData = convertedRequestData.replace(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE, summary.getTransactionId().toString());
				summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			}
			//			entityManager.flush();
			summary = integrationManagementLocal.updateInterfaceSummary(summary);
			//			TLogger.debug("convertedRequestData-->"+convertedRequestData);
			if(IntegrationConstants.SYNC_INTERFACE_TYPE.equals(interfaces.getInterfaceType()) && !IntegrationConstants.INVENTORY_WRITE_INTERFACE_LIST.contains(Long.toString(interfaces.getInterfaceId().longValue())))
			{

				if(summary.getStatus().getStatusId().equals(IntegrationConstants.IN_QUEUE_STATUS))
				{
					dataPublisher = (DataPublisher) context.lookup(interfaces.getPublisher());
					responseBean = dataPublisher.processRequest(summary.getTransactionId(), convertedRequestData, null,null);
					if("Error".equalsIgnoreCase(responseBean.getStatus()))
					{
						TLogger.debug("Service call error :txnId:"+summary.getTransactionId());
						if(responseBean.getStatusId() == null)
							responseBean.setStatusId(IntegrationConstants.ERROR_STATUS);
						responseBean.setTransactionId(summary.getTransactionId());
						responseBean.setRetryCount(summary.getRetryCount() + 1L); 
						//							lookupMapping = new LookupMapping();
						//							errorCode = Long.valueOf(lookupMapping.getLookupEntity(IntegrationConstants.ERROR_CODE_ENTITY_TYPE, responseBean.getErrorCode(), IntegrationConstants.INTERFACE_APPLICATION_ID));
						//							responseBean.setErrorCode(errorCode);
						//							PropertiesLoader.get
						//							responseBean.setErrorMessage("Retailer requisition was already happened for the same 'order reference number' " + summary.getReferenceData1());
						integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
						//	entityManager.flush();
					}
					else
					{
						if(IntegrationConstants.COMPLETED_STATUS_INTERFACE_IDS.contains(String.valueOf(interfaceSummary.getInterfaces().getInterfaceId().longValue())))
						{
							integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getResponseData(), summary.getTransactionId(), interfaces.getInterfaceId(), IntegrationConstants.COMPLETED_STATUS, null);
						}
						else
						{
							integrationManagementLocal.updateInterfaceSummaryByResponse(responseBean.getResponseData(), summary.getTransactionId(), interfaces.getInterfaceId(), IntegrationConstants.RES_AVAILABLE_STATUS, null);
						}

					}
				}
			}
		}
		catch (ApplicationException applicationException) 
		{
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception " + exception.getMessage(), exception);
			throw new IntegrationManagement.PublishInterfaceDataException("Unhandled Exception " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			newInterfaceSummary = null;
			summary = null;
			dataConverter = null;
			dataPublisher = null;
			responseBean = null;
			context = null;
			convertedRequestData = null;
			jsonObject = null;
			jsonParser = null;
			errorCode = null;
			errorMessage = null;
			fileId = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processConvertRequest service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given remote server configuration parameters.
	 * 		2. Create an sftp connection using the given configuration.
	 * 		3. Transfer the specified file from the localDir to remoteDir.
	 * </pre>
	 * @param host
	 * @param port
	 * @param user
	 * @param password
	 * @param remoteDir
	 * @param fileName
	 * @throws Exception
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public ResponseBean sendFile(Long fileId, String fileType) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		ResponseBean responseBean = null;
		ArrayList<String> remoteExceptionInfo = null;
		String errorMessage = null;
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry sendFile.. Started at --> "+ new Date());
		}

		Session session = null;
		Channel channel = null;
		ChannelSftp channelSftp = null;
		JSch jsch = null;
		File srcFile = null;
		File ctlSrcFile = null;
		File backupFile = null;
		FileInputStream inputStream = null;
		FileInputStream ctlInputStream = null;
		InterfaceFileSummary interfaceFileSummary = null;

		//		Long endTime = null;
		JSONParser jsonParser = null;
		JSONObject sendServerjsonObject = null;
		JSONObject localServerjsonObject = null;
		Map<String,Object> jsonMap = null;
		List<Map<String, Object>> jsonMapList = null;
		File file = null;
		Boolean fileValidationFlag = null;
		Object object = null;
		JSONArray arr = null;
		String[] temp = null;
		String tableName = null;
		String srcBkpDir = null;
		String ctlBkpDir = null;
		SimpleDateFormat dateFormat = null;
		Map<String,Object> inputMap = null;
		JSONObject fileNameJson = null;
		JSONObject ctlFileJson = null;
		boolean exceptionFlag = false;
		try 
		{
			TLogger.debug("sendFile service received fileId id and fileType-->"+fileId+","+fileType);
			responseBean = new ResponseBean();
			responseBean.setFlag(true);
			remoteExceptionInfo = new ArrayList<String>();
			if(fileId == null)
			{
				TLogger.error("file id is null");
				throw new IntegrationManagement.sendFileException("file id is null", null);
			}

			interfaceFileSummary = entityManager.find(InterfaceFileSummary.class, fileId);
			jsonParser = new JSONParser();
			jsonMapList = new ArrayList<Map<String,Object>>();

			localServerjsonObject = (JSONObject) jsonParser.parse(interfaceFileSummary.getLocalServerDetails());
			if("R".equalsIgnoreCase(fileType))
			{
				object = jsonParser.parse(interfaceFileSummary.getReceivedServerDetails());
				if(object instanceof JSONObject)
				{
					sendServerjsonObject = (JSONObject) object;
					jsonMap = new HashMap<String, Object>();
					jsonMap.put("User",sendServerjsonObject.get("User"));
					jsonMap.put("Host",sendServerjsonObject.get("Host"));
					jsonMap.put("Port",sendServerjsonObject.get("Port"));
					jsonMap.put("Pass",sendServerjsonObject.get("Pass"));
					jsonMap.put("PassPath",sendServerjsonObject.get("PassPath"));
					jsonMap.put("DestDir",sendServerjsonObject.get("RejectedDir"));
					jsonMap.put("DestCtlDir",String.valueOf(sendServerjsonObject.get("RejectedCtlDir")));
					jsonMap.put("BkpDir", localServerjsonObject.get("RejectedBkpDir"));
					jsonMap.put("CtlBkpDir",localServerjsonObject.get("RejectedCtlBkpDir"));
					jsonMap.put("Dir",localServerjsonObject.get("RejectedDir"));
					jsonMap.put("CtlDir",localServerjsonObject.get("RejectedCtlDir"));
					if(sendServerjsonObject.get("SendCtlFileFlag") != null)
						jsonMap.put("SendCtlFileFlag", sendServerjsonObject.get("SendCtlFileFlag"));

					jsonMapList.add(jsonMap);
				}
				else if(object instanceof JSONArray)
				{
					arr = (JSONArray) object;
					for(int i = 0; i < arr.size(); i ++)
					{
						jsonMap = new HashMap<String, Object>();
						sendServerjsonObject = (JSONObject) arr.get(i);
						jsonMap.put("User",sendServerjsonObject.get("User"));
						jsonMap.put("Host",sendServerjsonObject.get("Host"));
						jsonMap.put("Port",sendServerjsonObject.get("Port"));
						jsonMap.put("Pass",sendServerjsonObject.get("Pass"));
						jsonMap.put("PassPath",sendServerjsonObject.get("PassPath"));
						jsonMap.put("DestDir",sendServerjsonObject.get("RejectedDir"));
						jsonMap.put("DestCtlDir",String.valueOf(sendServerjsonObject.get("RejectedCtlDir")));
						jsonMap.put("BkpDir", localServerjsonObject.get("RejectedBkpDir"));
						jsonMap.put("CtlBkpDir",localServerjsonObject.get("RejectedCtlBkpDir"));
						jsonMap.put("Dir",localServerjsonObject.get("RejectedDir"));
						jsonMap.put("CtlDir",localServerjsonObject.get("RejectedCtlDir"));
						if(sendServerjsonObject.get("SendCtlFileFlag") != null)
							jsonMap.put("SendCtlFileFlag", sendServerjsonObject.get("SendCtlFileFlag"));

						jsonMapList.add(jsonMap);
					}
				}
			}
			else
			{
				object = jsonParser.parse(interfaceFileSummary.getSendServerDetails());
				if(object instanceof JSONObject)
				{
					sendServerjsonObject = (JSONObject) object;
					jsonMap = new HashMap<String, Object>();
					jsonMap.put("User",sendServerjsonObject.get("User"));
					jsonMap.put("Host",sendServerjsonObject.get("Host"));
					jsonMap.put("Port",sendServerjsonObject.get("Port"));
					jsonMap.put("Pass",sendServerjsonObject.get("Pass"));
					jsonMap.put("PassPath",sendServerjsonObject.get("PassPath"));
					jsonMap.put("DestDir",sendServerjsonObject.get("DestDir"));
					jsonMap.put("DestCtlDir",String.valueOf(sendServerjsonObject.get("DestCtlDir")));
					jsonMap.put("BkpDir", localServerjsonObject.get("BkpDir"));
					jsonMap.put("CtlBkpDir", localServerjsonObject.get("CtlBkpDir"));
					jsonMap.put("Dir",localServerjsonObject.get("Dir"));
					jsonMap.put("CtlDir",localServerjsonObject.get("CtlDir"));
					if(sendServerjsonObject.get("SendCtlFileFlag") != null)
						jsonMap.put("SendCtlFileFlag", sendServerjsonObject.get("SendCtlFileFlag"));

					jsonMapList.add(jsonMap);
				}
				else if(object instanceof JSONArray)
				{
					arr = (JSONArray) object;
					for(int i = 0; i < arr.size(); i ++)
					{
						jsonMap = new HashMap<String, Object>();
						sendServerjsonObject = (JSONObject) arr.get(i);
						jsonMap.put("User",sendServerjsonObject.get("User"));
						jsonMap.put("Host",sendServerjsonObject.get("Host"));
						jsonMap.put("Port",sendServerjsonObject.get("Port"));
						jsonMap.put("Pass",sendServerjsonObject.get("Pass"));
						jsonMap.put("PassPath",sendServerjsonObject.get("PassPath"));
						jsonMap.put("DestDir",sendServerjsonObject.get("DestDir"));
						jsonMap.put("DestCtlDir",String.valueOf(sendServerjsonObject.get("DestCtlDir")));
						jsonMap.put("BkpDir", localServerjsonObject.get("BkpDir"));
						jsonMap.put("CtlBkpDir", localServerjsonObject.get("CtlBkpDir"));
						jsonMap.put("Dir",localServerjsonObject.get("Dir"));
						jsonMap.put("CtlDir",localServerjsonObject.get("CtlDir"));
						if(sendServerjsonObject.get("SendCtlFileFlag") != null)
							jsonMap.put("SendCtlFileFlag", sendServerjsonObject.get("SendCtlFileFlag"));

						jsonMapList.add(jsonMap);
					}
				}
			}

			for(InterfaceFileSummaryDetails interfaceFileSummaryDetails : interfaceFileSummary.getFileSummaryDetails())
			{
				if(interfaceFileSummaryDetails.getFileType().equals(fileType) && interfaceFileSummaryDetails.getFileDetailsId() != null)
				{
					for(Map<String, Object> jSonMap : jsonMapList)
					{
						try
						{
							if(interfaceFileSummaryDetails.getControlFileName() == null || interfaceFileSummaryDetails.getControlFileName().trim().isEmpty())
								continue;

							TLogger.debug("Json : " + jSonMap);
							if(IntegrationConstants.INTERFACE_FILE_VALIDATION_LIST.contains(interfaceFileSummary.getInterfaces().getInterfaceId().toString()))
							{
								temp = interfaceFileSummaryDetails.getFileName().split("_");
								tableName = "";
								for(int i=0; i<temp.length-2; i++)
								{
									tableName = tableName + temp[i] + "_";
								}
								tableName = tableName.substring(0, tableName.length()-1);
								TLogger.debug("Table name : "+tableName);
								fileValidationFlag = validateFileContent((String)jSonMap.get("Dir"), interfaceFileSummaryDetails.getFileName(), tableName);
								if(!fileValidationFlag)
								{
									responseBean.setFlag(false);
									return responseBean;
								}
							}
							jsch = new JSch();
							//TLogger.debug("preparing the host information for sftp..");
							if((String)jSonMap.get("PassPath") != null && !"".equals(jSonMap.get("PassPath")))
								jsch.addIdentity((String)jSonMap.get("PassPath"));
							session = jsch.getSession((String)jSonMap.get("User"), (String)jSonMap.get("Host"), ((Long)jSonMap.get("Port")).intValue());
							if((String)jSonMap.get("Pass") != null)
								session.setPassword((String)jSonMap.get("Pass"));
							session.setConfig("StrictHostKeyChecking", "no");

							//TLogger.debug("Before connect..");
							try
							{
								session.connect();
							}
							catch(Exception e)
							{
								TLogger.info("FILE ID :: "+fileId+" -> Connection Refused to Remote Host :: "+(String)jSonMap.get("Host"));
								dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
								inputMap = new HashMap<String, Object>();
								inputMap.put("clientId",getInterfaceAttributeValue(interfaceFileSummary.getInterfaces().getInterfaceId(), IntegrationConstants.REMOTE_CLIENT_ID_ATTR));
								inputMap.put("remoteHost",jSonMap.get("Host"));
								inputMap.put("currentDate",dateFormat.format(new Date()));
								inputMap.put("errorMessage", e.getMessage());
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaceFileSummary.getInterfaces().getInterfaceId(),IntegrationConstants.CONNECTION_REFUSED_SCENARIO+"_"+getInterfaceAttributeValue(interfaceFileSummary.getInterfaces().getInterfaceId(), IntegrationConstants.REMOTE_CLIENT_ID_ATTR),inputMap);
								throw e;
							}

							//TLogger.debug("Host connected..");
							channel = session.openChannel("sftp");
							channel.connect();
							//TLogger.debug("sftp channel opened and connected..");

							//Sending FILE
							channelSftp = (ChannelSftp) channel;
							channelSftp.cd((String)jSonMap.get("DestDir"));

							if(interfaceFileSummaryDetails.getFileName().startsWith("{") && interfaceFileSummaryDetails.getFileName().contains(IS_JSON_OBJECT))
							{
								//Src File
								fileNameJson = (JSONObject) new JSONParser().parse(interfaceFileSummaryDetails.getFileName());
								//srcFile = new File(fileNameJson.get(FILE_NAME)+".csv.tar."+IntegrationConstants.ZIP_FILE_FORMAT);
								srcFile = new File(fileNameJson.get(FILE_NAME)+"."+fileNameJson.get(FORMAT)+".tar."+IntegrationConstants.ZIP_FILE_FORMAT);
								compressGzipFile(fileNameJson, srcFile.getAbsolutePath());
								inputStream = new FileInputStream(srcFile);
								channelSftp.put(inputStream, srcFile.getName());
								inputStream.close();
								srcBkpDir = jSonMap.get("BkpDir") != null ? (String) jSonMap.get("BkpDir") : null;
								TLogger.info("INT: "+interfaceFileSummary.getInterfaces().getModule().getModuleId()+" -> File: "+srcFile.getName()+" with "+srcFile.length()+" bits of data transfered successfully to host "+(String)jSonMap.get("Host"));

								if(jSonMap.get("SendCtlFileFlag") == null || ((String)jSonMap.get("SendCtlFileFlag")).equalsIgnoreCase("true") )
								{
									//Ctrl File
									ctlFileJson = (JSONObject) new JSONParser().parse(interfaceFileSummaryDetails.getControlFileName());
									//ctlSrcFile = new File(ctlFileJson.get(FILE_NAME)+".ctl.tar."+IntegrationConstants.ZIP_FILE_FORMAT);
									ctlSrcFile = new File(ctlFileJson.get(FILE_NAME)+"."+ctlFileJson.get(FORMAT)+".tar."+IntegrationConstants.ZIP_FILE_FORMAT);
									compressGzipFile(ctlFileJson, ctlSrcFile.getAbsolutePath());
									inputStream = new FileInputStream(ctlSrcFile);
									channelSftp.put(inputStream, ctlSrcFile.getName());
									inputStream.close();
									ctlBkpDir = jSonMap.get("CtlBkpDir") != null ? (String) jSonMap.get("CtlBkpDir") : null;
									TLogger.info("INT: "+interfaceFileSummary.getInterfaces().getModule().getModuleId()+" -> File: "+ctlSrcFile.getName()+" with "+ctlSrcFile.length()+" bits of data transfered successfully to host "+(String)jSonMap.get("Host"));
								}
							}
							else
							{
								srcFile = new File(jSonMap.get("Dir")+interfaceFileSummaryDetails.getFileName());
								if(srcFile != null)
								{
									if (skipCompression(interfaceFileSummary.getInterfaces().getInterfaceId().toString()))
									{
										inputStream = new FileInputStream(srcFile);
										channelSftp.put(inputStream, srcFile.getName());
										inputStream.close();
									}
									else
									{
										compressGzipFile(srcFile.getAbsolutePath(), srcFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										inputStream = new FileInputStream(srcFile+"."+IntegrationConstants.ZIP_FILE_FORMAT);

										channelSftp.put(inputStream, srcFile.getName()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										inputStream.close();
									}

									srcBkpDir = jSonMap.get("BkpDir") != null ? (String) jSonMap.get("BkpDir") : null;
									//						endTime = System.currentTimeMillis();
									TLogger.info("INT: "+interfaceFileSummary.getInterfaces().getModule().getModuleId()+" -> File: "+srcFile.getName()+" with "+srcFile.length()+" bits of data transfered successfully to host "+(String)jSonMap.get("Host"));
								}

								if(jSonMap.get("SendCtlFileFlag") == null || ((String)jSonMap.get("SendCtlFileFlag")).equalsIgnoreCase("true") )
								{
									//Sending CTRL FILE.
									startTime = null;
									startTime = System.currentTimeMillis();
									if(jSonMap.get("DestCtlDir") != null && !"".equals(jSonMap.get("DestCtlDir")) && !"null".equalsIgnoreCase((String) jSonMap.get("DestCtlDir")))
									{
										channelSftp.cd((String)jSonMap.get("DestCtlDir"));
										//TLogger.debug("Crtl File Name :::::"+interfaceFileSummaryDetails.getControlFileName());
										ctlSrcFile = new File(jSonMap.get("CtlDir")+interfaceFileSummaryDetails.getControlFileName());        

										if (ctlSrcFile != null) 
										{
											if(jSonMap.get("DestCtlDir") != null)
											{
												if (skipCompression(interfaceFileSummary.getInterfaces().getInterfaceId().toString()))
												{
													ctlInputStream = new FileInputStream(ctlSrcFile);
													channelSftp.put(ctlInputStream, ctlSrcFile.getName());
													ctlInputStream.close();
												}
												else
												{
													compressGzipFile(ctlSrcFile.getAbsolutePath(), ctlSrcFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
													ctlInputStream = new FileInputStream(ctlSrcFile+"."+IntegrationConstants.ZIP_FILE_FORMAT);
													channelSftp.put(ctlInputStream, ctlSrcFile.getName()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
													ctlInputStream.close();
												}
											}

											ctlBkpDir = jSonMap.get("CtlBkpDir") != null ? (String) jSonMap.get("CtlBkpDir") : null;
											//                                                endTime = System.currentTimeMillis();
											TLogger.info("INT: "+interfaceFileSummary.getInterfaces().getModule().getModuleId()+" -> File: "+ctlSrcFile.getName()+" with "+ctlSrcFile.length()+" bits of data transfered successfully to host "+(String)jSonMap.get("Host"));
										}
									}
								}
							}

							channelSftp.exit();
							channel.disconnect();
							session.disconnect();
						}
						catch(Exception exception)
						{
							TLogger.error(exception.getMessage(), exception);
							exceptionFlag = true;
							remoteExceptionInfo.add((String)jSonMap.get("User") + " :: " + (String)jSonMap.get("Host") + "::" +exception.getMessage() );
						}
						finally
						{
							try
							{
								if(channelSftp != null) channelSftp.exit();
								if(channel != null) channel.disconnect();
								if(session != null) session.disconnect();
							}
							catch(Exception exception)
							{
								TLogger.error(exception.getMessage(), exception);
							}
						}
					}

					if(!exceptionFlag)
					{
						if(fileNameJson != null)
						{
							if(srcFile != null)
							{
								if(srcBkpDir != null)
								{
									boolean flag = false;
									List<File> srcFileList = new ArrayList<File>();
									for(int fileSeq = 1; fileSeq <= ((Long)fileNameJson.get(COUNT)).intValue(); fileSeq ++)
									{
										srcFile = new File(fileNameJson.get(FILE_NAME) + "_" + decimalFormat.format(fileSeq) + "." + fileNameJson.get(FORMAT));
										backupFile = new File(srcBkpDir + File.separator + srcFile.getName());
										if(backupFile(srcFile, backupFile))
										{
											compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
											backupFile.delete();
											TLogger.debug("File backup has been done to " + backupFile.getAbsolutePath());
											if(inputStream != null)
												inputStream.close();
											//srcFile.delete();
											srcFileList.add(srcFile);
										}
										else
										{
											flag = true;
											TLogger.debug("File backup has not done..");
										}
									}
									if(!flag)
									{
										for (File  sourceFile : srcFileList)
										{
											sourceFile.delete();
										}
										file = new File(fileNameJson.get(FILE_NAME) + "." + fileNameJson.get(FORMAT)+".tar."+IntegrationConstants.ZIP_FILE_FORMAT);
										file.delete();
									}
									srcFileList = null;
								}
							}
							if(ctlSrcFile != null)
							{
								if(ctlBkpDir != null)
								{
									boolean flag = false;
									List<File> ctlFileList = new ArrayList<File>();
									for(int fileSeq = 1; fileSeq <= ((Long)ctlFileJson.get(COUNT)).intValue(); fileSeq ++)
									{
										ctlSrcFile = new File(ctlFileJson.get(FILE_NAME) + "_" + decimalFormat.format(fileSeq) + "." + ctlFileJson.get(FORMAT));
										backupFile = new File(ctlBkpDir + File.separator + ctlSrcFile.getName());
										if(backupFile(ctlSrcFile, backupFile))
										{
											compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
											backupFile.delete();
											TLogger.debug("File backup has been done to " + backupFile.getAbsolutePath());
											if(ctlInputStream != null)
												ctlInputStream.close();
											//ctlSrcFile.delete();
											ctlFileList.add(ctlSrcFile);
										}
										else
										{
											flag = true;
											TLogger.debug("File backup has not done..");
										}
									}
									if(!flag)
									{
										for (File controlFile : ctlFileList) 
										{
											controlFile.delete();
										}
										file = new File(ctlFileJson.get(FILE_NAME) + "." + ctlFileJson.get(FORMAT)+".tar."+IntegrationConstants.ZIP_FILE_FORMAT);
										file.delete();
									}
									ctlFileList = null;
								}
							}
						}
						else
						{
							if(srcFile != null)
							{
								if(srcBkpDir != null)
								{
									backupFile = new File(srcBkpDir + File.separator + srcFile.getName());
									if(backupFile(srcFile, backupFile))
									{
										compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										backupFile.delete();
										TLogger.debug("File backup has been done to " + backupFile.getAbsolutePath());
										if(inputStream != null)
											inputStream.close();
										if (skipCompression(interfaceFileSummary.getInterfaces().getInterfaceId().toString()))
										{
											file = new File(srcFile.getAbsolutePath());
										}
										else
										{
											file = new File(srcFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										}
										file.delete();
										srcFile.delete();
									}
									else
									{
										TLogger.debug("File backup has not done..");
									}
								}
							}
							if (ctlSrcFile != null) 
							{
								if(ctlBkpDir != null)
								{
									backupFile = new File(ctlBkpDir + File.separator + ctlSrcFile.getName());

									if (backupFile(ctlSrcFile, backupFile)) 
									{
										compressGzipFile(backupFile.getAbsolutePath(), backupFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										backupFile.delete();
										// TLogger.debug("Ctrl File backup has been done to " + backupFile.getAbsolutePath());
										if(ctlInputStream != null) 
											ctlInputStream.close();
										if (skipCompression(interfaceFileSummary.getInterfaces().getInterfaceId().toString()))
										{
											file = new File(ctlSrcFile.getAbsolutePath());
										}
										else
										{
											file = new File(ctlSrcFile.getAbsolutePath()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
										}
										file.delete();
										ctlSrcFile.delete();
									}
									else 
									{
										TLogger.debug("Ctrl file backup has not done..");
									}
								}
							}
						}
					}
				}
			}

			if(exceptionFlag)
			{
				responseBean.setFlag(false);
				errorMessage = remoteExceptionInfo.toString();
				if(errorMessage != null && !errorMessage.isEmpty())
				{
					errorMessage = errorMessage.replace("[", "").replace("]", "");
					responseBean.setErrorMessage(errorMessage.length() > 1000 ? errorMessage.substring(0, 1000) : errorMessage);
				}
			}
		} 
		catch (FileNotFoundException fileNotFoundException) 
		{
			TLogger.error(fileNotFoundException.getMessage(), fileNotFoundException);
			throw new IntegrationManagement.sendFileException(fileNotFoundException.getMessage(), fileNotFoundException);
		} 
		/*catch (SftpException sftpException) 
		{
			TLogger.error(sftpException.getMessage(), sftpException);
			throw new IntegrationManagement.sendFileException(sftpException.getMessage(), sftpException);
		} 
		catch (JSchException jSchException) 
		{
			TLogger.error(jSchException.getMessage(), jSchException);
			throw new IntegrationManagement.sendFileException(jSchException.getMessage(), jSchException);
		}*/ 
		catch (ParseException parseException) 
		{
			TLogger.error(parseException.getMessage(), parseException);
			throw new IntegrationManagement.sendFileException(parseException.getMessage(), parseException);
		} 
		catch (IOException ioException) 
		{
			TLogger.error(ioException.getMessage(), ioException);
			throw new IntegrationManagement.sendFileException(ioException.getMessage(), ioException);
		}
		catch (Exception e) 
		{
			TLogger.error(e.getMessage(), e);
			throw new IntegrationManagement.sendFileException(e.getMessage(), e);
		}
		finally
		{
			jsch = null;
			srcFile = null;
			ctlSrcFile = null;
			backupFile = null;
			interfaceFileSummary = null;
			jsonParser = null;
			sendServerjsonObject = null;
			localServerjsonObject = null;
			object = null;
			arr = null;
			jsonMap = null;
			jsonMapList = null;
			srcBkpDir = null;
			ctlBkpDir = null;

			try
			{
				if(inputStream != null)
					inputStream.close();
				if(ctlInputStream != null)
					ctlInputStream.close();
				if(channelSftp != null)
				{
					channelSftp.exit();
					TLogger.debug("sftp Channel exited..");
				}

				if(channel != null)
				{
					channel.disconnect();
					TLogger.debug("Channel disconnected..");
				}

				if(session != null)
				{
					session.disconnect();
					TLogger.debug("Host Session disconnected..");
				}
			}
			catch(Exception e)
			{
				//				e.printStackTrace();
				TLogger.error("Unhandled Exception -->", e);
			}
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit sendFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

			inputStream = null;
			channelSftp = null;
			channel = null;
			session = null;
			ctlInputStream = null;
			startTime = null;
			errorMessage = null;
			remoteExceptionInfo = null;
		}
		return responseBean;
	}
	private Boolean validateFileContent(String filePath,String fileName,String tableName)
	{
		TLogger.debug("Entry validateFileContent ");
		Connection conn = null;
		Statement stmt = null;
		try
		{
			Class.forName(IntegrationConstants.INTERFACE_JDBC_DRIVER);
			conn = DriverManager.getConnection(IntegrationConstants.INTERFACE_JDBC_URL, IntegrationConstants.INTERFACE_JDBC_USER, IntegrationConstants.INTERFACE_JDBC_PASS);
			CopyManager copyManager = new CopyManager((BaseConnection) conn);
			stmt = conn.createStatement();
			FileReader fileReader = new FileReader(filePath+fileName);
			copyManager.copyIn("COPY "+IntegrationConstants.INTERFACE_SCHEMA_NAME+"."+tableName+" FROM STDIN  DELIMITER '|' CSV header", fileReader );
			return true;
		}
		catch(PSQLException e)
		{
			TLogger.error("Error occured in validateFileContent ",e);
			return false;
		}
		catch(Exception e)
		{
			TLogger.error("Error occured in validateFileContent ",e);
			return false;
		}
		finally
		{
			try {
				stmt.execute("delete from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+"."+tableName);
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			TLogger.debug("Exit validateFileContent ");
		}

	}
	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given input parameters.
	 * 		2. Create the dateFormat using the fileNameFormat provided and prepare fileName.
	 * 		3. Read the given local directory and iterate the files.
	 * 		4. If the file is not directory and is matches with the required fileName with required fileFormat.
	 * 		5. Take the file and come out of the loop.
	 * 		6. Return the file.
	 * </pre>
	 * @param localDir
	 * @param fileName
	 * @param fileNameFormat
	 * @param fileFormat
	 * @return File
	 * @throws Exception
	 */
	/*private File getFile(String localDir, String fileName, String fileNameFormat, String fileFormat) throws Exception
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getFile..");
			TLogger.debug(localDir);
			TLogger.debug(fileName);
			TLogger.debug(fileNameFormat);
			TLogger.debug(fileFormat);
		}

		SimpleDateFormat dateFormat = null;
		File fileDir = null;
		File requiredFile = null;
		String requiredFileName = null;

		try
		{
			requiredFileName = fileName.substring(fileName.lastIndexOf("/")+1);
			if(fileNameFormat != null && "".equalsIgnoreCase(fileNameFormat))
			{
				dateFormat = new SimpleDateFormat(fileNameFormat);
				requiredFileName = fileName + "_" + dateFormat.format(new Date());
			}
			if(fileFormat != null)
				requiredFileName = requiredFileName+"."+fileFormat;
			if(localDir == null)
				localDir = fileName.substring(0, fileName.lastIndexOf("/"));
			fileDir = new File(localDir);
			for (File file : fileDir.listFiles()) 
			{
				//	TLogger.debug("FileName :: " + file.getName() + " :: reqFile :: " + requiredFileName+"."+fileFormat );
				if(!file.isDirectory() && file.getName().equalsIgnoreCase(requiredFileName))
				{
					TLogger.debug("Required file to transfer :: " + file.getName());
					requiredFile = file;
					break;
				}
			}

			return requiredFile;
		}
		catch(Exception exception)
		{
			TLogger.error(exception.getMessage(), exception);
			throw new Exception(exception.getMessage(), exception);
		}
		finally
		{
			dateFormat = null;
			fileDir = null;
			requiredFile = null;
			requiredFileName = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getFile..");
			}
		}
	}*/

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre> 
	 * 		1. Read the given input parameters srcFile and destFile.
	 * 		2. Create inputStream with srcFile and outputStream with destFile
	 * 		3. Read the data from the inputStream and write it through the outputStream.
	 * 		4. Close inputStream and outputSteam after file copy.
	 * 		5. On successful file copy return true, otherwise return false.
	 * </pre>
	 * @param source
	 * @param destination
	 * @param fileName
	 * @return boolean
	 */
	private boolean backupFile(File srcFile, File destFile)
	{	
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry backupFile.. Started at --> "+ new Date());
		}

		InputStream inputStream = null;
		OutputStream outputStream = null;
		byte[] buffer = null;
		int length = 0;

		try
		{
			TLogger.debug("backupFile service received srcFile and destFile-->"+srcFile+","+destFile);
			inputStream = new FileInputStream(srcFile);
			outputStream = new FileOutputStream(destFile); 

			buffer = new byte[1024];

			while ((length = inputStream.read(buffer)) > 0)
			{
				outputStream.write(buffer, 0, length);
			}

			if (inputStream != null)
			{
				inputStream.close();
			}

			if (outputStream != null)
			{
				outputStream.close();
			}

			return true;
		}
		catch(IOException ioException)
		{
			TLogger.error("Unhandled exception :: " + ioException.getMessage(), ioException);
			return false;
		}
		finally
		{
			try
			{
				if (inputStream != null)
				{
					inputStream.close();
				}
				if (outputStream != null)
				{
					outputStream.close();
				}
			}
			catch(Exception exception)
			{
				TLogger.error("Unhandled Exception -->", exception);
			}

			inputStream = null;
			outputStream = null;
			buffer = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit backupFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param bean
	 * @param interfaces
	 * @return String
	 * @throws Exception
	 */
	/*private String receiveLocalFile(FilePropertiesBean bean,Interfaces interfaces) throws Exception
	{
		File remoteFolder = null;
		Map<String, Object> multipleMap = null;
		List<String> fileList = null;
		String controlFileName = null;

		try
		{
			remoteFolder = new File(bean.getRemoteControlDir());
			if(remoteFolder.isDirectory())
			{
				multipleMap = new HashMap<String, Object>();
				for(FileBean fileBeans : bean.getFiles())
				{
					fileList = new ArrayList<String>();
					for(File remoteControlFile : remoteFolder.listFiles())
					{
						if(remoteControlFile.getName().startsWith(fileBeans.getFileName()) && remoteControlFile.getName().endsWith("." + bean.getControlFileFormat() + "." + IntegrationConstants.ZIP_FILE_FORMAT))
							fileList.add(remoteControlFile.getName());
					}
					multipleMap.put(fileBeans.getFileName(), fileList);
				}
			}

			return null;
		}
		catch(Exception exception)
		{
			throw exception;
		}
	}*/

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given remote server configuration parameters.
	 * 		2. Create an sftp connection using the given configuration.
	 * 		3. Get the specified file from the remoteDir to localDir.
	 * 		4. Rename the remoteDir file with the current time-stamp.
	 * </pre>
	 * @param fileBean 
	 * @param host
	 * @param port
	 * @param user
	 * @param password
	 * @param remoteDir
	 * @param remoteFileName
	 * @param localDir
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	private String receiveFile(FilePropertiesBean bean,Interfaces interfaces) throws Exception
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry receiveFile.. Started at --> "+ new Date());
		}
		Session session = null;
		Channel channel = null;
		ChannelSftp channelSftp = null;
		JSch jsch = null;
		String totalCount = null;
		Map<String,Object> multipleMap = null;
		BufferedReader br = null;
		String fileName = null;
		String originalFileName = null;
		String ctlFileName = null;
		String originalFileName1 = null;
		String ctlFileName1 = null;
		File file = null;
		Vector<String> files = null;
		Vector <String> availableFiles = null;
		StringBuilder stringBuilder = null;
		Object availableObje = null;
		Vector<String> firstFiles = null;
		Vector<String> secondFiles = null;
		Object obj = null;
		LsEntry entry = null;
		String remoteFileName = null;
		String actualFileName = null;
		InterfaceFileSummary interfaceFileSummary = null;
		Iterator<String> keyset = null;
		String firstFileName = null;
		String secondFileName = null;
		String remoteFileName1 = null;
		String actualFileName1 = null;
		Map<String,Object> inputMap = new HashMap<String, Object>();
		List<Object> interfaceFileSummaryDetailsList = null;
		String columnName=null;
		String columnValue=null;
		SimpleDateFormat dateFormat = null;
		Boolean connectionFlag = null;
		String exceptionMessage = null;

		try 
		{
			connectionFlag = true;
			jsch = new JSch();
			if(bean.getSecurityCredentialsPath() != null && !"".equals(bean.getSecurityCredentialsPath()))
				jsch.addIdentity(bean.getSecurityCredentialsPath());
			session = jsch.getSession(bean.getSecurityPrincipal(), bean.getRemoteHost(), bean.getRemotePort());
			if(bean.getSecurityCredentials() != null)
				session.setPassword(bean.getSecurityCredentials());
			session.setConfig("StrictHostKeyChecking", "no");
			try
			{
				session.connect();
			}
			catch(Exception e)
			{
				connectionFlag = false;
				exceptionMessage = e.getMessage();
				TLogger.info("INT: "+interfaces.getModule().getModuleId()+" -> Connection Refused to Remote Host :: "+bean.getRemoteHost());
			}
			if(!connectionFlag)
			{
				dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				inputMap = new HashMap<String, Object>();
				inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
				inputMap.put("currentDate",dateFormat.format(new Date()));
				inputMap.put("remoteHost",bean.getRemoteHost());
				inputMap.put("errorMessage",exceptionMessage);
				integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.CONNECTION_REFUSED_SCENARIO+"_"+bean.getClientId(),inputMap);
				return null;
			}
			channel = session.openChannel("sftp");
			channel.connect();
			channelSftp = (ChannelSftp) channel;
			channelSftp.cd(bean.getRemoteControlDir());
			multipleMap =  new HashMap<String, Object>();

			for(FileBean fileBeans : bean.getFiles())
			{
				files = channelSftp.ls(fileBeans.getFileName()+"*."+bean.getControlFileFormat()+"."+IntegrationConstants.ZIP_FILE_FORMAT);
				multipleMap.put(fileBeans.getFileName(), files);
			}

			keyset = multipleMap.keySet().iterator();
			firstFileName =  keyset.next();
			firstFiles =  (Vector<String>) multipleMap.get(firstFileName);
			TLogger.debug("multipleMap ::::::::::::" + multipleMap);
			if(multipleMap.size() > 1)
			{
				secondFileName =  keyset.next();
				secondFiles = (Vector<String>) multipleMap.get(secondFileName);
				if(firstFiles.size()>=secondFiles.size())
				{	
					firstFiles =  (Vector<String>) multipleMap.get(firstFileName);
				}
				else
				{	
					firstFiles =  (Vector<String>) multipleMap.get(secondFileName);
					String temp = secondFileName;
					secondFileName =  firstFileName;
					firstFileName =  temp;
				}
			}

			stringBuilder = new StringBuilder();

			if((firstFiles == null  || firstFiles.isEmpty()) &&( secondFiles == null || secondFiles.isEmpty()))
			{
				availableFiles = channelSftp.ls("*.*");
				for(int i=0; i<availableFiles.size();i++)
				{
					availableObje = availableFiles.elementAt(i);
					if(availableObje instanceof LsEntry)
						stringBuilder.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+(((LsEntry) availableObje).getFilename()));
				}
				inputMap = new HashMap<String, Object>();
				inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
				inputMap.put("availableFiles",stringBuilder);
				dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				inputMap.put("currentDate",dateFormat.format(new Date()));
				integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_NOT_EXIST_SCENARIO+"_"+bean.getClientId(),inputMap);
				TLogger.info("INT: "+interfaces.getModule().getModuleId()+" -> No File Exist for Client "+bean.getClientId());

			}
			TLogger.debug("firstFileName :::;" + firstFileName);
			TLogger.debug("secondFileName :::;" + secondFileName);
			TLogger.debug("size :::::::::" +firstFiles.size());
			Collections.sort(firstFiles);
			for (int i = 0; i < firstFiles.size(); i++)
			{
				int lastUpdatedTime = 0;
				interfaceFileSummary = null;						
				obj = firstFiles.elementAt(i);
				if (obj instanceof LsEntry)
				{
					entry = (LsEntry) obj;
					remoteFileName = entry.getFilename();
					lastUpdatedTime = entry.getAttrs().getMTime();
					TLogger.debug("remoteFileName ::::::::::" + remoteFileName);
					columnValue=remoteFileName.substring(0,remoteFileName.lastIndexOf("."));
					columnName="ctrl_file_name_v";
					//query=getInterfaceFileSummaryDetailsByName(columnName);
					interfaceFileSummaryDetailsList=getInterfaceFileSummaryDetailsByIdAndName(interfaces.getInterfaceId(), columnName,columnValue);
					//resultList = query.getResultList();
					if(!interfaceFileSummaryDetailsList.isEmpty())
					{
						channelSftp.cd(bean.getRemoteDir());
						channelSftp.rm(remoteFileName);
						TLogger.debug("Duplicate file: "+remoteFileName.substring(0, remoteFileName.lastIndexOf("."))+" is already exist in system.. ");
						inputMap = new HashMap<String, Object>();
						//						if(bean.getClientName() != null && !"".equals(bean.getClientName()))
						//							inputMap.put("clientId",bean.getClientName());	
						//						else
						inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
						inputMap.put("fileNames",remoteFileName.substring(0, remoteFileName.lastIndexOf(".")));
						inputMap.put("reason",remoteFileName.substring(0, remoteFileName.lastIndexOf("."))+" is already exist in system.. ");
						inputMap.put("errorCode",IntegrationConstants.FILE_NAME_EXIST_ERROR);
						integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);
					}
					else
					{//
						Boolean corruptFile = false;

						channelSftp.get(remoteFileName, bean.getLocalControlDir());
						fileName = remoteFileName.substring(0,remoteFileName.lastIndexOf(".") );
						try
						{
							decompressGzipFile(bean.getLocalControlDir()+remoteFileName, bean.getLocalControlDir()+fileName);
						}
						catch(Exception e)
						{
							TLogger.error("Corrupt File");
							corruptFile = true;
						}
						file = new File(bean.getLocalDir()+remoteFileName);
						file.delete();
						br = new BufferedReader(new FileReader(new File(bean.getLocalControlDir()+fileName)));
						try
						{
							totalCount = Arrays.asList(br.readLine().split(IntegrationConstants.CONTROL_FILE_DELIMETER)).get(IntegrationConstants.CTL_RECORD_COUNT_INDEX);
							Long.parseLong(totalCount.trim());
						}
						catch(Exception e)
						{
							totalCount = "0";
						}
						if(!corruptFile)
							channelSftp.rm(remoteFileName);
					}

					actualFileName = remoteFileName.substring(0,remoteFileName.indexOf(".")+1)+bean.getRemoteFileFormat()+"."+IntegrationConstants.ZIP_FILE_FORMAT;
					originalFileName = actualFileName.substring(0,actualFileName.lastIndexOf(".") );
					ctlFileName = remoteFileName.substring(0,remoteFileName.lastIndexOf(".") );
					TLogger.debug("actualFileName ::::::::::" + actualFileName);
					try
					{
						try
						{
							channelSftp.ls(actualFileName);
						}
						catch(Exception e)
						{	
							TLogger.debug("File 1 ctl not there :::::" + actualFileName);

							interfaceFileSummary = createInterfaceFileSummaryByReceiveFile(bean, interfaces, originalFileName, ctlFileName+" is exist in interface path but corresponding actual file "+originalFileName+" is not exist in interface path.",interfaceFileSummary,IntegrationConstants.FILE_REJECTED_STATUS, lastUpdatedTime);
							//							inputMap = new HashMap<String, Object>();
							//							if(bean.getClientName() != null && !"".equals(bean.getClientName()))
							//								inputMap.put("clientId",bean.getClientName());	
							//							else
							inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
							inputMap.put("fileNames",originalFileName);
							inputMap.put("reason","Control file "+ctlFileName+" is exist in interface path but corresponding actual file "+originalFileName+" is not exist in interface path.");
							inputMap.put("errorCode","404");
							integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);

							continue;

						}
						columnValue=actualFileName.substring(0,actualFileName.lastIndexOf("."));
						columnName="file_name_v";
						interfaceFileSummaryDetailsList=getInterfaceFileSummaryDetailsByIdAndName(interfaces.getInterfaceId(), columnName,columnValue);

						if(!interfaceFileSummaryDetailsList.isEmpty())
						{						
							channelSftp.cd(bean.getRemoteDir());
							channelSftp.rm(actualFileName);
							/*inputMap = new HashMap<String, Object>();
							if(bean.getClientName() != null && !"".equals(bean.getClientName()))
								inputMap.put("clientId",bean.getClientName());	
							else
								inputMap.put("clientId",bean.getClientId());
							inputMap.put("fileNames",actualFileName.substring(0, actualFileName.lastIndexOf(".")));
							inputMap.put("reason",actualFileName.substring(0, actualFileName.lastIndexOf("."))+" is duplicate .. ");
							inputMap.put("errorCode",IntegrationConstants.FILE_NAME_EXIST_ERROR);
							integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);*/
							//	continue;
							TLogger.debug("Duplicate file:"+actualFileName.substring(0, actualFileName.lastIndexOf(".")));
						}
						else
						{
							Boolean corruptFile = false;
							channelSftp.get(actualFileName, bean.getLocalControlDir());
							fileName = actualFileName.substring(0,actualFileName.lastIndexOf(".") );
							try{
								decompressGzipFile(bean.getLocalControlDir()+actualFileName, bean.getLocalControlDir()+fileName);
							}
							catch(Exception e)
							{
								TLogger.error("Corrupt File");
								corruptFile = true;
							}
							file = new File(bean.getLocalDir()+actualFileName);
							file.delete();
							if(!corruptFile)
								channelSftp.rm(actualFileName);

							interfaceFileSummary = createInterfaceFileSummaryByReceiveFile(bean, interfaces, originalFileName, "File Transferred from SFTP to interface",interfaceFileSummary,IntegrationConstants.FILE_RECEIVED_STATUS, lastUpdatedTime);
							createInterfaceFileSummaryDetailsByReceiveFile(originalFileName,ctlFileName,Long.valueOf(totalCount.trim()),interfaceFileSummary);
						}

						if(secondFileName != null)
						{
							remoteFileName1 = remoteFileName.replaceAll(firstFileName, secondFileName);
							actualFileName1 = actualFileName.replaceAll(firstFileName, secondFileName);
							originalFileName1 = actualFileName1.substring(0,actualFileName1.lastIndexOf(".") );
							ctlFileName1 = remoteFileName1.substring(0,remoteFileName1.lastIndexOf(".") );
							TLogger.debug("remoteFileName1 :::::::" + remoteFileName1);
							TLogger.debug("actualFileName1 :::::::" + actualFileName1);
							try
							{
								channelSftp.ls(remoteFileName1);
							}
							catch(Exception e)
							{
								TLogger.debug("File 2 ctl not there :::::" + remoteFileName1);
								interfaceFileSummary = createInterfaceFileSummaryByReceiveFile(bean, interfaces, originalFileName1, originalFileName+" is exist in interface path but corresponding dependent"+ctlFileName1+" is not exist in interface path",interfaceFileSummary,IntegrationConstants.FILE_REJECTED_STATUS, lastUpdatedTime);
								inputMap = new HashMap<String, Object>();
								//								if(bean.getClientName() != null && !"".equals(bean.getClientName()))
								//									inputMap.put("clientId",bean.getClientName());	
								//								else
								inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
								inputMap.put("fileNames",remoteFileName1);
								inputMap.put("reason",originalFileName+" is exist in interface path but corresponding dependent "+ctlFileName1+" is not exist in interface path" );
								inputMap.put("errorCode","404");
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);
								continue;
							}	
							columnValue=remoteFileName1.substring(0, remoteFileName1.lastIndexOf("."));
							columnName="ctrl_file_name_v";
							interfaceFileSummaryDetailsList=getInterfaceFileSummaryDetailsByIdAndName(interfaces.getInterfaceId(), columnName,columnValue);
							//	resultList = query.getResultList();
							if(!interfaceFileSummaryDetailsList.isEmpty())
							{
								channelSftp.cd(bean.getRemoteDir());							
								channelSftp.rm(remoteFileName1);

								/*inputMap = new HashMap<String, Object>();
								if(bean.getClientName() != null && !"".equals(bean.getClientName()))
									inputMap.put("clientId",bean.getClientName());	
								else
									inputMap.put("clientId",bean.getClientId());
								inputMap.put("fileNames",remoteFileName1.substring(0, remoteFileName1.lastIndexOf(".")));
								inputMap.put("reason",remoteFileName1.substring(0, remoteFileName1.lastIndexOf("."))+" is duplicate .. ");
								inputMap.put("errorCode",IntegrationConstants.FILE_NAME_EXIST_ERROR);
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);
								 */
								//continue;
								TLogger.debug("Duplicate file:"+remoteFileName1.substring(0, remoteFileName1.lastIndexOf(".")));
							}
							else
							{
								Boolean corruptFile = false;
								channelSftp.get(remoteFileName1, bean.getLocalControlDir());
								fileName = remoteFileName1.substring(0,remoteFileName1.lastIndexOf(".") );
								try
								{
									decompressGzipFile(bean.getLocalControlDir()+remoteFileName1, bean.getLocalControlDir()+fileName);
								}
								catch(Exception e)
								{
									TLogger.error("Corrupt File");
									corruptFile = true;
								}
								br = new BufferedReader(new FileReader(new File(bean.getLocalControlDir()+fileName)));
								try
								{
									totalCount = Arrays.asList(br.readLine().split(IntegrationConstants.CONTROL_FILE_DELIMETER)).get(IntegrationConstants.CTL_RECORD_COUNT_INDEX);
									Long.parseLong(totalCount.trim());
								}
								catch(Exception e)
								{
									totalCount = "0";
								}
								file = new File(bean.getLocalDir()+remoteFileName1);
								file.delete();
								if(!corruptFile)
									channelSftp.rm(remoteFileName1);
							}
							try
							{
								channelSftp.ls(actualFileName1);
							}
							catch(Exception e)
							{
								TLogger.debug("File 2 actual not there :::::" + actualFileName1);
								interfaceFileSummary = createInterfaceFileSummaryByReceiveFile(bean, interfaces, originalFileName1, ctlFileName1+" is exist in interface path but corresponding actual file "+originalFileName1+" is not exist in interface path.",interfaceFileSummary,IntegrationConstants.FILE_REJECTED_STATUS, lastUpdatedTime);
								inputMap = new HashMap<String, Object>();
								//								if(bean.getClientName() != null && !"".equals(bean.getClientName()))
								//									inputMap.put("clientId",bean.getClientName());

								//								else
								inputMap.put("clientId",getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));
								inputMap.put("fileNames",originalFileName1);
								inputMap.put("reason","Control file "+ctlFileName1+" is exist in interface path but corresponding actual file "+originalFileName1+" is not exist in interface path.");
								inputMap.put("errorCode","404");
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);
								continue;
							}
							columnValue=actualFileName1.substring(0, actualFileName1.lastIndexOf("."));
							columnName="file_name_v";
							interfaceFileSummaryDetailsList=getInterfaceFileSummaryDetailsByIdAndName(interfaces.getInterfaceId(), columnName,columnValue);

							if(!interfaceFileSummaryDetailsList.isEmpty())
							{
								channelSftp.cd(bean.getRemoteDir());

								channelSftp.rm(actualFileName1);

								/*inputMap = new HashMap<String, Object>();
								if(bean.getClientName() != null && !"".equals(bean.getClientName()))
									inputMap.put("clientId",bean.getClientName());	
								else
									inputMap.put("clientId",bean.getClientId());
								inputMap.put("fileNames",actualFileName1.substring(0, actualFileName1.lastIndexOf(".")));
								inputMap.put("reason",actualFileName1.substring(0, actualFileName1.lastIndexOf("."))+" is duplicate .. ");
								inputMap.put("errorCode",IntegrationConstants.FILE_NAME_EXIST_ERROR);
								integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(),IntegrationConstants.FILE_REJECTION_FULL_SCENARIO+"_"+bean.getClientId(),inputMap);
								 */
								// continue;
								TLogger.debug("Duplicate file:"+actualFileName1.substring(0, actualFileName1.lastIndexOf(".")));

							}
							else
							{
								Boolean corruptFile = false;
								channelSftp.get(actualFileName1, bean.getLocalControlDir());
								fileName = actualFileName1.substring(0,actualFileName1.lastIndexOf("."));
								try
								{
									decompressGzipFile(bean.getLocalControlDir()+actualFileName1, bean.getLocalControlDir()+fileName);
								}
								catch(Exception e)
								{
									TLogger.error("Corrupt File");
									corruptFile = true;
								}
								file = new File(bean.getLocalDir()+actualFileName1);
								file.delete();
								if(!corruptFile)
									channelSftp.rm(actualFileName1);

								createInterfaceFileSummaryDetailsByReceiveFile(originalFileName1,ctlFileName1,Long.valueOf(totalCount.trim()),interfaceFileSummary);
							}
						}
					}
					catch(Exception e)
					{
						//						e.printStackTrace();
						TLogger.error("Unhandled Exception -->", e);
					}
				}
			}
		} 
		catch (SftpException sftpException) 
		{
			TLogger.error(sftpException.getMessage(), sftpException);
			throw new Exception(sftpException.getMessage(), sftpException);
		} 
		catch (JSchException jSchException) 
		{
			TLogger.error(jSchException.getMessage(), jSchException);
			throw new Exception(jSchException.getMessage(), jSchException);
		}
		finally
		{

			fileName = null;
			jsch = null;
			totalCount = null;
			remoteFileName = null;
			actualFileName = null;
			interfaceFileSummary = null;
			keyset = null;
			firstFileName = null;
			secondFileName = null;
			remoteFileName1 = null;
			actualFileName1 = null;
			if(br != null)
				br.close();
			if(channelSftp != null)
			{
				channelSftp.exit();
				TLogger.debug("sftp Channel exited..");
			}

			if(channel != null)
			{
				channel.disconnect();
				TLogger.debug("Channel disconnected..");
			}

			if(session != null)
			{
				session.disconnect();
				TLogger.debug("Host Session disconnected..");
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit receiveFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
			file = null;
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFileSummaryDetails> getInterfaceFileSummaryDetailsByName(String columnName,String columnValue) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetailsByName.. Started at --> "+ new Date());
		}

		Query query=null;

		try
		{
			query= entityManager.createQuery("from " + InterfaceFileSummaryDetails.class.getCanonicalName() +" where " +columnName+"="+"'"+columnValue+"'");
			return query.getResultList();
		}

		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByNameException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByNameException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}

		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByNameException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{

			query = null;


			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetailsByName service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param columnName
	 * @param columnValue
	 * @return List<Object>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<Object> getInterfaceFileSummaryDetailsByIdAndName(Long interfaceId, String columnName, String columnValue) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetailsByIdAndName.. Started at --> "+ new Date());
		}

		Query query=null;

		try
		{
			query= entityManager.createNativeQuery("select d.file_name_v from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_file_summary s, " 
					+ IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_file_summary_details d where s.file_id_n = d.file_id_n and s.interface_id_n =:interfaceId " +
					"and d."+ columnName +" =:fileName ");
			query.setParameter("interfaceId", interfaceId);
			query.setParameter("fileName", columnValue);

			return query.getResultList();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdAndNameException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdAndNameException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdAndNameException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetailsByIdAndName service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	@RolesAllowed("default")
	public void deleteBounceMailByIdandEmail(String bounceId,String bounceEmail) throws ApplicationException
	{

		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry deleteBounceMailByIdandEmail.. Started at --> "+ new Date());
		}

		Query query=null;
		TLogger.debug("bounceId***"+bounceId);
		TLogger.debug("bounceEmail***"+bounceEmail);

		try
		{
			if((bounceId == null||bounceId.trim().isEmpty())&& (bounceEmail == null || bounceEmail.trim().isEmpty()))
			{
				TLogger.error("bounceId or bounceEmail should not be empty..");
				throw new IntegrationManagement.BounceEmailException("bounceId or bounceEmail should not be empty..",null);
			}
			if(bounceId!=null&&!bounceId.equals("?")&&!bounceId.equals("")){
				String qry = " delete from " + BounceEmail.class.getCanonicalName() +" where bounce_id_n="+Integer.valueOf(bounceId);
				query= entityManager.createQuery(qry);
				//System.out.println("query::"+qry);
			}
			else
				query= entityManager.createQuery(" delete from " + BounceEmail.class.getCanonicalName() +" where bounce_mail_id_v="+"'"+bounceEmail+"'");
			query.executeUpdate();
		}

		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.BounceEmailException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.BounceEmailException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}

		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.BounceEmailException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{

			query = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit deleteBounceMailByIdandEmail service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}

	}

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 		1. Read the given input parameters.
	 * 		2. Create the dateFormat using the fileNameFormat provided and prepare the fileName.
	 * 		3. Get the list of files from the remote server.
	 * 		4. Iterate them and if the file is not directory then fetch file and return the fileName.
	 * </pre>
	 * @param channelSftp
	 * @param fileName
	 * @param fileNameFormat
	 * @param fileFormat
	 * @return String
	 * @throws Exception
	 */
	/*@SuppressWarnings("unchecked")
	private String getRemoteFile(ChannelSftp channelSftp, String fileName, String fileNameFormat, String fileFormat) throws Exception
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getRemoteFile.. Started at --> "+ new Date());
		}

		Vector<String> files = null;
		Object obj = null;
		LsEntry entry = null;
		String remoteFileName = null;
		try
		{

			TLogger.debug("getRemoteFile service received fileName -->"+fileName+"fileNameFormat-->"+fileNameFormat+"fileFormat-->"+fileFormat+"channelSftp-->"+channelSftp);
			files = channelSftp.ls("*");

			for (int i = 0; i < files.size(); i++)
			{
				obj = files.elementAt(i);
				if (obj instanceof LsEntry)
				{
					entry = (LsEntry) obj;
					if (!entry.getAttrs().isDir() && entry.getFilename().startsWith(fileName)&& entry.getFilename().endsWith(fileFormat+"."+IntegrationConstants.ZIP_FILE_FORMAT))
					{
						remoteFileName = entry.getFilename();
						break;
					}
				}
			}

			return remoteFileName;
		}
		catch(Exception exception)
		{
			TLogger.error(exception.getMessage(), exception);
			throw new Exception(exception.getMessage(), exception);
		}
		finally
		{
			files = null;
			obj = null;
			entry = null;
			remoteFileName = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getRemoteFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	 */	/**
	 * @author Suresh Upparu
	 * <b>Alogirthm</b>
	 * <pre>
	 * 		1. Reads the given byte parameter requestData.
	 * 		2. Iterates the byte array and convert to the char.
	 * 		3. Append to the stringBuffer object.
	 * 		4. Returns the string.
	 * </pre>
	 * @param requestData
	 * @return
	 * @throws Exception 
	 */
	/*private String byteToString(byte[] requestData) throws Exception
	{
//		Long startTime = System.currentTimeMillis();
//		if(TLogger.debugIsEnabled())
//		{
//			TLogger.debug("Entry byteToString.. Started at --> "+ new Date());
//		}
		StringBuffer responseData = null;
		try
		{
//			TLogger.debug("byteToString service received requestData-->"+requestData);
			responseData = new StringBuffer();

			if(requestData.length>0)
			{
				for(byte data : requestData)
				{
					responseData.append((char) data);
				}
			}
			return responseData.toString();
		}
		catch(Exception e)
		{
			throw e;
		}
		finally
		{
			responseData = null;
//			if(TLogger.debugIsEnabled())
//			{
//				TLogger.debug("Exit byteToString service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
//			}
//			startTime = null;
		}
	}*/

	/**
	 * @author Ramana Rao K
	 * <b>Alogirthm</b>
	 * <pre>
	 *		1.	read the list of interfaces ids as input parameters.
	 *		2.	validate the interface ids list is null or not null.
	 *		3.	If the interface ids list is null then throw the exception.
	 *		4.	Otherwise get the all interface ids objects.
	 *		5.	If any interface id object is not available in the database then throw the exception.
	 *		6.	Otherwise, process the each and every interface object.
	 *		7.	In each iteration,
	 *			7.1	get the attribute details of interface like host,port, user name, password, Local file path, and remove file path.
	 *			7.2	verify the transaction type.
	 *			7.3	If the transaction type is "SEND".
	 *				7.3.1	call the sendFile service.
	 *			7.4	If the transaction type is "RECEIVE".
	 *				7.4.1	call the receiveFile service
	 *			7.5	Update the status, acknowledgment, and dateTime.
	 *		8. If the service (sendFile or receiveFile) call is failed, place the entry in TR_INTERFACE_FAILURE table with failure details.
	 * @param List<Long> interfaceIds
	 * @return boolean
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public void processFile(List<Long> interfaceIds) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		ResponseBean sendFileResponse = null;
//		Boolean flag = true;
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processFile.. Started at --> "+ new Date());
		}

		Query query = null;
		InterfaceFileSummary interfaceFileSummary = null;

		List<Interfaces> interfacesList = null;
		List<FilePropertiesBean> propertiesBeans = null;

		Map<String,Object> inputMap  = null;
		StringBuilder stringBuilder  = null;
		Calendar c = null;
		Calendar c1 = null;

		List<InterfaceFileSummary> fileSummaryList = null;
		Long sTime = null;
		boolean emptyFile = false;

		try
		{
			TLogger.debug("processFile service received interface id-->"+interfaceIds);
			if(interfaceIds == null || interfaceIds.isEmpty())
			{
				throw new IntegrationManagement.ProcessFileException("interface ids are must be not null", null);
			}

			query = this.entityManager.createQuery("from " + Interfaces.class.getCanonicalName() + " where interfaceId in (:interfaceIds)");
			query.setParameter("interfaceIds", interfaceIds);
			interfacesList = query.getResultList();

			if(interfacesList.isEmpty())
			{
				TLogger.error("interfaces entites are not available for interfaceIds: " + interfaceIds);
				throw new IntegrationManagement.ProcessFileException("interfaces entites are not available for interfaceIds: " + interfaceIds,null);
			}
			c = Calendar.getInstance();
			c1 = Calendar.getInstance();
			for(Interfaces interfaces : interfacesList)
			{
				sTime = System.currentTimeMillis();
				TLogger.debug("Entry processFile.. " + interfaces.getInterfaceId() + " Started at --> "+ new Date());
				try
				{
					if(IntegrationConstants.SEND_TRANS_TYPE.equals(interfaces.getTransactionType()))
					{
						fileSummaryList = getInterfaceFileSummaryByInterfaceIdAndStatus(interfaces.getInterfaceId(), IntegrationConstants.FILE_INQUEUE_STATUS, null);
						if((fileSummaryList == null || fileSummaryList.isEmpty()) && IntegrationConstants.PREPARE_EMPTY_FILES_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
						{
							fileSummaryList = new ArrayList<InterfaceFileSummary>();
							interfaceFileSummary = prepareEmptyFiles(interfaces.getInterfaceId());
							//TLogger.debug("fileSummaryList-->"+fileSummaryList.size());
							fileSummaryList.add(interfaceFileSummary);
							emptyFile = true;
						}
						for(InterfaceFileSummary fileSummary : fileSummaryList)
						{
							try
							{
								if(IntegrationConstants.SEND_ONLY_OLD_FILES_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()) && fileSummary.getProcessedOn() != null && !emptyFile)
								{
									c1.setTime(fileSummary.getProcessedOn());
									if(c.get(Calendar.YEAR) == c1.get(Calendar.YEAR) && c.get(Calendar.MONTH) == c1.get(Calendar.MONTH) && c.get(Calendar.DATE) == c1.get(Calendar.DATE))
									{
										continue;
									}
								}
								stringBuilder = new StringBuilder();
								for(InterfaceFileSummaryDetails interfaceFileSummaryDetails2 : fileSummary.getFileSummaryDetails())
								{
									stringBuilder.append(interfaceFileSummaryDetails2.getFileName()+","+interfaceFileSummaryDetails2.getControlFileName());
									stringBuilder.append(",");
								}
								sendFileResponse = sendFile(fileSummary.getFileId(), IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
								if(!sendFileResponse.getFlag())
								{
									fileSummary.setStatus(entityManager.find(Status.class,IntegrationConstants.FILE_REJECTED_STATUS));
									if(sendFileResponse.getErrorMessage() != null && !sendFileResponse.getErrorMessage().isEmpty())
										fileSummary.setMessage(sendFileResponse.getErrorMessage());
									else
										fileSummary.setMessage("File Contains Invalid Data, Rejected From Interface");
									integrationManagementLocal.updateInterfaceFileSummary(fileSummary);
									if(stringBuilder!=null)
										sendNotificationForFileValidation(stringBuilder.toString());
									continue;
								}
								fileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_UPLOADED_STATUS));
								fileSummary.setUploadedOn(new Date());
								fileSummary.setMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.FILES_UPLOADED));
								integrationManagementLocal.updateInterfaceFileSummary(fileSummary);

								if(stringBuilder != null)
								{
									inputMap = new HashMap<String,Object>();
									inputMap.put("fileNames", stringBuilder.substring(0,stringBuilder.length()-1));
									integrationUtilManagementLocal.prepareNotificationJsonData(interfaces.getInterfaceId(), IntegrationConstants.FILE_TRANSFERRED_TO_SFTP_SCENARIO+"_"+fileSummary.getUploadedBy(), inputMap);
								}
							}
							catch(Exception e)
							{
								TLogger.error("Exception on process file send filesummary loop :", e);
								continue;
							}
						}
					}
					else 
					{
						propertiesBeans = readFilePropertyBeans(interfaces.getInterfaceId());

						for(FilePropertiesBean bean : propertiesBeans)
						{
							try
							{
								interfaceFileSummary = null;
								if(bean.getIsSFTP().equalsIgnoreCase("true"))
								{
									receiveFile(bean,interfaces);
								}
								else
								{
									//ftp code goes here..
								}
							}
							catch(Exception e)
							{
								TLogger.error("Exception on process file receive - file bean loop :", e);
								continue;
							}
						}
					}
				}
				catch(Exception e)
				{
					TLogger.error("Exception on process file interface loop :", e);
					continue;
				}

				TLogger.debug("Completed processFile.. " + interfaces.getInterfaceId() + " Service at --> "+ new Date()+" --- and took "+(System.currentTimeMillis()-sTime)+" milliseconds");
			}
		}
		catch(NullPointerException nullpointerException)
		{
			TLogger.error("[nullpointerException] " + nullpointerException.getMessage(), nullpointerException);
			throw new IntegrationManagement.ProcessFileException(nullpointerException.getMessage(), nullpointerException);
		}
		catch (ApplicationException applicationException) 
		{
			TLogger.error("[applicationException] " + applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("[exception] " + exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessFileException(exception.getMessage(), exception);
		} 
		finally
		{
			query = null;
			interfaceFileSummary = null;

			interfacesList = null;
			propertiesBeans = null;

			inputMap = null; 
			stringBuilder = null; 
			sendFileResponse = null;
			sTime = null;
			c = null;
			c1 = null;

			fileSummaryList = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *     1. 
	 * </pre>
	 * 
	 * @param interfaceId.
	 * @return 
	 * 
	 */
	@SuppressWarnings("unchecked")
	private InterfaceFileSummary prepareEmptyFiles(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry writeToLocalFile.. Started at --> "+ new Date());
		}
		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceFileSummaryDetails fileSummaryDetails = null;
		JSONObject sendServerjsonObject = null;
		JSONObject localServerjsonObject = null;
		SimpleDateFormat dateFormat = null;
		FileOutputStream fileOutputStream = null;
		OutputStreamWriter outputStreamWriter = null;
		String fileCount = "00";
		String fileDate = "";
		Integer count = 0;
		List<FilePropertiesBean> filePropertiesBeans = null;
		Calendar c = null;
		try
		{
			filePropertiesBeans = readFilePropertyBeans(interfaceId);
			c = Calendar.getInstance();
			c.add(Calendar.DATE, -1);
			TLogger.debug("filePropertiesBeans size-->"+filePropertiesBeans);
			for(FilePropertiesBean filePropertiesBean: filePropertiesBeans)
			{
				if(filePropertiesBean.getRemoteFileNameFormat() != null && !filePropertiesBean.getRemoteFileNameFormat().isEmpty())
				{
					dateFormat = new SimpleDateFormat(filePropertiesBean.getRemoteFileNameFormat());
					fileDate = fileDate +  "_" + dateFormat.format(c.getTime());
				}
				count++;

				fileCount += count.toString();
				if(fileCount.length() > 3)
				{
					fileCount = fileCount.substring(fileCount.length() - 3);
				}
				interfaceFileSummary = new InterfaceFileSummary();
				interfaceFileSummary.setFileName(filePropertiesBean.getFiles().iterator().next().getFileName());
				interfaceFileSummary.setInterfaces(entityManager.find(Interfaces.class, interfaceId));
				interfaceFileSummary.setTotalCount(0L);
				interfaceFileSummary.setSuccessCount(0L);
				interfaceFileSummary.setErrorCount(0L);
				interfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_INQUEUE_STATUS));
				interfaceFileSummary.setMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.FILES_CREATED));
				interfaceFileSummary.setProcessedOn(new Date());
				interfaceFileSummary.setUploadedBy(Long.valueOf(filePropertiesBean.getClientId()));
				sendServerjsonObject = new JSONObject();
				sendServerjsonObject.put("Host", filePropertiesBean.getRemoteHost());
				sendServerjsonObject.put("Port", filePropertiesBean.getRemotePort());
				sendServerjsonObject.put("User", filePropertiesBean.getSecurityPrincipal());
				sendServerjsonObject.put("Pass", filePropertiesBean.getSecurityCredentials());
				sendServerjsonObject.put("DestDir", filePropertiesBean.getRemoteDir());
				sendServerjsonObject.put("DestCtlDir", filePropertiesBean.getRemoteControlDir());
				interfaceFileSummary.setSendServerDetails(sendServerjsonObject.toJSONString());
				localServerjsonObject = new JSONObject();
				localServerjsonObject.put("Dir", filePropertiesBean.getLocalDir());
				localServerjsonObject.put("BkpDir", filePropertiesBean.getLocalBackupDir());
				localServerjsonObject.put("CtlDir", filePropertiesBean.getLocalControlDir());
				localServerjsonObject.put("CtlBkpDir", filePropertiesBean.getLocalControlBackupDir());
				interfaceFileSummary.setLocalServerDetails(localServerjsonObject.toJSONString());
				interfaceFileSummary = createInterfaceFileSummary(interfaceFileSummary);
				TLogger.debug("File bean size -->"+filePropertiesBean.getFiles().size());
				for(FileBean fileBean : filePropertiesBean.getFiles())
				{
					TLogger.debug("Entry filebean-->"+fileBean.getFileName());
					fileSummaryDetails = new InterfaceFileSummaryDetails();
					fileSummaryDetails.setControlFileName("");
					fileSummaryDetails.setFileName(fileBean.getFileName()+fileDate+"_"+fileCount+"."+filePropertiesBean.getRemoteFileFormat());
					fileSummaryDetails.setFileType(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
					fileSummaryDetails.setInterfaceFileSummary(interfaceFileSummary);
					fileSummaryDetails.setTotalCount(0L);
					fileSummaryDetails.setSuccessCount(0L);
					fileSummaryDetails.setErrorCount(0L);
					fileSummaryDetails = createInterfaceFileSummaryDetails(fileSummaryDetails);
					if(IntegrationConstants.INVENTORY_SALES_FILE_NAME.equals(fileBean.getFileName()))
					{
						fileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+fileSummaryDetails.getFileName());
						outputStreamWriter = new OutputStreamWriter(fileOutputStream,IntegrationConstants.FILE_ENCODE_FORMAT);
						outputStreamWriter.write(getInterfaceAttributeValue(interfaceId, IntegrationConstants.FIRST_FILE_HEADER_ATTR));
						outputStreamWriter.write("\n");
						//						fileOutputStream.close();
						outputStreamWriter.close();
						createControlFile(filePropertiesBean.getLocalDir()+"/"+fileSummaryDetails.getFileName(), 0L, fileSummaryDetails.getFileName().substring(0, (fileSummaryDetails.getFileName().lastIndexOf("."))), filePropertiesBean.getRemoteFileFormat(), fileSummaryDetails.getFileDetailsId(), filePropertiesBean.getControlFileFormat(), filePropertiesBean.getLocalControlDir());
					}
					else
					{
						fileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+fileSummaryDetails.getFileName());
						outputStreamWriter = new OutputStreamWriter(fileOutputStream,IntegrationConstants.FILE_ENCODE_FORMAT);
						outputStreamWriter.write(getInterfaceAttributeValue(interfaceId, IntegrationConstants.SECOND_FILE_HEADER_ATTR));
						outputStreamWriter.write("\n");
						//						fileOutputStream.close();
						outputStreamWriter.close();
						createControlFile(filePropertiesBean.getLocalDir()+"/"+fileSummaryDetails.getFileName(), 0L, fileSummaryDetails.getFileName().substring(0, (fileSummaryDetails.getFileName().lastIndexOf("."))), filePropertiesBean.getRemoteFileFormat(), fileSummaryDetails.getFileDetailsId(), filePropertiesBean.getControlFileFormat(), filePropertiesBean.getLocalControlDir());
					}
				}
			}
			return interfaceFileSummary;
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPointerException :: "+nullPointerException.getMessage(),nullPointerException);
			throw new IntegrationManagement.PrepareEmptyFileException(nullPointerException.getMessage(), nullPointerException);
		} 
		catch (IOException ioException) 
		{
			TLogger.error("IoException :: "+ioException.getMessage(),ioException);
			throw new IntegrationManagement.PrepareEmptyFileException(ioException.getMessage(),ioException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(),exception);
			throw new IntegrationManagement.PrepareEmptyFileException(exception.getMessage(),exception);
		}
		finally
		{
			interfaceFileSummary = null;
			fileSummaryDetails = null;
			sendServerjsonObject = null;
			localServerjsonObject = null;
			outputStreamWriter = null;
			dateFormat = null;
			fileCount = null;
			fileDate = null;
			count = null;
			try 
			{

				if(fileOutputStream != null)
				{
					fileOutputStream.close();
				}
			} 
			catch (IOException ioException) 
			{
				TLogger.error("IoException :: " + ioException.getMessage(), ioException);
				throw new IntegrationManagement.PrepareEmptyFileException(ioException.getMessage(), ioException);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit writeToLocalFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

		}
	}
	/**
	 * @author Ramana Rao K
	 * <b>Alogirthm</b>
	 * <pre>
	 *		1.	Read the interfaceSummary object as input parameters.
	 *		2.	validate the List of interfaceSummary object is null or not null.
	 *		3.	If the interfaceSummary object is null then throw the exception.
	 *		4.	Otherwise start the preparation of file with the requestData of interface summary details
	 *		5.	And give the file name as given file name with the given extension.
	 *		6.	Write the data to the prepared file.
	 *		7.	If the request contains the more than 1000 records, then for each 1000 records request, its created the new file.
	 *		8.	Save the prepared files in the target location.
	 *		9.	With the file details, place the entry in the interface_file_summary table.
	 *		10.	Based on the passed txn id, update the entry in interace_summary table with the file type (either IN file or OUT file) in ref_data2_v column.
	 *		11.	Based on the passed txn id, update the entry in interace_summary table with the file id in ref_data3_v column.
	 *		12.	If the service (sendFile or receiveFile) call is failed, place the entry in TR_INTERFACE_FAILURE table with failure details.
	 * @param Long transactionId, String fileName, String fileFormat, String targetLocation
	 * @return void
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	private void prepareFile(Interfaces interfaces) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry prepareFile.. Started at --> "+ new Date());
		}

		InterfaceSummary interfaceSummary = null;
		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceFileSummaryDetails fileSummaryDetails = null;
		Status status = null;
		Status processedStatus = null;
		List<InterfaceSummary> interfaceSummaryList = null;
		Query query = null;
		File file = null;
		File newFile = null;
		FileOutputStream fileOutputStream = null;
		OutputStreamWriter outputStreamWriter = null;
		SimpleDateFormat dateFormat = null;
		List<FilePropertiesBean> propertiesBeans = null;
		String finalName = null;
		Long currentFileId = null;
		Long recordsLimit = null;
		Long totalCount = 0L;
		int fileCounter = 0;
		JSONObject sendServerjsonObject = null;
		JSONObject localServerjsonObject = null;
		String fileName = null;
		String reqRecord = null;
		try
		{
			if(interfaces == null)
			{
				TLogger.error("Interface object should not be empty..");
				throw new IntegrationManagement.PrepareFileException("Interface object should not be empty..", null);
			}

			TLogger.debug("prepareFile service received interface object for interface id-->"+interfaces.getInterfaceId());
			//			files = new HashSet<String>();

			propertiesBeans = readFilePropertyBeans(interfaces.getInterfaceId());

			status = entityManager.find(Status.class, IntegrationConstants.FILE_INQUEUE_STATUS);

			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() +
					" where interfaces =:interfaces and status.statusId = :statusId");
			query.setParameter("interfaces", interfaces);
			query.setParameter("statusId", IntegrationConstants.IN_QUEUE_STATUS);
			//			query.setMaxResults(IntegrationConstants.INTERFACE_SUMMARY_LIMIT.intValue()); 
			interfaceSummaryList = query.getResultList();

			processedStatus = entityManager.find(Status.class, IntegrationConstants.PROCESSED_STATUS);
			if(IntegrationConstants.INVENTORY_SALES_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
			{
				for(FilePropertiesBean bean : propertiesBeans)
				{
					interfaceFileSummary = writeToLocalFile(interfaces, bean, interfaceSummaryList);
				}
			}
			else
			{
				for(int i = 0; i < interfaceSummaryList.size(); i++)
				{
					for(FilePropertiesBean bean : propertiesBeans)
					{
						for(FileBean fileBean : bean.getFiles())
						{
							fileName = fileBean.getFileName();
							interfaceSummary = interfaceSummaryList.get(i);
							if(bean.getRemoteFileNameFormat() != null && !bean.getRemoteFileNameFormat().isEmpty())
							{
								dateFormat = new SimpleDateFormat(bean.getRemoteFileNameFormat());
								fileName = fileName +  "_" + dateFormat.format(new Date());
							}

							totalCount++;
							if((recordsLimit == null && i == 0) || (recordsLimit != null && (i % recordsLimit.intValue()) == 0))
							{
								fileCounter++;
								/*if(IntegrationConstants.INVENTORY_SALES_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
								{
									fileCounter = 1;
								}*/

								finalName = bean.getLocalDir() + File.separator + fileName + (fileCounter > 0 ? "_" + String.valueOf(fileCounter) : "") + "." + IntegrationConstants.TEMP_FILE_FORMAT;
								//TLogger.debug("finalName :: "+finalName);
								file = new File(finalName);

								//insert the file details in db
								if(interfaceFileSummary == null)
								{
									interfaceFileSummary = new InterfaceFileSummary();
									interfaceFileSummary.setFileName(file.getPath());
									interfaceFileSummary.setInterfaces(interfaceSummary.getInterfaces());
									interfaceFileSummary.setTotalCount(0L);
									interfaceFileSummary.setStatus(status);
									interfaceFileSummary.setUploadedBy(Long.parseLong(bean.getClientId()));
									interfaceFileSummary.setProcessedOn(new Date());
									interfaceFileSummary.setMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.FILES_CREATED));
									sendServerjsonObject = new JSONObject();
									sendServerjsonObject.put("Host", bean.getRemoteHost());
									sendServerjsonObject.put("Port", bean.getRemotePort());
									sendServerjsonObject.put("User", bean.getSecurityPrincipal());
									sendServerjsonObject.put("Pass", bean.getSecurityCredentials());
									sendServerjsonObject.put("DestDir", bean.getRemoteDir());
									sendServerjsonObject.put("DestCtlDir", bean.getRemoteControlDir());
									interfaceFileSummary.setSendServerDetails(sendServerjsonObject.toJSONString());
									localServerjsonObject = new JSONObject();
									localServerjsonObject.put("Dir", bean.getLocalDir());
									localServerjsonObject.put("BkpDir", bean.getLocalBackupDir());
									localServerjsonObject.put("CtlDir", bean.getLocalControlDir());
									localServerjsonObject.put("CtlBkpDir", bean.getLocalControlBackupDir());
									interfaceFileSummary.setLocalServerDetails(localServerjsonObject.toJSONString());
									//									entityManager.persist(interfaceFileSummary);
									//									entityManager.flush();
									integrationManagementLocal.createInterfaceFileSummary(interfaceFileSummary);
								}


								fileSummaryDetails = new InterfaceFileSummaryDetails();
								fileSummaryDetails.setControlFileName("");
								fileSummaryDetails.setFileName(file.getPath());
								fileSummaryDetails.setFileType(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
								fileSummaryDetails.setInterfaceFileSummary(interfaceFileSummary);
								fileSummaryDetails.setTotalCount(0L);

								//								entityManager.persist(fileSummaryDetails);
								//								entityManager.flush();
								fileSummaryDetails = integrationManagementLocal.createInterfaceFileSummaryDetails(fileSummaryDetails);

								currentFileId = fileSummaryDetails.getFileDetailsId();

								//TLogger.debug("file created");

								if(outputStreamWriter != null)
								{
									outputStreamWriter.close();
								}

								fileOutputStream = new FileOutputStream(file, true);
								outputStreamWriter = new OutputStreamWriter(fileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
							}

							reqRecord = null;
							for(String record : new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).split(IntegrationConstants.NEXT_RECORD_DELIMITER))
							{
								//TLogger.debug("Record : " + record +"\nFileName : " + fileName);
								if(record.trim().startsWith(fileName.trim()))
								{
									reqRecord = record.substring(record.indexOf(".csv") + 5);
									break;
								}
							}

							//TLogger.debug("reqRecord :: " + reqRecord);

							outputStreamWriter.write(reqRecord);
							if((recordsLimit == null && i == (interfaceSummaryList.size()-1)) || (recordsLimit != null && (totalCount == recordsLimit || i == (interfaceSummaryList.size() -1))))
							{
								//								if(fileOutputStream != null)
								//								{
								//									fileOutputStream.close();
								//								}
								if(outputStreamWriter != null)
									outputStreamWriter.close();

								//TLogger.debug("file name before-->"+file.getName());
								newFile = new File(file.getParent(), fileName + (fileCounter > 0 ? "_" + String.valueOf(fileCounter) : "") + "." + bean.getRemoteFileFormat());
								file.renameTo(newFile);
								createControlFile(newFile.getPath(), totalCount, fileName + (fileCounter > 0 ? "_" + String.valueOf(fileCounter) : ""), bean.getRemoteFileFormat(), currentFileId, bean.getControlFileFormat(), bean.getLocalControlDir());
								totalCount=0L;
							}
						}
					}
				}

				if(interfaceSummary != null && interfaceFileSummary != null)
				{
					interfaceSummary.setReferenceData2(Long.parseLong(IntegrationConstants.ENHANCESYS_DEFAULT_NODE_ID));
					interfaceSummary.setReferenceData3(interfaceFileSummary.getFileId());
					interfaceSummary.setStatus(processedStatus);
					//					entityManager.flush();
					integrationManagementLocal.updateInterfaceSummary(interfaceSummary);
				}
			}
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("[nullPointerException]"+nullPointerException.getMessage(),nullPointerException);
			throw new IntegrationManagement.PrepareFileException(nullPointerException.getMessage(), nullPointerException);
		} 
		catch (IOException ioException) 
		{
			TLogger.error("[ioException] "+ioException.getMessage(),ioException);
			throw new IntegrationManagement.PrepareFileException(ioException.getMessage(),ioException);
		}
		catch(Exception exception)
		{
			TLogger.error("[exception] "+exception.getMessage(),exception);
			throw new IntegrationManagement.PrepareFileException(exception.getMessage(),exception);
		}
		finally
		{
			interfaceSummary = null;
			interfaceFileSummary = null;
			fileSummaryDetails = null;
			status = null;
			processedStatus = null;
			interfaceSummaryList = null;
			query = null;
			file = null;
			newFile = null;
			dateFormat = null;
			finalName = null;
			currentFileId = null;
			recordsLimit = null;
			totalCount = null;

			propertiesBeans = null;
			sendServerjsonObject = null;
			localServerjsonObject = null;
			fileName = null;
			reqRecord = null;
			try 
			{
				//				if(fileOutputStream != null)
				//				{
				//					fileOutputStream.close();
				//				}
				if(outputStreamWriter != null)
					outputStreamWriter.close();
			} 
			catch (IOException ioException) 
			{
				TLogger.error("[ioException] "+ioException.getMessage(),ioException);
				throw new IntegrationManagement.PrepareFileException(ioException.getMessage(),ioException);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit prepareFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param filePropertiesBean
	 * @param interfaceSummary
	 * @param interfaceFileSummary
	 * @param status
	 * @param fileName
	 * @return InterfaceFileSummary
	 */
	@SuppressWarnings({ "unchecked" })
	private InterfaceFileSummary writeToLocalFile(Interfaces interfaces, FilePropertiesBean filePropertiesBean, List<InterfaceSummary> interfaceSummaryList) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry writeToLocalFile.. Started at --> "+ new Date());
		}
		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceFileSummaryDetails fileSummaryDetails = null;
		Set<InterfaceFileSummaryDetails> fileSummaryDetailsSet = null;
		List<InterfaceFileSummary> interfaceFileSummaries = null;
		JSONObject sendServerjsonObject = null;
		JSONObject localServerjsonObject = null;
		SimpleDateFormat dateFormat = null;
		FileOutputStream firstFileOutputStream = null;
		OutputStreamWriter firstOutputStreamWriter = null;
		FileOutputStream secondFileOutputStream = null;
		OutputStreamWriter secondOutputStreamWriter = null;
		String firstFileName = null;
		String secondFileName = null;
		String fileDate = "";
		String fileName = null;
		Long firstTotalCount = 0L;
		Long firstLocalCount = 0L;
		Long secondTotalCount = 0L;
		Long firstFileId = null;
		Long secondFileId = null;
		Calendar c = null;
		Calendar c1 = null;
		String reqRecord = null;
		Query query= null;
		List<InterfaceFileSummaryDetails> fileSummaryDetailsList = null;
		String fileNameDb= null;
		String fileCount = null;
		Integer count = 0;
		try
		{
			interfaceFileSummaries = getInterfaceFileSummaryByInterfaceIdAndStatus(interfaces.getInterfaceId(), IntegrationConstants.FILE_INQUEUE_STATUS, null);
			if(interfaceFileSummaries != null && !interfaceFileSummaries.isEmpty())
			{
				for(InterfaceFileSummary interfaceFileSummary2 : interfaceFileSummaries)
				{
					c = Calendar.getInstance();
					c1 = Calendar.getInstance();
					c1.setTime(interfaceFileSummary2.getProcessedOn());
					if(c.get(Calendar.YEAR) == c1.get(Calendar.YEAR) && c.get(Calendar.MONTH) == c1.get(Calendar.MONTH) && c.get(Calendar.DATE) == c1.get(Calendar.DATE))
					{
						interfaceFileSummary = interfaceFileSummary2;
						break;
					}
				}
			}
			if(filePropertiesBean.getRemoteFileNameFormat() != null && !filePropertiesBean.getRemoteFileNameFormat().isEmpty())
			{
				dateFormat = new SimpleDateFormat(filePropertiesBean.getRemoteFileNameFormat());
				fileDate = fileDate +  "_" + dateFormat.format(new Date());
			}
			if(interfaceFileSummary == null)
			{

				interfaceFileSummary = new InterfaceFileSummary();
				interfaceFileSummary.setFileName(filePropertiesBean.getFiles().iterator().next().getFileName());
				interfaceFileSummary.setInterfaces(interfaces);
				interfaceFileSummary.setTotalCount(0L);
				interfaceFileSummary.setSuccessCount(0L);
				interfaceFileSummary.setErrorCount(0L);
				interfaceFileSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.FILE_INQUEUE_STATUS));
				interfaceFileSummary.setProcessedOn(new Date());
				interfaceFileSummary.setMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.FILES_CREATED));
				interfaceFileSummary.setUploadedBy(Long.valueOf(filePropertiesBean.getClientId()));
				sendServerjsonObject = new JSONObject();
				sendServerjsonObject.put("Host", filePropertiesBean.getRemoteHost());
				sendServerjsonObject.put("Port", filePropertiesBean.getRemotePort());
				sendServerjsonObject.put("User", filePropertiesBean.getSecurityPrincipal());
				sendServerjsonObject.put("Pass", filePropertiesBean.getSecurityCredentials());
				sendServerjsonObject.put("DestDir", filePropertiesBean.getRemoteDir());
				sendServerjsonObject.put("DestCtlDir", filePropertiesBean.getRemoteControlDir());
				interfaceFileSummary.setSendServerDetails(sendServerjsonObject.toJSONString());
				localServerjsonObject = new JSONObject();
				localServerjsonObject.put("Dir", filePropertiesBean.getLocalDir());
				localServerjsonObject.put("BkpDir", filePropertiesBean.getLocalBackupDir());
				localServerjsonObject.put("CtlDir", filePropertiesBean.getLocalControlDir());
				localServerjsonObject.put("CtlBkpDir", filePropertiesBean.getLocalControlBackupDir());
				interfaceFileSummary.setLocalServerDetails(localServerjsonObject.toJSONString());
				interfaceFileSummary = integrationManagementLocal.createInterfaceFileSummary(interfaceFileSummary);
				for(FileBean fileBean : filePropertiesBean.getFiles())
				{
					if(fileCount == null)
					{
						query= entityManager.createQuery(" from " + InterfaceFileSummaryDetails.class.getCanonicalName() +" where file_name_v LIKE '"+fileBean.getFileName()+fileDate+"%' order by 1 desc");
						fileSummaryDetailsList = query.getResultList();
						if(fileSummaryDetailsList.size()!=0)
						{
							fileNameDb=fileSummaryDetailsList.iterator().next().getFileName();
							fileCount=fileNameDb.substring(fileNameDb.lastIndexOf("_")+1, fileNameDb.lastIndexOf("."));
							count = Integer.valueOf(fileCount);
							fileCount = String.format("%03d", (count+1));
						}
						else
							fileCount = "001";
					}
					fileSummaryDetails = new InterfaceFileSummaryDetails();
					fileSummaryDetails.setControlFileName("");
					fileSummaryDetails.setFileName(fileBean.getFileName()+fileDate+"_"+fileCount+"."+filePropertiesBean.getRemoteFileFormat());
					fileSummaryDetails.setFileType(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
					fileSummaryDetails.setInterfaceFileSummary(interfaceFileSummary);
					fileSummaryDetails.setTotalCount(0L);
					fileSummaryDetails.setSuccessCount(0L);
					fileSummaryDetails.setErrorCount(0L);
					fileSummaryDetails = integrationManagementLocal.createInterfaceFileSummaryDetails(fileSummaryDetails);
					if(IntegrationConstants.INVENTORY_SALES_FILE_NAME.equals(fileBean.getFileName()) || IntegrationConstants.STOCK_TAKING_FILE_NAME.equals(fileBean.getFileName()) || IntegrationConstants.AUDIT_FILE_NAME.equals(fileBean.getFileName()))
					{
						firstFileId = fileSummaryDetails.getFileDetailsId();
						firstFileName = fileSummaryDetails.getFileName();
						firstFileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+firstFileName);
						firstOutputStreamWriter = new OutputStreamWriter(firstFileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
						firstOutputStreamWriter.write(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.FIRST_FILE_HEADER_ATTR));
						firstOutputStreamWriter.write("\n");
					}
					else
					{
						secondFileId = fileSummaryDetails.getFileDetailsId();
						secondFileName = fileSummaryDetails.getFileName();
						secondFileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+secondFileName);
						secondOutputStreamWriter = new OutputStreamWriter(secondFileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
						secondOutputStreamWriter.write(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.SECOND_FILE_HEADER_ATTR));
						secondOutputStreamWriter.write("\n");
					}
				}
			}
			else
			{
				fileSummaryDetailsSet = interfaceFileSummary.getFileSummaryDetails();
				for(InterfaceFileSummaryDetails interfaceFileSummaryDetails : fileSummaryDetailsSet)
				{
					if(interfaceFileSummaryDetails.getFileName().contains(IntegrationConstants.INVENTORY_SALES_FILE_NAME) || interfaceFileSummaryDetails.getFileName().contains(IntegrationConstants.STOCK_TAKING_FILE_NAME) || interfaceFileSummaryDetails.getFileName().contains(IntegrationConstants.AUDIT_FILE_NAME))
					{
						firstFileId = interfaceFileSummaryDetails.getFileDetailsId();
						firstFileName = interfaceFileSummaryDetails.getFileName();
						firstFileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+interfaceFileSummaryDetails.getFileName(), true);
						firstOutputStreamWriter = new OutputStreamWriter(firstFileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
						firstTotalCount = interfaceFileSummaryDetails.getTotalCount();
					}
					else
					{
						secondFileId = interfaceFileSummaryDetails.getFileDetailsId();
						secondFileName = interfaceFileSummaryDetails.getFileName();
						secondFileOutputStream = new FileOutputStream(filePropertiesBean.getLocalDir()+"/"+interfaceFileSummaryDetails.getFileName(),true);
						secondOutputStreamWriter = new OutputStreamWriter(secondFileOutputStream,IntegrationConstants.FILE_ENCODE_FORMAT);
						secondTotalCount = interfaceFileSummaryDetails.getTotalCount();
					}
				}
			}
			for(InterfaceSummary interfaceSummary : interfaceSummaryList)
			{
				reqRecord = null;
				firstLocalCount = 0L;
				//				TLogger.debug("request Data--->"+byteToString(interfaceSummary.getRequestData()));
				//				TLogger.debug("request Data size--->"+byteToString(interfaceSummary.getRequestData()).split(IntegrationConstants.NEXT_RECORD_DELIMITER));
				for(String record : new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).split(IntegrationConstants.NEXT_RECORD_DELIMITER))
				{
					if(record.contains(".csv"))
					{
						fileName = record.substring(0, record.indexOf(".csv"));
						reqRecord = record.substring(record.indexOf(".csv") + 5);
						if(!"".equals(reqRecord))
						{
							if(firstFileName.contains(fileName))
							{
								firstOutputStreamWriter.write(reqRecord.replaceAll("\r\n", ""));
								firstOutputStreamWriter.write("\n");
								firstTotalCount += reqRecord.split("\n").length;
								firstLocalCount += reqRecord.split("\n").length;
							}
							else
							{
								secondOutputStreamWriter.write(reqRecord.replaceAll("\r\n", ""));
								secondOutputStreamWriter.write("\n");
								secondTotalCount += reqRecord.split("\n").length;
							}
						}
					}
				}
				interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.PROCESSED_STATUS));
				interfaceSummary.setReferenceData3(interfaceFileSummary.getFileId());
				interfaceSummary.setReferenceData4(firstLocalCount);
				integrationManagementLocal.updateInterfaceSummary(interfaceSummary);
			}
			if(firstOutputStreamWriter != null)
				firstOutputStreamWriter.close();
			if(secondOutputStreamWriter != null)
				secondOutputStreamWriter.close();
			if(firstFileId != null)
				createControlFile(filePropertiesBean.getLocalDir()+"/"+firstFileName, firstTotalCount, firstFileName.substring(0, (firstFileName.lastIndexOf("."))), filePropertiesBean.getRemoteFileFormat(), firstFileId, filePropertiesBean.getControlFileFormat(), filePropertiesBean.getLocalControlDir());
			if(secondFileId != null)
				createControlFile(filePropertiesBean.getLocalDir()+"/"+secondFileName, secondTotalCount, secondFileName.substring(0, (secondFileName.lastIndexOf("."))), filePropertiesBean.getRemoteFileFormat(), secondFileId, filePropertiesBean.getControlFileFormat(), filePropertiesBean.getLocalControlDir());
			interfaceFileSummary.setTotalCount(interfaceFileSummary.getTotalCount()+interfaceSummaryList.size());
			interfaceFileSummary = integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);
			return interfaceFileSummary;
		}
		catch(NullPointerException nullPointerException)
		{
			TLogger.error("NullPointerException :: "+nullPointerException.getMessage(),nullPointerException);
			throw new IntegrationManagement.PrepareFileException(nullPointerException.getMessage(), nullPointerException);
		} 
		catch (IOException ioException) 
		{
			TLogger.error("IoException :: "+ioException.getMessage(),ioException);
			throw new IntegrationManagement.PrepareFileException(ioException.getMessage(),ioException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: "+exception.getMessage(),exception);
			throw new IntegrationManagement.PrepareFileException(exception.getMessage(),exception);
		}
		finally
		{
			interfaceFileSummary = null;
			fileSummaryDetails = null;
			fileSummaryDetailsSet = null;
			interfaceFileSummaries = null;
			sendServerjsonObject = null;
			localServerjsonObject = null;
			dateFormat = null;
			firstFileName = null;
			secondFileName = null;
			fileCount = null;
			fileDate = null;
			fileName = null;
			count = null;
			firstTotalCount = null;
			secondTotalCount = null;
			firstFileId = null;
			secondFileId = null;
			c = null;
			c1 = null;
			reqRecord = null;
			try 
			{

				//				if(firstFileOutputStream != null)
				//				{
				//					firstFileOutputStream.close();
				//				}
				if(firstOutputStreamWriter != null)
					firstOutputStreamWriter.close();
				//				if(secondFileOutputStream != null)
				//				{
				//					secondFileOutputStream.close();
				//				}
				if(secondOutputStreamWriter != null)
					secondOutputStreamWriter.close();
			} 
			catch (IOException ioException) 
			{
				TLogger.error("IoException :: " + ioException.getMessage(), ioException);
				throw new IntegrationManagement.PrepareFileException(ioException.getMessage(), ioException);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit writeToLocalFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

		}
	}

	/**
	 * @author Parthipan Rajagopal
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *     1. Read a file total record count file name, file format, file id, control file format and control file path as parameter
	 *     2. Find MD5 hash key
	 *     3. create new file and write control file information in new file
	 * </pre>
	 * 
	 * @param file
	 * @param totalCount
	 * @param fileFormat
	 * @param currentFileId
	 * @param contolFileFormat 
	 * @param contolFilePath 
	 * @param fileName.
	 * @throws ApplicationException 
	 * 
	 */
	@RolesAllowed("default")
	public void createControlFile(String filePath, Long totalCount, String fileName, String fileFormat, Long currentFileId, String contolFileFormat, String contolFilePath) throws ApplicationException 
	{

		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry createControlFile.. Started at --> "+ new Date());
		}


		File controlFile = null;
		FileOutputStream fileOutputStream = null;
		OutputStreamWriter outputStreamWriter = null;
		String ctrlFileFinalName = null;
		MessageDigest md = null;
		FileInputStream fis = null;
		String data = null;
		InterfaceFileSummaryDetails interfaceFileSummaryDetails = null;
		File file = null;
		try
		{
			TLogger.debug("createControlFile service received filePath	-->"+filePath+"totalCount-->"+totalCount+"fileName-->"+fileName+"fileFormat-->"+fileFormat+"currentFileId-->"+currentFileId+"contolFileFormat-->"+contolFileFormat+"contolFilePath-->"+contolFilePath);
			file = new File(filePath);
			md = MessageDigest.getInstance("MD5");
			fis = new FileInputStream(file);

			byte[] dataBytes = new byte[1024];

			int nread = 0;
			while ((nread = fis.read(dataBytes)) != -1) 
			{
				md.update(dataBytes, 0, nread);
			}

			byte[] mdbytes = md.digest();
			StringBuffer sb = new StringBuffer();

			for (int i = 0; i < mdbytes.length; i++) 
			{
				sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
			}

			ctrlFileFinalName = contolFilePath + File.separator +fileName +"." + contolFileFormat;
			controlFile = new File(ctrlFileFinalName);
			fileOutputStream = new FileOutputStream(controlFile, false);
			outputStreamWriter = new OutputStreamWriter(fileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
			data = format1.format(new Date())+IntegrationConstants.CONTROL_FILE_DELIMETER+countLines(file)+IntegrationConstants.CONTROL_FILE_DELIMETER+file.length()+IntegrationConstants.CONTROL_FILE_DELIMETER+sb.toString()+IntegrationConstants.CONTROL_FILE_DELIMETER+fileName+"."+fileFormat;
			outputStreamWriter.write(data);
			interfaceFileSummaryDetails = entityManager.find(InterfaceFileSummaryDetails.class, currentFileId);
			interfaceFileSummaryDetails.setControlFileName(ctrlFileFinalName.substring(ctrlFileFinalName.lastIndexOf(File.separator)+1));
			interfaceFileSummaryDetails.setFileName(file.getName());
			interfaceFileSummaryDetails.setTotalCount(totalCount);
			integrationManagementLocal.updateInterfaceFileSummaryDetails(interfaceFileSummaryDetails);
			outputStreamWriter.close();
			//			entityManager.flush();
		}
		catch(Exception e)
		{
			TLogger.error("[unhandled exception] "+e.getMessage(),e);
			throw new IntegrationManagement.PrepareFileException(e.getMessage(),e);
		}
		finally
		{
			controlFile = null;
			ctrlFileFinalName = null;
			md = null;
			data = null;
			interfaceFileSummaryDetails = null;
			file = null;

			try {
				if(outputStreamWriter != null)
					outputStreamWriter.close();
				if(fileOutputStream != null)
					fileOutputStream.close();
				if(fis != null)
					fis.close();
			} catch (IOException ioException) 
			{
				TLogger.error("[ioException] "+ioException.getMessage(),ioException);
				throw new IntegrationManagement.PrepareFileException(ioException.getMessage(),ioException);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit control file creation service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Jeevan s
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Prepare the query for read by fileId.
	 *     2. Set the fileId to the query parameter.
	 *     3. Get the results and store in a List.
	 *     4. Return the List.
	 * </pre>
	 * @param fileId
	 * @return InterfaceFileSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public InterfaceFileSummary getInterfaceFileSummary(Long fileId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry getInterfaceFileSummary.. Started at --> "+ new Date());
		//		}

		InterfaceFileSummary interfaceFileSummary = null;

		try
		{
			//TLogger.debug("getInterfaceFileSummary service received file id-->"+fileId);
			if(fileId == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.GetInterfaceFileSummaryException("FileId should not be empty..", null);
			}

			interfaceFileSummary = entityManager.find(InterfaceFileSummary.class, fileId);

			return interfaceFileSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceFileSummary =null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit getInterfaceFileSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	}

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFileSummary> getInterfaceFileSummaryByInterfaceIdAndStatus(Long interfaceId, Long statusId, Long partnerId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryByInterfaceIdAndStatus.. Started at --> "+ new Date());
		}


		Query query = null;
		List<InterfaceFileSummary> fileSummaryList = null;

		try
		{
			TLogger.debug("getInterfaceFileSummaryByInterfaceIdAndStatus service received interface id-->"+interfaceId+"statusId-->"+statusId);
			if(interfaceId == null || statusId == null)
			{
				TLogger.error("interfaceId or statusId should not be empty..");
				throw new IntegrationManagement.GetInterfaceFileSummaryException("interfaceId or statusId should not be empty..", null);
			}
			if(partnerId != null)
			{
				query = entityManager.createQuery("from " + InterfaceFileSummary.class.getCanonicalName() + " where interfaces = :interfaces and status=:status and uploadedBy=:uploadedBy order by 1");
				query.setParameter("interfaces",entityManager.find(Interfaces.class, interfaceId));
				query.setParameter("status",entityManager.find(Status.class, statusId));
				query.setParameter("uploadedBy",partnerId);
			}
			else
			{
				query = entityManager.createQuery("from " + InterfaceFileSummary.class.getCanonicalName() + " where interfaces = :interfaces and status=:status order by 1");
				query.setParameter("interfaces",entityManager.find(Interfaces.class, interfaceId));
				query.setParameter("status",entityManager.find(Status.class, statusId));
			}
			fileSummaryList = query.getResultList();

			return fileSummaryList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			fileSummaryList = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryByInterfaceIdAndStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}


	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFileSummary> getInterfaceFileSummaryByInterfaceId(Long interfaceId) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*	if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryByInterfaceIdAndStatus.. Started at --> "+ new Date());
		}*/
		Query query = null;
		List<InterfaceFileSummary> fileSummaryList = null;
		try
		{
			//TLogger.debug("getInterfaceFileSummaryByInterfaceId service received interface id-->"+interfaceId);
			if(interfaceId == null )
			{
				TLogger.error("interfaceId or statusId should not be empty..");
				throw new IntegrationManagement.GetInterfaceFileSummaryException("interfaceId or statusId should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceFileSummary.class.getCanonicalName() + " where interfaces = :interfaces order by file_id_n desc");
			query.setParameter("interfaces",entityManager.find(Interfaces.class, interfaceId));
			fileSummaryList = query.getResultList();
			return fileSummaryList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			fileSummaryList = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryByInterfaceIdAndStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}
	/**
	 * @author Jeevan s
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceFileSummary parameter from the request.
	 *     2. If the interfaceFileSummary is empty then throw an exception.
	 *     3. If the fileId is empty then throw an exception.
	 *     3. If the fileName is empty then throw an exception.
	 *     4. If the LookUp is empty then throw an exception.
	 *     5. If the status is empty then throw an exception.
	 *     7. If the totalCount is empty then throw an exception.
	 *     8. If the errorCount is empty then throw an exception.
	 *     9. If the uploadedOn is empty then throw an exception.
	 *    10. If the uploadedBy is empty then throw an exception.
	 *    11. If the message is empty then throw an exception.
	 *    12 . Otherwise Set the values into the interfaceFileSummary object.
	 *    13. Persist the interfaceFileSummary object.
	 *    14. Return the InterfaceFileSummary object.
	 * </pre>
	 * @param interfaceFileSummary
	 * @return newInterfaceFileSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceFileSummary updateInterfaceFileSummary(InterfaceFileSummary interfaceFileSummary) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		//		if(TLogger.debugIsEnabled())
		//		{
		//			TLogger.debug("Entry updateInterfaceFileSummary.. Started at --> "+ new Date());
		//		}

		InterfaceFileSummary existingInterfaceFileSummary = null;
		Status status = null;

		try
		{
			if(interfaceFileSummary == null)
			{
				TLogger.error("InterfaceFileSummary object should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("InterfaceFileSummary object should not be empty..", null);
			}
			if(interfaceFileSummary.getFileId() == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("FileId  should not be empty..", null);
			}

			//TLogger.debug("updateInterfaceFileSummary service received interfaceFileSummary object for file id-->"+interfaceFileSummary.getFileId());
			existingInterfaceFileSummary = getInterfaceFileSummary(interfaceFileSummary.getFileId());
			if(existingInterfaceFileSummary == null)
			{
				TLogger.error("InterfaceFileSummary object does not exist..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("InterfaceFileSummary object does not exist..", null);
			}

			if(interfaceFileSummary.getFileName() == null)
			{
				TLogger.error("FileName should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("FileName should not be empty..", null);
			}

			existingInterfaceFileSummary.setFileName(interfaceFileSummary.getFileName());
			existingInterfaceFileSummary.setInterfaces(getInterfaceById(interfaceFileSummary.getInterfaces().getInterfaceId()));

			if(interfaceFileSummary.getTotalCount() == null)
			{
				TLogger.error("TotalCount should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("TotalCount should not be empty..", null);
			}
			TLogger.debug("total count-->"+interfaceFileSummary.getTotalCount()+"File ID : "+interfaceFileSummary.getFileId());
			existingInterfaceFileSummary.setTotalCount(interfaceFileSummary.getTotalCount());

			if(interfaceFileSummary.getSuccessCount() != null)
			{
				existingInterfaceFileSummary.setSuccessCount(interfaceFileSummary.getSuccessCount());
			}

			if(interfaceFileSummary.getErrorCount() != null)
			{
				existingInterfaceFileSummary.setErrorCount(interfaceFileSummary.getErrorCount());
			}

			if(interfaceFileSummary.getUploadedBy() != null)
			{
				existingInterfaceFileSummary.setUploadedBy(interfaceFileSummary.getUploadedBy());
			}

			if(interfaceFileSummary.getUploadedOn() != null)
			{
				existingInterfaceFileSummary.setUploadedOn(interfaceFileSummary.getUploadedOn());
			}

			if(interfaceFileSummary.getStatus() == null || interfaceFileSummary.getStatus().getStatusId() == null)
			{
				TLogger.error("StatusId should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("StatusId should not be empty..", null);
			}

			status = entityManager.find(Status.class,interfaceFileSummary.getStatus().getStatusId());
			if(status == null)
			{
				TLogger.error("Status does not exist for the statusId : " + interfaceFileSummary.getStatus().getStatusId());
				throw new IntegrationManagement.UpdateInterfaceFileSummaryException("Status does not exist for the statusId : " + interfaceFileSummary.getStatus().getStatusId(), null);
			}

			existingInterfaceFileSummary.setStatus(status);

			if(interfaceFileSummary.getMessage() != null)
			{
				existingInterfaceFileSummary.setMessage(interfaceFileSummary.getMessage());
			}

			if(interfaceFileSummary.getErrorMessage() != null)
			{
				existingInterfaceFileSummary.setErrorMessage(interfaceFileSummary.getErrorMessage());
			}

			if(interfaceFileSummary.getValidatedOn() != null)
			{
				existingInterfaceFileSummary.setValidatedOn(interfaceFileSummary.getValidatedOn());
			}

			if(interfaceFileSummary.getProcessedOn() != null)
			{
				existingInterfaceFileSummary.setProcessedOn(interfaceFileSummary.getProcessedOn());
			}
			//			entityManager.refresh(existingInterfaceFileSummary, LockModeType.PESSIMISTIC_WRITE);
			entityManager.flush();
			/*if(existingInterfaceFileSummary != null)
				TLogger.debug("Updated file id--->"+existingInterfaceFileSummary.getFileId());*/
			return existingInterfaceFileSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			existingInterfaceFileSummary = null;
			status = null;

			//			if(TLogger.debugIsEnabled())
			//			{
			//				TLogger.debug("Exit updateInterfaceFileSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			//			}
			//			startTime = null;
		}
	}

	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceFileSummaryDetails updateInterfaceFileSummaryDetails(InterfaceFileSummaryDetails interfaceFileSummaryDetails) throws ApplicationException
	{
		InterfaceFileSummaryDetails existingInterfaceFileSummaryDetails = null;
		//TLogger.debug("Entry updateInterfaceFileSummaryDetails.. Started at --> "+ new Date());
		try
		{
			if(interfaceFileSummaryDetails == null)
			{
				TLogger.error("InterfaceFileSummary object should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("InterfaceFileSummary object should not be empty..", null);
			}
			if(interfaceFileSummaryDetails.getFileDetailsId() == null)
			{
				TLogger.error("FileDetailsId should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("FileDetailsId  should not be empty..", null);
			}

			TLogger.debug("updateInterfaceFileSummaryDetails service received interfaceFileSummaryDetails object for file details id-->"+interfaceFileSummaryDetails.getFileDetailsId());
			existingInterfaceFileSummaryDetails = entityManager.find(InterfaceFileSummaryDetails.class, interfaceFileSummaryDetails.getFileDetailsId());
			if(existingInterfaceFileSummaryDetails == null)
			{
				TLogger.error("InterfaceFileSummaryDetails object does not exist..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("InterfaceFileSummaryDetails object does not exist..", null);
			}
			if(existingInterfaceFileSummaryDetails.getFileName() == null)
			{
				TLogger.error("FileName should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("FileName should not be empty..", null);
			}
			existingInterfaceFileSummaryDetails.setFileName(interfaceFileSummaryDetails.getFileName());
			existingInterfaceFileSummaryDetails.setControlFileName(interfaceFileSummaryDetails.getControlFileName());
			existingInterfaceFileSummaryDetails.setTotalCount(interfaceFileSummaryDetails.getTotalCount());
			if(interfaceFileSummaryDetails.getSuccessCount() != null)
			{
				existingInterfaceFileSummaryDetails.setSuccessCount(interfaceFileSummaryDetails.getSuccessCount());
			}
			if(interfaceFileSummaryDetails.getErrorCount() != null)
			{
				existingInterfaceFileSummaryDetails.setErrorCount(interfaceFileSummaryDetails.getErrorCount());
			}
			if(interfaceFileSummaryDetails.getFileType() != null)
			{
				existingInterfaceFileSummaryDetails.setFileType(interfaceFileSummaryDetails.getFileType());
			}
			entityManager.flush();
			return existingInterfaceFileSummaryDetails;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceFileSummaryDetailsException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			existingInterfaceFileSummaryDetails = null;
			//TLogger.debug("Exit updateInterfaceFileSummaryDetails.. Exit at --> "+ new Date());
		}
	}


	/**
	 * @author Jeevan s
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceFileSummary parameter from the request.
	 *     2. If the interfaceFileSummary is empty then throw an exception.
	 *     3. If the fileName is empty then throw an exception.
	 *     4. If the LookUp is empty then throw an exception.
	 *     5. If the status is empty then throw an exception.
	 *     6. If the totalCount is empty then throw an exception.
	 *     7. Otherwise Set the values into the interfaceFileSummary object.
	 *     8. Persist the interfaceFileSummary object.
	 *     9. Return the InterfaceFileSummary object.
	 * </pre>
	 * @param interfaceFileSummary
	 * @return newInterfaceFileSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceFileSummary createInterfaceFileSummary(InterfaceFileSummary interfaceFileSummary) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry createInterfaceFileSummary.. Started at --> "+ new Date());
		}

		InterfaceFileSummary newInterfaceFileSummary = null;
		Status status = null;

		try
		{
			if(interfaceFileSummary == null)
			{
				TLogger.error("interfaceFileSummary object should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryException("InterfaceFileSummary object should not be empty..", null);
			}
			TLogger.debug("createInterfaceFileSummary service received interfaceFileSummary for file id-->"+interfaceFileSummary.getFileId());
			newInterfaceFileSummary = new InterfaceFileSummary();

			if(interfaceFileSummary.getFileName() == null)
			{
				TLogger.error("FileName should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryException("FileName should not be empty..", null);
			}

			newInterfaceFileSummary.setFileName(interfaceFileSummary.getFileName());
			newInterfaceFileSummary.setInterfaces(getInterfaceById(interfaceFileSummary.getInterfaces().getInterfaceId()));

			if(interfaceFileSummary.getStatus() == null || interfaceFileSummary.getStatus().getStatusId() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryException("Status should not be empty..", null);
			}

			status=entityManager.find(Status.class,interfaceFileSummary.getStatus().getStatusId());
			if(status == null)
			{
				TLogger.error("Status does not exist for the statusId : " + interfaceFileSummary.getStatus().getStatusId());
				throw new IntegrationManagement.CreateInterfaceFileSummaryException("Status does not exist for the statusId : " + interfaceFileSummary.getStatus().getStatusId(), null);
			}

			newInterfaceFileSummary.setStatus(status);

			if(interfaceFileSummary.getTotalCount() == null)
			{
				TLogger.error("TotalCount should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryException("TotalCount should not be empty..", null);
			}

			newInterfaceFileSummary.setTotalCount(interfaceFileSummary.getTotalCount());
			newInterfaceFileSummary.setSuccessCount(interfaceFileSummary.getSuccessCount());
			newInterfaceFileSummary.setErrorCount(interfaceFileSummary.getErrorCount());
			newInterfaceFileSummary.setMessage(interfaceFileSummary.getMessage());
			newInterfaceFileSummary.setUploadedBy(interfaceFileSummary.getUploadedBy());
			newInterfaceFileSummary.setUploadedOn(interfaceFileSummary.getUploadedOn());
			newInterfaceFileSummary.setValidatedOn(interfaceFileSummary.getValidatedOn());
			newInterfaceFileSummary.setProcessedOn(interfaceFileSummary.getProcessedOn());
			newInterfaceFileSummary.setReceivedServerDetails(interfaceFileSummary.getReceivedServerDetails());
			newInterfaceFileSummary.setSendServerDetails(interfaceFileSummary.getSendServerDetails());
			newInterfaceFileSummary.setLocalServerDetails(interfaceFileSummary.getLocalServerDetails());
			entityManager.persist(newInterfaceFileSummary);
			entityManager.flush();

			return newInterfaceFileSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newInterfaceFileSummary = null;
			status = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit createInterfaceFileSummary service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Parthipan R
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given interfaceFileSummaryDetails parameter from the request.
	 *     2. If the interfaceFileSummaryDetails is empty then throw an exception.
	 *     3. If the fileName is empty then throw an exception.
	 *     7. Otherwise Set the values into the interfaceFileSummaryDetails object.
	 *     8. insert interfaceFileSummaryDetails object.
	 *     9. Return the InterfaceFileSummaryDetails object.
	 * </pre>
	 * @param interfaceFileSummary
	 * @return newInterfaceFileSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceFileSummaryDetails createInterfaceFileSummaryDetails(InterfaceFileSummaryDetails interfaceFileSummaryDetails) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry createInterfaceFileSummaryDetails.. Started at --> "+ new Date());
		}*/

		InterfaceFileSummaryDetails newInterfaceFileSummaryDetails = null;

		try
		{
			if(interfaceFileSummaryDetails == null)
			{
				TLogger.error("interfaceFileSummaryDetails object should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryDetailsException("interfaceFileSummaryDetails object should not be empty..", null);
			}

			//TLogger.debug("createInterfaceFileSummaryDetails service received interfaceFileSummaryDetails for FileDetailsId-->"+interfaceFileSummaryDetails.getFileDetailsId());

			newInterfaceFileSummaryDetails = new InterfaceFileSummaryDetails();

			if(interfaceFileSummaryDetails.getFileName() == null)
			{
				TLogger.error("FileName should not be empty..");
				throw new IntegrationManagement.CreateInterfaceFileSummaryDetailsException("FileName should not be empty..", null);
			}

			newInterfaceFileSummaryDetails.setFileName(interfaceFileSummaryDetails.getFileName());
			newInterfaceFileSummaryDetails.setControlFileName(interfaceFileSummaryDetails.getControlFileName());
			newInterfaceFileSummaryDetails.setFileType(interfaceFileSummaryDetails.getFileType());
			newInterfaceFileSummaryDetails.setInterfaceFileSummary(getInterfaceFileSummary(interfaceFileSummaryDetails.getInterfaceFileSummary().getFileId()));

			newInterfaceFileSummaryDetails.setTotalCount(interfaceFileSummaryDetails.getTotalCount());
			newInterfaceFileSummaryDetails.setSuccessCount(interfaceFileSummaryDetails.getSuccessCount());
			newInterfaceFileSummaryDetails.setErrorCount(interfaceFileSummaryDetails.getErrorCount());

			entityManager.persist(newInterfaceFileSummaryDetails);
			entityManager.flush();

			return newInterfaceFileSummaryDetails;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateInterfaceFileSummaryDetailsException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateInterfaceFileSummaryDetailsException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateInterfaceFileSummaryDetailsException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newInterfaceFileSummaryDetails = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit createInterfaceFileSummaryDetails service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;

		}
	}

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFileSummaryDetails> getInterfaceFileSummaryDetails(Long fileId) throws ApplicationException
	{

		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetails.. Started at --> "+ new Date());
		}*/

		Query query = null;
		List<InterfaceFileSummaryDetails> fileSummaryList = null;

		try
		{
			//TLogger.debug("getInterfaceFileSummaryDetails service received file id-->"+fileId);
			if(fileId == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.GetInterfaceFileSummaryException("FileId should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceFileSummaryDetails.class.getCanonicalName() + " where interfaceFileSummary = :fileId order by fileDetailsId");
			query.setParameter("fileId",entityManager.find(InterfaceFileSummary.class, fileId));
			fileSummaryList = query.getResultList();
			return fileSummaryList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			fileSummaryList = null;

			/*	if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetails service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}

	}

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public String getInterfaceFileSummaryDetailsByFileId(Long fileId) throws ApplicationException
	{

		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetails.. Started at --> "+ new Date());
		}*/

		Query query = null;
		List<InterfaceFileSummaryDetails> fileSummaryList = null;
		Map<String,Object> interfaceMap = null;
		List<Map<String,Object>> interfacesList = null;
		JSONObject jsonObject = null;
		Long status = null;
		JSONObject sendServerjsonObject = null;
		JSONParser jsonParser = null;
		try
		{
			//TLogger.debug("getInterfaceFileSummaryDetails service received file id-->"+fileId);
			if(fileId == null)
			{
				TLogger.error("FileId should not be empty..");
				throw new IntegrationManagement.GetInterfaceFileSummaryException("FileId should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceFileSummaryDetails.class.getCanonicalName() + " where interfaceFileSummary = :fileId order by fileDetailsId");
			query.setParameter("fileId",entityManager.find(InterfaceFileSummary.class, fileId));
			fileSummaryList = query.getResultList();
			jsonParser = new JSONParser();

			interfacesList = new ArrayList<Map<String,Object>>();

			for(InterfaceFileSummaryDetails interfaceFileSummaryDetails : fileSummaryList)
			{
				interfaceMap = new HashMap<String, Object>();
				interfaceMap.put("id", interfaceFileSummaryDetails.getFileDetailsId() != null ?String.valueOf(interfaceFileSummaryDetails.getFileDetailsId()):"");
				interfaceMap.put("actualFileName", interfaceFileSummaryDetails.getFileName() != null ?String.valueOf(interfaceFileSummaryDetails.getFileName()):"");
				interfaceMap.put("controlFileName", interfaceFileSummaryDetails.getControlFileName() != null ?String.valueOf(interfaceFileSummaryDetails.getControlFileName()) : "");
				interfaceMap.put("totalCount", interfaceFileSummaryDetails.getTotalCount() != null ?String.valueOf(interfaceFileSummaryDetails.getTotalCount()):"0");
				interfaceMap.put("errorCount", interfaceFileSummaryDetails.getErrorCount() != null ?String.valueOf(interfaceFileSummaryDetails.getErrorCount()):"0");
				interfaceMap.put("successCount",interfaceFileSummaryDetails.getSuccessCount() != null ?String.valueOf(interfaceFileSummaryDetails.getSuccessCount()):"0");
				interfaceMap.put("fileType",interfaceFileSummaryDetails.getFileType() != null ?String.valueOf(interfaceFileSummaryDetails.getFileType()):"");
				sendServerjsonObject = (JSONObject) jsonParser.parse(interfaceFileSummaryDetails.getInterfaceFileSummary().getLocalServerDetails());
				status = interfaceFileSummaryDetails.getInterfaceFileSummary().getStatus().getStatusId();

				if("R".equalsIgnoreCase(interfaceFileSummaryDetails.getFileType()))
				{	
					if(status.equals(IntegrationConstants.FILE_RECEIVED_STATUS) || status.equals(IntegrationConstants.FILE_INQUEUE_STATUS))
					{
						interfaceMap.put("destDir",sendServerjsonObject.get("RejectedDir"));
					}
					else
					{
						interfaceMap.put("destDir",sendServerjsonObject.get("RejectedBkpDir"));
					}
				}
				else
				{	
					if(status.equals(IntegrationConstants.FILE_RECEIVED_STATUS) || status.equals(IntegrationConstants.FILE_INQUEUE_STATUS))
					{
						interfaceMap.put("destDir",sendServerjsonObject.get("Dir"));
					}
					else
					{
						interfaceMap.put("destDir",sendServerjsonObject.get("BkpDir"));
					}
				}
				interfacesList.add(interfaceMap);
			}

			jsonObject = new JSONObject();
			jsonObject.put("res_code", "100");
			jsonObject.put("result", interfacesList);
			return jsonObject.toString();


		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			fileSummaryList = null;
			interfaceMap = null;
			interfacesList = null;
			jsonObject = null;
			status = null;
			/*	if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetails service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}

	}
	/*private void processInterfaceSummary(InterfaceSummary interfaceSummary) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry processInterface summary: "+interfaceSummary.getTransactionId());
		}

		InitialContext context = null;
		DataPublisher dataPublisher = null;
		DataConverter dataConverter = null;
		try
		{
			if(IntegrationConstants.ASYNC_QUEUE_INTERFACE_TYPE.equals(interfaceSummary.getInterfaces().getInterfaceType()))
			{
				publishItem(interfaceSummary); 
			}
			else if(IntegrationConstants.ASYNC_WS_INTERFACE_TYPE.equals(interfaceSummary.getInterfaces().getInterfaceType()))
			{
				context = new InitialContext();
				dataPublisher = (DataPublisher) context.lookup(interfaceSummary.getInterfaces().getPublisher());
				dataConverter = (DataConverter) context.lookup(interfaceSummary.getInterfaces().getConverter());

				String convertedRequestData = dataConverter.processRequest(interfaceSummary.getInterfaces().getInterfaceId(), byteToString(interfaceSummary.getRequestData()));
				ResponseBean responseBean = dataPublisher.processRequest(interfaceSummary.getTransactionId(), convertedRequestData);
				if("Error".equalsIgnoreCase(responseBean.getStatus()))
				{
					responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
					responseBean.setTransactionId(interfaceSummary.getTransactionId());
					responseBean.setRetryCount(interfaceSummary.getRetryCount() + 1L); 
					integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
				}
				else
				{
					updateInterfaceSummaryByResponse(responseBean.getResponseData(), interfaceSummary.getTransactionId(), interfaceSummary.getInterfaces().getInterfaceId(), IntegrationConstants.RES_AVAILABLE_STATUS);
				}
			}
		}
		catch (Exception e)
		{
			TLogger.error(e.getMessage(), e);
			throw new ApplicationException(e.getMessage(), e.getCause());
		}
		finally
		{
			context = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processInterface summary: "+interfaceSummary.getTransactionId());
			}
		}
	}*/

	@RolesAllowed("default")
	public void createInterfaceSummariesByModule(InterfaceSummary interfaceSummary, Long moduleId, Long transactionType) throws ApplicationException
	{
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry create interface summaries by module");
		}*/
		Module module = null;
		try
		{
			module = entityManager.find(Module.class, moduleId);
			if(module == null)
			{
				throw new IntegrationManagement.GetModuleException("Module "+moduleId+" not found", null);
			}
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Module Id: "+module.getModuleId()+", size: "+module.getInterfaces().size());
			}*/

			for(Interfaces interfaces : module.getInterfaces())
			{
				if(interfaces.getTransactionType().equals(transactionType))
				{
					interfaceSummary.setInterfaces(interfaces);
					/*if(TLogger.debugIsEnabled())
					{
						TLogger.debug("interfaces: "+interfaces.getInterfaceId());
					}*/
					integrationManagementLocal.createInterfaceSummary(interfaceSummary);
				}
			}
		}
		catch (ApplicationException e)
		{
			throw e;
		}
		catch (Exception e) 
		{
			throw new ApplicationException(e.getMessage(), e.getCause());
		}
		finally
		{
			module = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit create interface summaries by module");
			}*/
		}

	}

	/**
	 * 
	 * @author Ramana Rao K
	 * <b> Algorithm </b>
	 * <pre>
	 *     1. Read the given  interfaceId parameter from the request.
	 *     2. Based on the given interface id, get all the interface attributes
	 *     3. Based on the fetched interface attributes prepares the FilePropertiesBean
	 *     4. Returns the FilePropertiesBean to the calling function
	 *     
	 * </pre>
	 *  @param interfaceId
	 *  @return FilePropertiesBean
	 *  @throws Exception
	 */
	@RolesAllowed("default")
	public FilePropertiesBean getFilePropertiesBean(Long interfaceId) throws Exception
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getFilePropertiesBean.. Started at --> "+ new Date());
		}*/
		FilePropertiesBean filePropertiesBean = null;
		Set<InterfaceAttribute> interfaceAttributeSet = null;

		try
		{
			//TLogger.debug("getFilePropertiesBean service received interface id-->"+interfaceId);
			if(interfaceId == null)
			{
				TLogger.error("Interface Id must be not null for getting the interface attributes");
				throw new Exception("Interface id must be not null");
			}
			filePropertiesBean = new FilePropertiesBean();
			interfaceAttributeSet = getInterfaceAttributes(interfaceId);
			if(interfaceAttributeSet == null || interfaceAttributeSet.isEmpty())
			{
				TLogger.debug("Unable to find the interface attributes for the interface id: "+interfaceId);
				throw new Exception("Interface id must be not null");
			}
			for(InterfaceAttribute interfaceAttribute :interfaceAttributeSet)
			{

				if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_FILE_ATTR))
				{
					filePropertiesBean.setFileName(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_FILE_FORMAT))
				{
					filePropertiesBean.setFileFormat(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CONTROL_FILE_NAME))
				{
					filePropertiesBean.setControlFileName(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CONTROL_FILE_FORMAT))
				{
					filePropertiesBean.setControlFileFormat(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_DIR_ATTR))
				{
					filePropertiesBean.setLocalDir(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_DIR_ATTR))
				{
					filePropertiesBean.setRemoteDir(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_CTRL_DIR_ATTR))
				{
					filePropertiesBean.setLocalControlDir(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_CTRL_DIR_ATTR))
				{
					filePropertiesBean.setRemoteControlDir(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_HOST_ATTR))
				{
					filePropertiesBean.setRemoteHost(interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_PORT_ATTR))
				{
					filePropertiesBean.setRemotePort(Integer.parseInt(interfaceAttribute.getValue()));
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_USER_ATTR))
				{
					filePropertiesBean.setSecurityPrincipal(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(interfaceAttribute.getValue()) : interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_PASSWORD_ATTR))
				{
					filePropertiesBean.setSecurityCredentials(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(interfaceAttribute.getValue()) : interfaceAttribute.getValue());
				}
				else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PPK_PATH_ATTR))
				{
					filePropertiesBean.setSecurityCredentialsPath(interfaceAttribute.getValue());
				}
			}

			return filePropertiesBean;
		}
		catch(Exception exception)
		{
			TLogger.error("Unable to get the file properties from the attributes "+exception.getMessage(),exception);
			throw exception;
		}
		finally
		{
			filePropertiesBean = null;
			interfaceAttributeSet = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getFilePropertiesBean service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *      1.	Read the list of interfaceIds input parameter.
	 *		2.	Read configured query for each interface and find child interfaces.
	 *		3.	calls prepareFileFromQueryResult method for generate file from query result.
	 *      4.  after successfull file creation it will update start date and end in attributes.
	 * </pre>
	 * 
	 * @param resultSet
	 * @param filesList
	 * @param recordsLimit.
	 * 
	 */
	@RolesAllowed("default") 
	public void pullDataToFile(List<Long> interfaceIds) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry pullDataToFile.. Started at --> "+ new Date());
		}

		TLogger.debug("pullDataToFile service received interface id-->"+interfaceIds);
		String startDate = null;
		String endDate = null;
		String fetchQuery = null;
		String cronExp = null;
		String jdbcDriver = null;
		String jdbcURL = null;
		String jdbcUser = null;
		String jdbcPassword = null;
		SimpleDateFormat dateFormat = null;
		Long recordsLimit = null;
		Connection conn = null;
		Statement stmt = null;
		ResultSet resultSet  = null;
		CronExpression cron = null;
		InterfaceAttribute startDateAttr = null;
		InterfaceAttribute endDateAttr = null;
		Interfaces interfaces = null;
		List<PullDataToFileBean> filesList = null;
		PullDataToFileBean genericFileQuery = null;
		InitialContext context = null;
		PullFromMongo pullFromMongo = null;
		PullFromExcel pullFromExcel = null;
		PullDataToFile pullDataToFile = null;
		Long sTime = null;

		try
		{
			if(interfaceIds == null || interfaceIds.isEmpty())
			{
				TLogger.error("interfaceIds should not null or empty", null);
				throw new IntegrationManagement.PullDataException("interfaceIds should not null or empty", null);
			}
			for(Long interfaceId : interfaceIds)
			{
				sTime = System.currentTimeMillis();
				TLogger.debug("Started pullDataToFile.. " + interfaceId + "  Started at --> "+ new Date());
				interfaces = entityManager.find(Interfaces.class, interfaceId);
				startDateAttr = null;
				endDateAttr = null;
				if(IntegrationConstants.ASYNC_PULL_DATA_TO_FILE_INTERFACE_LIST.contains(String.valueOf(interfaceId)) && interfaces.getSequence().equals(1L))
				{
					//					TLogger.debug("ASYNC_PULL_DATA_TO_FILE_INTERFACE_LIST mached");
					genericFileQuery = getPullDataToFileBean(interfaces.getInterfaceId());
					filesList = new ArrayList<PullDataToFileBean>();
					filesList.add(genericFileQuery);
					for(InterfaceAttribute attribute : interfaces.getAttributes())
					{
						if(IntegrationConstants.QUERY_ATTR.equalsIgnoreCase(attribute.getName()))
							fetchQuery = attribute.getValue();
						else if(IntegrationConstants.REQUEST_FILE_RECORD_LIMIT_ATTR.equalsIgnoreCase(attribute.getName()))
							recordsLimit = Long.parseLong(attribute.getValue());
						else if(IntegrationConstants.START_DATE_ATTR.equalsIgnoreCase(attribute.getName()))
						{
							startDate = attribute.getValue();
							startDateAttr = entityManager.find(InterfaceAttribute.class, attribute.getAttributeId());
						}
						else if(IntegrationConstants.END_DATE_ATTR.equalsIgnoreCase(attribute.getName()))
						{
							endDate = attribute.getValue();
							endDateAttr = entityManager.find(InterfaceAttribute.class, attribute.getAttributeId());
						}
						else if(IntegrationConstants.TIME_SCHEDULE_ATTR.equalsIgnoreCase(attribute.getName()))
							cronExp = attribute.getValue();
						else if(IntegrationConstants.CHILD_INTERFACE_ATTR.equalsIgnoreCase(attribute.getName()))
							filesList.add(getPullDataToFileBean(Long.valueOf(attribute.getValue())));
						else if(IntegrationConstants.JDBC_DRIVER_ATTR.equalsIgnoreCase(attribute.getName()))
							jdbcDriver = attribute.getValue();
						else if(IntegrationConstants.JDBC_URL_ATTR.equalsIgnoreCase(attribute.getName()))
							jdbcURL = attribute.getValue();
						else if(IntegrationConstants.JDBC_USER_ATTR.equalsIgnoreCase(attribute.getName()))
							jdbcUser = attribute.getValue();
						else if(IntegrationConstants.JDBC_PASS_ATTR.equalsIgnoreCase(attribute.getName()))
							jdbcPassword = attribute.getValue();
						else if(IntegrationConstants.DATE_FORMAT_ATTR.equalsIgnoreCase(attribute.getName()))
							dateFormat = new SimpleDateFormat(attribute.getValue());
					}
					Class.forName(jdbcDriver);
					conn = DriverManager.getConnection(jdbcURL, jdbcUser, jdbcPassword);
					stmt = conn.createStatement();
					if(new Date().compareTo(dateFormat !=null ? dateFormat.parse(endDate) : format.parse(endDate)) >= 0)
					{
						fetchQuery = fetchQuery.replaceAll(":startDate", "'"+startDate+"'");
						fetchQuery = fetchQuery.replaceAll(":endDate", "'"+endDate+"'");
						resultSet  = stmt.executeQuery(fetchQuery);
						prepareFileFromQueryResult(resultSet, filesList, recordsLimit);
						cron = new CronExpression(cronExp);
						//						startDateAttr = entityManager.find(InterfaceAttribute.class, getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.START_DATE_ATTR).getAttributeId());
						startDateAttr.setValue(endDate);
						//						endDateAttr = entityManager.find(InterfaceAttribute.class, getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.END_DATE_ATTR).getAttributeId());
						endDateAttr.setValue(dateFormat !=null ? dateFormat.format(cron.getNextValidTimeAfter(dateFormat.parse(endDate))): format.format(cron.getNextValidTimeAfter(format.parse(endDate))));
					}
				}
				if(IntegrationConstants.ASYNC_PULL_DATA_TO_FILE_FROM_MONGO_INTERFACE_LIST.contains(String.valueOf(interfaceId)) && interfaces.getSequence().equals(1L))
				{
					context = new InitialContext();					

					if(interfaces.getConverter() != null && !"".equals(interfaces.getConverter().trim()))
					{
						pullFromMongo = (PullFromMongo) context.lookup(interfaces.getConverter());

						if(pullFromMongo == null)
						{
							TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
							throw new IntegrationManagement.PublishInterfaceDataException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
						}

						TLogger.debug("[dataConverter] "+pullFromMongo.getClass());

						pullFromMongo.processRequest(interfaces.getInterfaceId());
					}
				}
				if(IntegrationConstants.ASYNC_PULL_DATA_TO_FILE_AND_PUSH_INTERFACE_LIST.contains(String.valueOf(interfaceId)) && interfaces.getSequence().equals(1L))
				{
					context = new InitialContext();					

					if(interfaces.getConverter() != null && !"".equals(interfaces.getConverter().trim()))
					{
						pullDataToFile = (PullDataToFile) context.lookup(interfaces.getConverter());

						if(pullDataToFile == null)
						{
							TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
							throw new IntegrationManagement.PublishInterfaceDataException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
						}

						TLogger.debug("[dataConverter] "+pullDataToFile.getClass());

						pullDataToFile.processRequest(interfaces.getInterfaceId(), null);
					}
				}
				if(IntegrationConstants.ASYNC_PULL_DATA_TO_FILE_FROM_EXCEL_INTERFACE_LIST.contains(String.valueOf(interfaceId)) && interfaces.getSequence().equals(1L))
				{
					context = new InitialContext();					
					if(interfaces.getConverter() != null && !"".equals(interfaces.getConverter().trim()))
					{
						pullFromExcel = (PullFromExcel) context.lookup(interfaces.getConverter());
						if(pullFromExcel == null)
						{
							TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
							throw new IntegrationManagement.PublishInterfaceDataException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
						}
						TLogger.debug("[dataConverter] "+pullFromExcel.getClass());
						pullFromExcel.processRequest(interfaces.getInterfaceId());
					}
				}

				TLogger.debug("Completed pullDataToFile.. " + interfaceId + "  Service at --> "+ new Date()+" --- and took "+(System.currentTimeMillis()-sTime)+" milliseconds");
			}
			//			entityManager.flush();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PullDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PullDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PullDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			startDate = null;
			endDate = null;
			fetchQuery = null;
			cronExp = null;
			jdbcDriver = null;
			jdbcURL = null;
			jdbcUser = null;
			jdbcPassword = null;
			recordsLimit = null;
			cron = null;
			startDateAttr = null;
			endDateAttr = null;
			filesList = null;
			genericFileQuery = null;
			context = null;
			pullFromMongo = null;
			dateFormat = null;
			pullDataToFile = null;
			sTime = null;

			try
			{
				if(resultSet != null)
					resultSet.close();
				if(stmt != null)
					stmt.close();
				if(conn != null)
					conn.close();
			}
			catch (Exception exception) 
			{
				TLogger.error("[exception] "+exception.getMessage(),exception);
				throw new IntegrationManagement.PullDataException(exception.getMessage(),exception);
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit pullData service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}

	}

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *      1.	Read the resultSet, filesList, recordsLimit as input parameters.
	 *		2.	Create a new file for each record in filesList.
	 *		3.	Write data to file based on configred fields and primary keys.
	 * </pre>
	 * 
	 * @param resultSet
	 * @param filesList
	 * @param recordsLimit.
	 * 
	 */
	@SuppressWarnings("unchecked")
	private void prepareFileFromQueryResult(ResultSet resultSet, List<PullDataToFileBean> filesList, Long recordsLimit) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry prepareFileFromQueryResult.. Started at --> "+ new Date());
		}
		String fileName = null;
		String finalName = null;
		//		String fileCounter = "001";
		File file = null;
		//		File newFile = null;
		FileOutputStream fileOutputStream = null;
		OutputStreamWriter outputStreamWriter = null;
		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceFileSummaryDetails interfaceFileSummaryDetails = null;
		Status status = null;
		Map<Long, List<String>> primaryMap = null;
		SimpleDateFormat dateFormat = null;
		List<String> primList = null;
		String record = null;
		StringBuilder primaryKey = null;
		JSONObject sendServerjsonObject = null;
		JSONObject localServerjsonObject = null;
		Query query= null;
		List<InterfaceFileSummaryDetails> fileSummaryDetailsList = null;
		String fileNameDb= null;
		String fileCount = null;
		Integer count = 0;
		try
		{
			TLogger.debug("prepareFileFromQueryResult service received resultSet-->"+resultSet+"filesList-->"+filesList+"recordsLimit-->"+recordsLimit);
			status = entityManager.find(Status.class, IntegrationConstants.FILE_INQUEUE_STATUS);
			int i = 0;
			for(PullDataToFileBean pullDataToFileBean : filesList)
			{
				if(pullDataToFileBean.getFileNameFormat() != null && !pullDataToFileBean.getFileNameFormat().isEmpty())
				{
					dateFormat = new SimpleDateFormat(pullDataToFileBean.getFileNameFormat());
					fileName =pullDataToFileBean.getFileName() +  "_" + dateFormat.format(new Date());
				}
				if(fileCount == null)
				{
					query= entityManager.createQuery(" from " + InterfaceFileSummaryDetails.class.getCanonicalName() +" where file_name_v LIKE '"+fileName+"%' order by 1 desc");
					fileSummaryDetailsList = query.getResultList();
					if(fileSummaryDetailsList.size()!=0)
					{
						fileNameDb=fileSummaryDetailsList.iterator().next().getFileName();
						fileCount=fileNameDb.substring(fileNameDb.lastIndexOf("_")+1, fileNameDb.lastIndexOf("."));
						count = Integer.valueOf(fileCount);
						fileCount = String.format("%03d", (count+1));
					}
					else
						fileCount = "001";
				}
				finalName = pullDataToFileBean.getFileLocation() + File.separator + fileName + "_" + fileCount + "." + pullDataToFileBean.getFileFormat();
				file = new File(finalName);
				if(i==0)
				{
					interfaceFileSummary = new InterfaceFileSummary();
					interfaceFileSummary.setFileName(file.getName());
					interfaceFileSummary.setInterfaces(entityManager.find(Interfaces.class, pullDataToFileBean.getInterfaceId()));
					interfaceFileSummary.setTotalCount(0L);
					interfaceFileSummary.setStatus(status);
					interfaceFileSummary.setProcessedOn(new Date());
					interfaceFileSummary.setUploadedBy(Long.parseLong(pullDataToFileBean.getUploadedBy()));
					interfaceFileSummary.setMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.FILES_CREATED));
					sendServerjsonObject = new JSONObject();
					sendServerjsonObject.put("Host", pullDataToFileBean.getRemoteHost());
					sendServerjsonObject.put("Port", pullDataToFileBean.getRemotePort());
					sendServerjsonObject.put("User", pullDataToFileBean.getRemoteUser());
					sendServerjsonObject.put("Pass", pullDataToFileBean.getRemotePassword());
					sendServerjsonObject.put("DestDir", pullDataToFileBean.getRemoteDir());
					sendServerjsonObject.put("DestCtlDir", pullDataToFileBean.getRemoteCtlDir());
					interfaceFileSummary.setSendServerDetails(sendServerjsonObject.toJSONString());
					localServerjsonObject = new JSONObject();
					localServerjsonObject.put("Dir", pullDataToFileBean.getFileLocation());
					localServerjsonObject.put("BkpDir", pullDataToFileBean.getLocalBkpDir());
					localServerjsonObject.put("CtlDir", pullDataToFileBean.getControlFileLocation());
					localServerjsonObject.put("CtlBkpDir", pullDataToFileBean.getLocalCtlBkpDir());
					interfaceFileSummary.setLocalServerDetails(localServerjsonObject.toJSONString());
					//					entityManager.persist(interfaceFileSummary);
					//					entityManager.flush();
					interfaceFileSummary = integrationManagementLocal.createInterfaceFileSummary(interfaceFileSummary);
				}
				interfaceFileSummaryDetails = new InterfaceFileSummaryDetails();
				interfaceFileSummaryDetails.setFileName(file.getAbsolutePath());
				interfaceFileSummaryDetails.setControlFileName("");
				interfaceFileSummaryDetails.setFileType(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
				interfaceFileSummaryDetails.setInterfaceFileSummary(interfaceFileSummary);
				//				entityManager.persist(interfaceFileSummaryDetails);
				//				entityManager.flush();
				interfaceFileSummaryDetails = integrationManagementLocal.createInterfaceFileSummaryDetails(interfaceFileSummaryDetails);
				record = pullDataToFileBean.getFileHeader() + System.getProperty("line.separator");
				fileOutputStream = new FileOutputStream(file, true);
				outputStreamWriter = new OutputStreamWriter(fileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
				outputStreamWriter.write(record);
				outputStreamWriter.close();
				//				fileOutputStream.close();
				pullDataToFileBean.setFileId(interfaceFileSummaryDetails.getFileDetailsId());
				pullDataToFileBean.setFileName(fileName);
				pullDataToFileBean.setFile(file);
				pullDataToFileBean.setTotalCount(0L);
				i++;
			}
			primaryMap = new HashMap<Long, List<String>>();
			while(resultSet.next())
			{
				for(PullDataToFileBean pullDataToFileBean : filesList)
				{
					record = null;
					primaryKey = new StringBuilder();
					if(pullDataToFileBean.getPrimaryKeys() != null && pullDataToFileBean.getPrimaryKeys().size() > 0)
					{
						for(int primCount = 0; primCount < pullDataToFileBean.getPrimaryKeys().size(); primCount++)
						{
							primaryKey.append(resultSet.getObject(pullDataToFileBean.getPrimaryKeys().get(primCount)));
							if(primCount < pullDataToFileBean.getPrimaryKeys().size() -1)
								primaryKey.append("_");
						}
						if(primaryMap.get(pullDataToFileBean.getInterfaceId()) == null)
						{
							primList = new ArrayList<String>();
							primList.add(primaryKey.toString());
							primaryMap.put(pullDataToFileBean.getInterfaceId(), primList);
							record = getString(resultSet, pullDataToFileBean.getFields(), pullDataToFileBean.getCsvDelimeter());
						}
						else
						{
							if(!primaryMap.get(pullDataToFileBean.getInterfaceId()).contains(primaryKey.toString()))
							{
								primaryMap.get(pullDataToFileBean.getInterfaceId()).add(primaryKey.toString());
								record = getString(resultSet, pullDataToFileBean.getFields(), pullDataToFileBean.getCsvDelimeter());
							}
						}
					}
					else
						record = getString(resultSet, pullDataToFileBean.getFields(), pullDataToFileBean.getCsvDelimeter());
					if(record != null)
					{
						record = record + System.getProperty("line.separator");
						fileOutputStream = new FileOutputStream(pullDataToFileBean.getFile(), true);
						outputStreamWriter = new OutputStreamWriter(fileOutputStream, IntegrationConstants.FILE_ENCODE_FORMAT);
						outputStreamWriter.write(record);
						pullDataToFileBean.setTotalCount(pullDataToFileBean.getTotalCount()+1);
						outputStreamWriter.close();
					}
				}
			}
			for(PullDataToFileBean pullDataToFileBean : filesList)
			{
				createControlFile(pullDataToFileBean.getFile().getPath(), pullDataToFileBean.getTotalCount(), pullDataToFileBean.getFileName() + "_" + fileCount, pullDataToFileBean.getFileFormat(), pullDataToFileBean.getFileId(), pullDataToFileBean.getControlFileFormat(), pullDataToFileBean.getControlFileLocation());
			}
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PullDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PullDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PullDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			fileName = null;
			finalName = null;
			file = null;
			interfaceFileSummary = null;
			status = null;
			primaryMap = null;
			dateFormat = null;
			primList = null;
			record = null;
			primaryKey = null;
			interfaceFileSummaryDetails = null;
			sendServerjsonObject = null;
			localServerjsonObject = null;
			query= null;
			fileSummaryDetailsList = null;
			fileNameDb= null;
			fileCount = null;
			count = 0;
			try
			{
				if(outputStreamWriter != null)
					outputStreamWriter.close();
			}
			catch (IOException ioException) 
			{
				TLogger.error("[ioException] "+ioException.getMessage(),ioException);
				throw new IntegrationManagement.PullDataException(ioException.getMessage(),ioException);
			}
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit prepareFileFromQueryResult service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *      1.	Read the resultSet, fields, csvDelimeter as input parameters.
	 *		2.	Fetch the corresponding fields from resultSet.
	 *		3.	Generate a string from fetched data by using delimeter.
	 *		4.	Returns String data.
	 * </pre>
	 * 
	 * @param resultSet
	 * @param fields
	 * @param csvDelimeter
	 * @return.
	 * 
	 */
	@RolesAllowed("default")
	private String getString(ResultSet resultSet, List<String> fields,String csvDelimeter) throws ApplicationException
	{

		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getString.. Started at --> "+ new Date());
		}*/
		StringBuilder result = null;
		Integer i = 0;
		try
		{
			//TLogger.debug("getString service received resultSet-->"+resultSet+"fields-->"+fields+"csvDelimeter-->"+csvDelimeter);
			result = new StringBuilder();
			for(String field : fields)
			{
				i++;
				result.append(resultSet.getObject(field) != null ? resultSet.getObject(field):"");
				if(i<fields.size())
					result.append(csvDelimeter);
			}
			return result.toString();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PullDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PullDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PullDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			result = null;
			i = null;
			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getString service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *      1.	Read the interfaceId as input parameters.
	 *		2.	Finds the Interfaces object from input parameter.
	 *		3.	Reads files related attributes for that interface.
	 *		4.	Set this values in PullDataToFileBean class.
	 *		5.	Returns PullDataToFileBean.
	 * </pre>
	 * 
	 * @param interfaceId
	 * @return PullDataToFileBean
	 * 
	 */
	private PullDataToFileBean getPullDataToFileBean(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getPullDataToFileBean.. Started at --> "+ new Date());
		}
		PullDataToFileBean pullDataToFileBean = null;
		Interfaces interfaces = null;
		List<String> keys = null;
		try
		{
			TLogger.debug("getPullDataToFileBean service received interface id-->"+interfaceId);
			pullDataToFileBean = new PullDataToFileBean();
			interfaces = entityManager.find(Interfaces.class, interfaceId);
			//TLogger.debug("interfaces-->"+interfaces);
			pullDataToFileBean.setInterfaceId(interfaces.getInterfaceId());
			for(InterfaceAttribute attribute : interfaces.getAttributes())
			{
				if(IntegrationConstants.REMOTE_FILE_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setFileName(attribute.getValue());
				else if(IntegrationConstants.REMOTE_FILE_NAME_FORMAT_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setFileNameFormat(attribute.getValue());
				else if(IntegrationConstants.REMOTE_FILE_FORMAT.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setFileFormat(attribute.getValue());
				else if(IntegrationConstants.LOCAL_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setFileLocation(attribute.getValue());
				else if(IntegrationConstants.LOCAL_CTRL_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setControlFileLocation(attribute.getValue());
				else if(IntegrationConstants.CONTROL_FILE_FORMAT.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setControlFileFormat(attribute.getValue());
				else if(IntegrationConstants.CSV_DELIMETER_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setCsvDelimeter(attribute.getValue());
				else if(IntegrationConstants.FILE_HEADERS_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setFileHeader(attribute.getValue());
				else if(IntegrationConstants.FILE_PRIMARY_FIELDS_ATTR.equalsIgnoreCase(attribute.getName()))
				{
					keys = Arrays.asList(attribute.getValue().split(","));
					pullDataToFileBean.setPrimaryKeys(keys);
				}
				else if(IntegrationConstants.FILE_FIELDS_ATTR.equalsIgnoreCase(attribute.getName()))
				{
					keys = Arrays.asList(attribute.getValue().split(","));
					pullDataToFileBean.setFields(keys);
				}
				else if(IntegrationConstants.REMOTE_HOST_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemoteHost(attribute.getValue());
				else if(IntegrationConstants.REMOTE_PORT_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemotePort(Long.parseLong(attribute.getValue()));
				else if(IntegrationConstants.REMOTE_USER_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemoteUser(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(attribute.getValue()) : attribute.getValue());
				else if(IntegrationConstants.REMOTE_PASSWORD_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemotePassword(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(attribute.getValue()) : attribute.getValue());
				else if(IntegrationConstants.PPK_PATH_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemotePasswordPath(attribute.getValue());
				else if(IntegrationConstants.REMOTE_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemoteDir(attribute.getValue());
				else if(IntegrationConstants.REMOTE_CTRL_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setRemoteCtlDir(attribute.getValue());
				else if(IntegrationConstants.LOCAL_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setLocalDir(attribute.getValue());
				else if(IntegrationConstants.LOCAL_BACKUP_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setLocalBkpDir(attribute.getValue());
				else if(IntegrationConstants.LOCAL_CTRL_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setLocalCtlDir(attribute.getValue());
				else if(IntegrationConstants.LOCAL_CTRL_BACKUP_DIR_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setLocalCtlBkpDir(attribute.getValue());
				else if(IntegrationConstants.REMOTE_CLIENT_ID_ATTR.equalsIgnoreCase(attribute.getName()))
					pullDataToFileBean.setUploadedBy(attribute.getValue());
			}
			return pullDataToFileBean;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PullDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PullDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PullDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			pullDataToFileBean = null;
			interfaces = null;
			keys = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getPullDataToFileBean service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author ramana
	 * 
	 * @param object
	 * @param path
	 * @return
	 * @throws Exception
	 *//*
	private Object getTagValue(Object object, String path) throws Exception
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getTagValue.. Started at --> "+ new Date());
		}

		TLogger.debug("getTagValue service received object-->"+object+"path-->"+path);
		XPathExpression expression = null;
		XPathFactory factory = null;
		XPath xpath = null;
		Document document = null;
		Object result = null;

		if( object instanceof String)
		{
			document = convertStringToDocument((String) object);
		}
		else if(object instanceof Document)
		{
			document = (Document)object;
		}

		try
		{
			factory = XPathFactory.newInstance();
			xpath = factory.newXPath();

			if(path == null)
			{
				throw new Exception("Pass the path to get the value from the xml");
			}

			expression = xpath.compile(path);
			result = expression.evaluate(document, XPathConstants.STRING);
			return result;
		}
		catch(Exception e)
		{
			TLogger.error("Unable to get the value for the path: "+path+" "+e.getMessage(),e);
			throw e;
		}
		finally
		{
			expression = null;
			factory = null;
			xpath = null;
			document = null;
			result = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getTagValue service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
		}
	}*/

	/**
	 * @author Suresh Upparu
	 * <b> Algorithm </b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @return List<FilePropertiesBean>
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public List<FilePropertiesBean> readFilePropertyBeans(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry readFilePropertyBeans.. Started at --> "+ new Date());
		}

		Interfaces interfaces = null;
		FilePropertiesBean propertiesBean = null;
		List<FilePropertiesBean> propertyBeans = null;
		String partnerAttributes = null;
		String partnerAttribute = null;
		FileBean fileBean = null;
		ServerBean serverBean = null;
		String fAttribute = null;

		try
		{
			TLogger.debug("readFilePropertyBeans service received interface id-->"+interfaceId);
			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interfaces object does not exist for the given id :: " + interfaceId);
				throw new IntegrationManagement.ReadFilePropertyBeansException("Interfaces object does not exist for the given id :: " + interfaceId, null);
			}

			propertyBeans = new ArrayList<FilePropertiesBean>();

			if(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.PARTNER_SET) != null)
			{
				for(InterfaceAttribute interfaceAttribute : interfaces.getAttributes())
				{
					if(IntegrationConstants.PARTNER_SET.equalsIgnoreCase(interfaceAttribute.getName()) && !interfaceAttribute.getValue().isEmpty())
					{
						for (String partner : interfaceAttribute.getValue().split(IntegrationConstants.COMMA_DELIMITER)) 
						{
							//TLogger.debug("Partner :: " + partner);
							partnerAttributes = getInterfaceAttributeValue(interfaces.getInterfaceId(), partner.trim());
							if(partnerAttributes == null)
							{
								TLogger.error("Pls configure the " + partner + "  for the interface id :: " + interfaces.getInterfaceId());
								//throw new Exception("Pls configure the " + partner + "  for the interface id :: " + interfaces.getInterfaceId(), null);
								continue;
							}

							propertiesBean = new FilePropertiesBean();
							for(String attribute : partnerAttributes.split(IntegrationConstants.COMMA_DELIMITER))
							{
								//TLogger.debug("Attribute :: " + attribute);
								partnerAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), attribute.trim());
								if(partnerAttribute == null)
								{
									TLogger.error("Pls configure the " + attribute + "  for the interface id :: " + interfaces.getInterfaceId());
									//throw new Exception("Pls configure the " + attribute + "  for the interface id :: " + interfaces.getInterfaceId(), null);
									break;
								}

								if(attribute.endsWith(IntegrationConstants.REMOTE_HOST_ATTR))
								{
									propertiesBean.setRemoteHost(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_PORT_ATTR))
								{
									propertiesBean.setRemotePort(Integer.parseInt(partnerAttribute));
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_USER_ATTR))
								{
									propertiesBean.setSecurityPrincipal(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(partnerAttribute): partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_PASSWORD_ATTR))
								{
									propertiesBean.setSecurityCredentials(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(partnerAttribute): partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_SERVERS_ATTR))
								{
									for(String serverAttribute : partnerAttribute.split(IntegrationConstants.COMMA_DELIMITER))
									{
										String serAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), serverAttribute.trim());
										if(serAttribute == null || serAttribute.trim().isEmpty())
										{
											TLogger.error("Pls configure the " + serverAttribute + "  for the interface id :: " + interfaces.getInterfaceId());
											break;
										}
										serverBean = new ServerBean();
										for(String attr : serAttribute.split(IntegrationConstants.COMMA_DELIMITER))
										{
											if(attr.contains(IntegrationConstants.REMOTE_HOST_ATTR))
											{
												serverBean.setRemoteHost(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
											else if(attr.contains(IntegrationConstants.REMOTE_PORT_ATTR))
											{
												serverBean.setRemotePort(Integer.parseInt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())));
											}
											else if(attr.contains(IntegrationConstants.REMOTE_USER_ATTR))
											{
												serverBean.setSecurityPrincipal(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())) : getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
											else if(attr.contains(IntegrationConstants.REMOTE_PASSWORD_ATTR))
											{
												serverBean.setSecurityCredentials(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())) : getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
											else if(attr.contains(IntegrationConstants.REMOTE_DIR_ATTR))
											{
												serverBean.setRemoteDir(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
											else if(attr.contains(IntegrationConstants.REMOTE_CTRL_DIR_ATTR))
											{
												serverBean.setRemoteControlDir(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
											else if(attr.contains(IntegrationConstants.SEND_CONTROL_FILE_FLAG))
											{
												serverBean.setSendControlFileFlag(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
											}
										}

										if(serverBean.getRemoteHost() != null)
											propertiesBean.getServers().add(serverBean);

										serAttribute = null;
									}
								}
								else if(attribute.endsWith(IntegrationConstants.PPK_PATH_ATTR))
								{
									propertiesBean.setSecurityCredentialsPath(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_DIR_ATTR))
								{
									propertiesBean.setRemoteDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_CLIENT_ID_ATTR))
								{
									propertiesBean.setClientId(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.DATE_DURATION_ATTR))
								{
									propertiesBean.setDateDuration(partnerAttribute);
								}
								//								else if(attribute.endsWith(IntegrationConstants.REMOTE_CLIENT_NAME_ATTR))
								//								{
								//									propertiesBean.setClientName(partnerAttribute);
								//								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_FILE_SET_ATTR))
								{
									for(String fileAttribute : partnerAttribute.split(IntegrationConstants.COMMA_DELIMITER))
									{
										fAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), fileAttribute.trim());
										fileBean = null;

										if(fAttribute.contains(IntegrationConstants.COMMA_DELIMITER))
										{
											fileBean = new FileBean();
											for(String attr : fAttribute.split(IntegrationConstants.COMMA_DELIMITER))
											{
												if(attr.contains(IntegrationConstants.REMOTE_FILE_ATTR))
												{
													fileBean.setFileName(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
												}
												else if(attr.contains(IntegrationConstants.FILE_HEADER_ATTR))
												{
													fileBean.setFileHeaders(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
												}
												propertiesBean.getFiles().add(fileBean);
											}
										}
										else
										{
											fileBean = new FileBean();
											fileBean.setFileName(fAttribute);
											propertiesBean.getFiles().add(fileBean);
										}
									}
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_FILE_ATTR))
								{
									fileBean = new FileBean();
									fileBean.setFileName(partnerAttribute);
									propertiesBean.getFiles().add(fileBean);
									propertiesBean.setFileName(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_FILE_NAME_FORMAT_ATTR))
								{
									propertiesBean.setRemoteFileNameFormat(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_FILE_FORMAT))
								{
									propertiesBean.setRemoteFileFormat(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.FILE_NAME_SEQ_ATTR))
								{
									propertiesBean.setFileNameSequence(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_DIR_ATTR))
								{
									propertiesBean.setLocalDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_FILTER_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalFilterBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_FILTER_CTRL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalFilterControlBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_BACKUP_DIR_ATTR))
								{
									propertiesBean.setRemoteBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_CTRL_DIR_ATTR))
								{
									propertiesBean.setRemoteControlDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_CTRL_DIR_ATTR))
								{
									propertiesBean.setLocalControlDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.CONTROL_FILE_FORMAT))
								{
									propertiesBean.setControlFileFormat(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_CTRL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalControlBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_CTRL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setRemoteControlBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_REJECTED_DIR_ATTR))
								{
									propertiesBean.setLocalRejectedDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_REJECTED_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalRejectedBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_REJECTED_CONTROL_DIR_ATTR))
								{
									propertiesBean.setLocalRejectedControlDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.LOCAL_REJECTED_CONTROL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setLocalRejectedControlBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_REJECTED_DIR_ATTR))
								{
									propertiesBean.setRemoteRejectedDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_REJECTED_BACKUP_DIR_ATTR))
								{
									propertiesBean.setRemoteRejectedBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_REJECTED_CTRL_DIR_ATTR))
								{
									propertiesBean.setRemoteRejectedControlDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REMOTE_REJECTED_CONTROL_BACKUP_DIR_ATTR))
								{
									propertiesBean.setRemoteRejectedControlBackupDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.DEST_HOST_ATTR))
								{
									propertiesBean.setDestHost(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.DEST_PORT_ATTR))
								{
									propertiesBean.setDestPort(Integer.parseInt(partnerAttribute));
								}
								else if(attribute.endsWith(IntegrationConstants.DEST_USER_ATTR))
								{
									propertiesBean.setDestSecurityPrincipal(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.DEST_PASSWORD_ATTR))
								{
									propertiesBean.setDestSecurityCredentials(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.DEST_DIR_ATTR))
								{
									propertiesBean.setDestDir(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.FILE_HEADER_ATTR))
								{
									propertiesBean.setFileHeaders(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.REQUEST_FILE_RECORD_LIMIT_ATTR) && partnerAttribute != null)
								{
									propertiesBean.setRecordsLimit(Long.parseLong(partnerAttribute));
								}
								else if(attribute.endsWith(IntegrationConstants.DATE_FORMAT_ATTR))
								{
									propertiesBean.setDateFormat(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.IS_SFTP_ATTR))
								{
									propertiesBean.setIsSFTP(partnerAttribute);
								}
								else if(attribute.endsWith(IntegrationConstants.SEND_CONTROL_FILE_FLAG))
								{
									propertiesBean.setSendControlFileFlag(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.EXCLUDED_OPERATOR_TYPES))
								{
									propertiesBean.setExcludedOperatorTypes(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.EXCLUDED_ORGANIZATION_TYPES))
								{
									propertiesBean.setExcludedOrganizationTypes(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CSV_DELIMETER_ATTR))
								{
									propertiesBean.setCsvDelimeter(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.COLLECTION_NAME_ATTR))
								{
									propertiesBean.setCollectionName(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.SCHEMA_NAME_ATTR))
								{
									propertiesBean.setSchemaName(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DAILY_DUMP_CONF_ATTR))
								{
									propertiesBean.setDailyDumpConf(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_FIELD_ATTR))
								{
									propertiesBean.setQueryField(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_FIELD_CONF_ATTR))
								{
									propertiesBean.setQueryFieldConf(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILTER_QUERY_ATTR))
								{
									propertiesBean.setFilterQuery(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_INSERT_QUERY_ATTR))
								{
									propertiesBean.setFileDataInsertQuery(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_INSERT_QUERY_PARAM_CONFIG_ATTR))
								{
									propertiesBean.setFileDataInsertQueryParamConfig(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_BATCH_SIZE_ATTR))
								{
									propertiesBean.setFileDataBatchSize(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.VALIDATION_CONF_DELIMITER_ATTR))
								{
									propertiesBean.setValidationConfigDelimeter(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FIELD_VALIDATION_CONF_ATTR))
								{
									propertiesBean.setFieldValidationConfig(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESSOR_CLASS_ATTR))
								{
									propertiesBean.setProcessorClass(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_ROW_COUNT_ATTR))
								{
									propertiesBean.setFileRowCount(Long.parseLong(partnerAttribute));
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.MONGO_CONFIG_ATTR))
								{
									propertiesBean.setMongoConfig(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESS_NAME_ATTR))
								{
									propertiesBean.setProcessName(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.MONGO_CONNECTION_ID_ATTR))
								{
									propertiesBean.setMongoConnectionId(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESSOR_URL_ATTR))
								{
									propertiesBean.setProcessorUrl(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_ATTR))
								{
									propertiesBean.setQuery(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOOKUP_CONF_ATTR))
								{
									propertiesBean.setLookupConf(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DATE_CONF_ATTR))
								{
									propertiesBean.setDateConf(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FIELD_LOOKUP_CONF_ATTR))
								{
									propertiesBean.setFieldLookupConf(partnerAttribute);
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CROSS_SELLING_FLAG_ATTR))
								{
									propertiesBean.setCrossSellingFlag(Boolean.parseBoolean(partnerAttribute));
								}
								else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.INCOMING_FILE_RECORDS_LIMIT) && !interfaceAttribute.getValue().trim().isEmpty())
								{
									propertiesBean.setFileRecordsLimit(Long.parseLong(interfaceAttribute.getValue()));
								}
							}

							//TLogger.debug("propertiesBean.getFiles() :: "+propertiesBean.getFiles());
							if(propertiesBean.getRemoteHost() != null)
							{
								propertyBeans.add(propertiesBean);
							}
						}
					}
				}
			}
			else
			{
				propertiesBean = new FilePropertiesBean();

				for(InterfaceAttribute interfaceAttribute : interfaces.getAttributes())
				{
					if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_HOST_ATTR))
					{
						propertiesBean.setRemoteHost(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_PORT_ATTR))
					{
						propertiesBean.setRemotePort(Integer.parseInt(interfaceAttribute.getValue()));
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_USER_ATTR))
					{
						propertiesBean.setSecurityPrincipal(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(interfaceAttribute.getValue()) : interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_PASSWORD_ATTR))
					{
						propertiesBean.setSecurityCredentials(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(interfaceAttribute.getValue()) : interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_SERVERS_ATTR))
					{
						for(String serverAttribute : interfaceAttribute.getValue().split(IntegrationConstants.COMMA_DELIMITER))
						{
							String serAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), serverAttribute.trim());
							if(serAttribute == null || serAttribute.trim().isEmpty())
							{
								TLogger.error("Pls configure the " + serverAttribute + "  for the interface id :: " + interfaces.getInterfaceId());
								break;
							}
							serverBean = new ServerBean();
							for(String attr : serAttribute.split(IntegrationConstants.COMMA_DELIMITER))
							{
								if(attr.contains(IntegrationConstants.REMOTE_HOST_ATTR))
								{
									serverBean.setRemoteHost(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
								else if(attr.contains(IntegrationConstants.REMOTE_PORT_ATTR))
								{
									serverBean.setRemotePort(Integer.parseInt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())));
								}
								else if(attr.contains(IntegrationConstants.REMOTE_USER_ATTR))
								{
									serverBean.setSecurityPrincipal(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())) : getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
								else if(attr.contains(IntegrationConstants.REMOTE_PASSWORD_ATTR))
								{
									serverBean.setSecurityCredentials(IntegrationConstants.ENCRYPT_DECRYPT_FLAG ? EncryptionUtil.decrypt(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim())) : getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
								else if(attr.contains(IntegrationConstants.REMOTE_DIR_ATTR))
								{
									serverBean.setRemoteDir(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
								else if(attr.contains(IntegrationConstants.REMOTE_CTRL_DIR_ATTR))
								{
									serverBean.setRemoteControlDir(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
								else if(attr.contains(IntegrationConstants.SEND_CONTROL_FILE_FLAG))
								{
									serverBean.setSendControlFileFlag(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
								}
							}

							if(serverBean.getRemoteHost() != null)
								propertiesBean.getServers().add(serverBean);

							serAttribute = null;
						}
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PPK_PATH_ATTR))
					{
						propertiesBean.setSecurityCredentialsPath(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_CLIENT_ID_ATTR))
					{
						propertiesBean.setClientId(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DATE_DURATION_ATTR))
					{
						propertiesBean.setDateDuration(interfaceAttribute.getValue());
					}
					//					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_CLIENT_NAME_ATTR))
					//					{
					//						propertiesBean.setClientName(interfaceAttribute.getValue());
					//					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_DIR_ATTR))
					{
						propertiesBean.setRemoteDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().endsWith(IntegrationConstants.REMOTE_FILE_SET_ATTR))
					{
						for(String fileAttribute : interfaceAttribute.getValue().split(IntegrationConstants.COMMA_DELIMITER))
						{
							fAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), fileAttribute.trim());
							fileBean = null;

							if(fAttribute.contains(IntegrationConstants.COMMA_DELIMITER))
							{
								fileBean = new FileBean();
								for(String attr : fAttribute.split(IntegrationConstants.COMMA_DELIMITER))
								{
									if(attr.contains(IntegrationConstants.REMOTE_FILE_ATTR))
									{
										fileBean.setFileName(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
									}
									else if(attr.contains(IntegrationConstants.FILE_HEADER_ATTR))
									{
										fileBean.setFileHeaders(getInterfaceAttributeValue(interfaces.getInterfaceId(), attr.trim()));
									}
									propertiesBean.getFiles().add(fileBean);
								}
							}
							else
							{
								fileBean = new FileBean();
								fileBean.setFileName(fAttribute);
								propertiesBean.getFiles().add(fileBean);
							}
						}

					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_FILE_ATTR))
					{
						fileBean = new FileBean();
						fileBean.setFileName(interfaceAttribute.getValue());
						propertiesBean.getFiles().add(fileBean);
						propertiesBean.setFileName(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_FILE_NAME_FORMAT_ATTR))
					{
						propertiesBean.setRemoteFileNameFormat(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_FILE_FORMAT))
					{
						propertiesBean.setRemoteFileFormat(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_NAME_SEQ_ATTR))
					{
						propertiesBean.setFileNameSequence(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_DIR_ATTR))
					{
						propertiesBean.setLocalDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_FILTER_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalFilterBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_FILTER_CTRL_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalFilterControlBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_BACKUP_DIR_ATTR))
					{
						propertiesBean.setRemoteBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_CTRL_DIR_ATTR))
					{
						propertiesBean.setRemoteControlDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.SEND_CONTROL_FILE_FLAG))
					{
						propertiesBean.setSendControlFileFlag(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_CTRL_DIR_ATTR))
					{
						propertiesBean.setLocalControlDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CONTROL_FILE_FORMAT))
					{
						propertiesBean.setControlFileFormat(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_CTRL_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalControlBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_CTRL_BACKUP_DIR_ATTR))
					{
						propertiesBean.setRemoteControlBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_REJECTED_DIR_ATTR))
					{
						propertiesBean.setLocalRejectedDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_REJECTED_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalRejectedBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_REJECTED_CONTROL_DIR_ATTR))
					{
						propertiesBean.setLocalRejectedControlDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOCAL_REJECTED_CONTROL_BACKUP_DIR_ATTR))
					{
						propertiesBean.setLocalRejectedControlBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_REJECTED_DIR_ATTR))
					{
						propertiesBean.setRemoteRejectedDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_REJECTED_BACKUP_DIR_ATTR))
					{
						propertiesBean.setRemoteRejectedBackupDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REMOTE_REJECTED_CTRL_DIR_ATTR))
					{
						propertiesBean.setRemoteRejectedControlDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DEST_HOST_ATTR))
					{
						propertiesBean.setDestHost(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DEST_PORT_ATTR))
					{
						propertiesBean.setDestPort(Integer.parseInt(interfaceAttribute.getValue()));
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DEST_USER_ATTR))
					{
						propertiesBean.setDestSecurityPrincipal(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DEST_PASSWORD_ATTR))
					{
						propertiesBean.setDestSecurityCredentials(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DEST_DIR_ATTR))
					{
						propertiesBean.setDestDir(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_HEADER_ATTR))
					{
						propertiesBean.setFileHeaders(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.REQUEST_FILE_RECORD_LIMIT_ATTR) && interfaceAttribute.getValue() != null)
					{
						propertiesBean.setRecordsLimit(Long.parseLong(interfaceAttribute.getValue()));
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DATE_FORMAT_ATTR))
					{
						propertiesBean.setDateFormat(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.IS_SFTP_ATTR))
					{
						propertiesBean.setIsSFTP(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.EXCLUDED_OPERATOR_TYPES))
					{
						propertiesBean.setExcludedOperatorTypes(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.EXCLUDED_ORGANIZATION_TYPES))
					{
						propertiesBean.setExcludedOrganizationTypes(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CSV_DELIMETER_ATTR))
					{
						propertiesBean.setCsvDelimeter(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.COLLECTION_NAME_ATTR))
					{
						propertiesBean.setCollectionName(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.SCHEMA_NAME_ATTR))
					{
						propertiesBean.setSchemaName(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DAILY_DUMP_CONF_ATTR))
					{
						propertiesBean.setDailyDumpConf(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_FIELD_ATTR))
					{
						propertiesBean.setQueryField(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_FIELD_CONF_ATTR))
					{
						propertiesBean.setQueryFieldConf(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILTER_QUERY_ATTR))
					{
						propertiesBean.setFilterQuery(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_INSERT_QUERY_ATTR))
					{
						propertiesBean.setFileDataInsertQuery(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_INSERT_QUERY_PARAM_CONFIG_ATTR))
					{
						propertiesBean.setFileDataInsertQueryParamConfig(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_DATA_BATCH_SIZE_ATTR))
					{
						propertiesBean.setFileDataBatchSize(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.VALIDATION_CONF_DELIMITER_ATTR))
					{
						propertiesBean.setValidationConfigDelimeter(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FIELD_VALIDATION_CONF_ATTR))
					{
						propertiesBean.setFieldValidationConfig(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESSOR_CLASS_ATTR))
					{
						propertiesBean.setProcessorClass(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FILE_ROW_COUNT_ATTR))
					{
						propertiesBean.setFileRowCount(interfaceAttribute.getValue() != null ? Long.parseLong(interfaceAttribute.getValue()) : null);
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.MONGO_CONFIG_ATTR))
					{
						propertiesBean.setMongoConfig(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESS_NAME_ATTR))
					{
						propertiesBean.setProcessName(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.MONGO_CONNECTION_ID_ATTR))
					{
						propertiesBean.setMongoConnectionId(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.PROCESSOR_URL_ATTR))
					{
						propertiesBean.setProcessorUrl(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.QUERY_ATTR))
					{
						propertiesBean.setQuery(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.LOOKUP_CONF_ATTR))
					{
						propertiesBean.setLookupConf(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.DATE_CONF_ATTR))
					{
						propertiesBean.setDateConf(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.FIELD_LOOKUP_CONF_ATTR))
					{
						propertiesBean.setFieldLookupConf(interfaceAttribute.getValue());
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.CROSS_SELLING_FLAG_ATTR))
					{
						propertiesBean.setCrossSellingFlag(Boolean.parseBoolean(interfaceAttribute.getValue()));
					}
					else if(interfaceAttribute.getName().equalsIgnoreCase(IntegrationConstants.INCOMING_FILE_RECORDS_LIMIT) && !interfaceAttribute.getValue().trim().isEmpty())
					{
						propertiesBean.setFileRecordsLimit(Long.parseLong(interfaceAttribute.getValue()));
					}
				}

				propertyBeans.add(propertiesBean);
			}

			return propertyBeans;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.ReadFilePropertyBeansException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ReadFilePropertyBeansException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ReadFilePropertyBeansException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			propertiesBean = null;
			propertyBeans = null;
			partnerAttributes = null;
			partnerAttribute = null;
			fileBean = null;
			serverBean = null;
			fAttribute = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit readFilePropertyBeans service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author ramana
	 * 
	 * @param object
	 * @param path
	 * @return Document
	 * @throws Exception
	 */
	/*private Document convertStringToDocument(String xmlStr) throws SAXException, IOException, ParserConfigurationException 
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry convertStringToDocument.. Started at --> "+ new Date());
		}
		//		TLogger.debug("convertStringToDocument service received xmlStr-->"+xmlStr);
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  
		DocumentBuilder builder;  
		builder = factory.newDocumentBuilder();  
		Document doc = builder.parse( new InputSource( new StringReader( xmlStr ) ) ); 
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Exit convertStringToDocument service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
		}
		return doc;
	}*/

	/**
	 * <B>Algorithm</B>
	 * 
	 * <pre>
	 *     1. 
	 * </pre>
	 * 
	 * @param file
	 * @throws Exception 
	 * @return.
	 * 
	 */
	private String getEncodedKey(File file) throws Exception {

		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getEncodedKey.. Started at --> "+ new Date());
		}
		MessageDigest md = null;
		FileInputStream fis = null;
		byte[] mdbytes = null;
		StringBuffer sb = null;
		try{
			TLogger.debug("getEncodedKey service received file-->"+file);
			md = MessageDigest.getInstance("MD5");
			fis = new FileInputStream(file);
			byte[] dataBytes = new byte[1024];

			int nread = 0;
			while ((nread = fis.read(dataBytes)) != -1) {
				md.update(dataBytes, 0, nread);
			}
			mdbytes = md.digest();
			sb = new StringBuffer();
			for (int i = 0; i < mdbytes.length; i++) {
				sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));
			}
			return sb.toString();
		}
		catch(Exception e)
		{
			TLogger.error("[unhandled exception] "+e.getMessage(),e);
			throw e;
		}
		finally
		{
			md = null;
			mdbytes = null;
			sb = null;
			try {
				if(fis != null)
					fis.close();
			} catch (IOException ioException) 
			{
				TLogger.error("[ioException] "+ioException.getMessage(),ioException);
				throw ioException;
			}

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getEncodedKey service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}

	}

	/**
	 * 
	 * @param interfaceFileId
	 * @param statusIds
	 * @return
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceSummary> getInterfaceSummariesByFileIdAndStatus(Long interfaceFileId, List<Long> statusIds) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummariesByFileIdAndStatus.. Started at --> "+ new Date());
		}*/

		List<InterfaceSummary> interfaceSummaries = null;
		Query query = null;

		try
		{
			TLogger.debug("getInterfaceSummariesByFileIdAndStatus service received interface file id-->"+interfaceFileId+"staus ids-->"+statusIds);
			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + " where ref_data3_n = :interfaceFileId  and  status.statusId in :statusIds");
			query.setParameter("interfaceFileId", interfaceFileId);
			query.setParameter("statusIds", statusIds);

			interfaceSummaries = query.getResultList();

			return interfaceSummaries;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		/*catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}*/
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummaries = null;
			query = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummariesByFileIdAndStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	/**
	 * 
	 * @param interfaceFileId
	 * @param statusIds
	 * @return
	 * @throws throws ApplicationException 
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceSummary> getInterfaceSummariesByFileIdAndStatusWithLimit(Long interfaceFileId, List<Long> statusIds, Long limit, Long interfaceId, List<Long> fileIds,Short retryCount) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummariesByFileIdAndStatus.. Started at --> "+ new Date());
		}*/

		List<InterfaceSummary> interfaceSummaries = null;
		Query query = null;

		try
		{
			if(retryCount==null)
			{
				TLogger.debug("getInterfaceSummariesByFileIdAndStatusWithLimit service received interface file id-->"+interfaceFileId+"staus ids-->"+statusIds);
				query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + " where ref_data3_n = :interfaceFileId  and  status.statusId in :statusIds order by trans_id_n");
				query.setParameter("interfaceFileId", interfaceFileId);
				query.setParameter("statusIds", statusIds);
				query.setMaxResults(Integer.valueOf(limit.toString()));
				interfaceSummaries = query.getResultList();
			}
			else
			{
				TLogger.debug("getInterfaceSummariesByFileIdAndStatusWithLimit service received interface retryCount-->"+retryCount+"status ids-->"+statusIds);
				if(interfaceId!=null)
				{
					TLogger.debug("Interface id : "+interfaceId);
					query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + " where interface_id_n =:interfaceId and retry_count_n < :retryCount  and  status.statusId in :statusIds order by trans_id_n");
					query.setParameter("interfaceId", interfaceId);
					query.setParameter("retryCount", retryCount);
					query.setParameter("statusIds", statusIds);
					query.setMaxResults(Integer.valueOf(limit.toString()));
					interfaceSummaries = query.getResultList();
				}
				else
				{
					TLogger.debug("FileIds : "+fileIds.toString());
					query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + " where ref_data3_n in (:fileIds) and retry_count_n < :retryCount  and  status.statusId in :statusIds order by trans_id_n");
					query.setParameter("fileIds", fileIds);
					query.setParameter("retryCount", retryCount);
					query.setParameter("statusIds", statusIds);
					query.setMaxResults(Integer.valueOf(limit.toString()));
					interfaceSummaries = query.getResultList();
				}
			}
			return interfaceSummaries;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummaries = null;
			query = null;
		}
	}
//	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public Long getInterfaceSummariesCountByFileIdAndStatus(Long interfaceFileId, List<Long> statusIds) throws ApplicationException
	{
		Query query = null;
		Long count = null;
		try
		{
			TLogger.debug("getInterfaceSummariesCountByFileIdAndStatus service received interface file id-->"+interfaceFileId+"staus ids-->"+statusIds);
			query = entityManager.createNativeQuery("select count(1) from "+IntegrationConstants.INTERFACE_SCHEMA_NAME+".tr_interface_summary where  ref_data3_n = :interfaceFileId  and  status_n in (:statusIds) ");
			query.setParameter("interfaceFileId", interfaceFileId);
			query.setParameter("statusIds", statusIds);
			TLogger.debug("query Size : "+query.getResultList().get(0));
			count =Long.valueOf(query.getResultList().get(0).toString());
			return count;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
		}
	}

	/**
	 * 
	 * @param interfaceId
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void prepareRejectionFile(Long interfaceId, List<Long> partners) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry prepareRejectionFile.. " + interfaceId + " Started at --> "+ new Date());
		}

		Interfaces interfaces = null;
		String rejectFile = null;
		Context context = null;
		RejectionFilePreparation rejectionFilePreparation = null;
		try
		{
			TLogger.info("prepareRejectionFile service received interface id-->"+interfaceId);
			interfaces = getInterfaceById(interfaceId);

			if(interfaces == null)
			{
				TLogger.error("Interface object does not exist for the given interfaceId :: " + interfaceId);
				throw new IntegrationManagement.PrepareRejectionFileException("Interface object does not exist for the given interfaceId :: " + interfaceId, null);
			}
			rejectFile = getInterfaceAttributeValue(interfaceId,IntegrationConstants.REJECTION_FILE_ATTR);
			if(rejectFile == null)
			{
				TLogger.error("Rejection File Attr does not exist for the given interfaceId :: " + interfaceId);
				throw new IntegrationManagement.PrepareRejectionFileException("Rejection File Attr does not exist for the given interfaceId  :: " + interfaceId, null);
			}

			context = new InitialContext();
			rejectionFilePreparation = (RejectionFilePreparation)context.lookup(rejectFile);
			if(partners != null && !partners.isEmpty())
			{
				for(Long partnerId : partners)
				{
					rejectionFilePreparation.processRequest(interfaceId, partnerId);
				}
			}
			else
			{
				rejectionFilePreparation.processRequest(interfaceId, null);
			}
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PrepareRejectionFileException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PrepareRejectionFileException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PrepareRejectionFileException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			rejectFile = null;
			context = null;
			rejectionFilePreparation = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit prepareRejectionFile " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param fileId
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void prepareRejectionFileById(Long interfaceId, Long fileId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry prepareRejectionFileById.. Interface ID : " + interfaceId + " : File ID : " + fileId + " Started at --> "+ new Date());
		}

		Interfaces interfaces = null;
		InterfaceFileSummary interfaceFileSummary = null;
		String rejectpionFileProcessor = null;
		Context context = null;
		RejectionFilePreparation rejectionFilePreparation = null;
		
		try
		{
			interfaces = getInterfaceById(interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given interfaceId :: " + interfaceId);
				throw new IntegrationManagement.PrepareRejectionFileByIdException("Interface does not exist for the given interfaceId :: " + interfaceId, null);
			}
			if(!IntegrationConstants.REJECTION_BY_FILE_ID_INTERFACES.contains(interfaceId.toString()))
			{
				TLogger.error("Invalid interface id " + interfaceId + " for the specified rejection preparation :: ");
				throw new IntegrationManagement.PrepareRejectionFileByIdException("Invalid interface id " + interfaceId + " for the specified rejection preparation :: ", null);
			}

			interfaceFileSummary = getInterfaceFileSummary(fileId);
			if(interfaceFileSummary == null)
			{
				TLogger.error("InterfaceFileSummary does not exist for the given fileId :: " + fileId);
				throw new IntegrationManagement.PrepareRejectionFileByIdException("InterfaceFileSummary does not exist for the given fileId :: " + fileId, null);
			}

			if(interfaceId.longValue() != interfaceFileSummary.getInterfaces().getInterfaceId().longValue())
			{
				TLogger.error("InterfaceFileSummary does not exist for the given interfaceId :: " + interfaceId + " and fileId :: " + fileId);
				throw new IntegrationManagement.PrepareRejectionFileByIdException("InterfaceFileSummary does not exist for the given interfaceId :: " + interfaceId + " and fileId :: " + fileId, null);
			}

			rejectpionFileProcessor = getInterfaceAttributeValue(interfaceId, IntegrationConstants.REJECTION_FILE_ATTR);
			if(rejectpionFileProcessor == null)
			{
				TLogger.error("Rejection File Attr does not exist for the given interfaceId :: " + interfaceId);
				throw new IntegrationManagement.PrepareRejectionFileByIdException("Rejection File Attr does not exist for the given interfaceId  :: " + interfaceId, null);
			}

			context = new InitialContext();
			rejectionFilePreparation = (RejectionFilePreparation) context.lookup(rejectpionFileProcessor);
			rejectionFilePreparation.processRequest(interfaceId, fileId);
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.PrepareRejectionFileByIdException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.PrepareRejectionFileByIdException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.PrepareRejectionFileByIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			rejectpionFileProcessor = null;
			context = null;
			rejectionFilePreparation = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit prepareRejectionFileById " + interfaceId + " service at -->" + new Date() + " --- and took " + (System.currentTimeMillis() - startTime) + " milliseconds");
			}
			startTime = null;
		}
	}

	private static void decompressGzipFile(String gzipFile, String newFile) throws Exception
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry decompressGzipFile.. Started at --> "+ new Date());
		}

		FileInputStream fis = null;
		GZIPInputStream gis = null;
		FileOutputStream fos = null;
		byte[] buffer = null;

		try
		{
			TLogger.debug("decompressGzipFile service received gzipFile Name-->"+gzipFile+"newFile Name -->"+newFile);
			fis = new FileInputStream(gzipFile);
			gis = new GZIPInputStream(fis);
			fos = new FileOutputStream(newFile);
			buffer = new byte[1024];
			int len;
			while((len = gis.read(buffer)) != -1)
			{
				fos.write(buffer, 0, len);
			}
		} 
		catch (IOException ioException) 
		{
			TLogger.error("Unhandled Exception decompressGzipFile-->", ioException);
			throw new Exception(ioException.getMessage(), ioException);
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception in decompressGzipFile  -->", exception);
			throw new Exception(exception.getMessage(), exception);
		}
		finally
		{
			buffer = null;
			try 
			{
				if(fos != null)
					fos.close();
				if(gis != null)
					gis.close();
				if(fis != null)
					fis.close();
			} 
			catch (IOException e) 
			{
				TLogger.error("Unhandled Exception -->", e);
			}

			gis = null;
			fos = null;
			fis = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit decompressGzipFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	private static void compressGzipFile(String file, String gzipFile) 
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry compressGzipFile.. Started at --> "+ new Date());
		}

		FileInputStream fis = null;
		GZIPOutputStream gzipOS = null;
		FileOutputStream fos = null;
		byte[] buffer = null;

		try
		{
			TLogger.debug("compressGzipFile service received gzipFile Name-->"+gzipFile+"file Name -->"+file);
			fis = new FileInputStream(file);
			fos = new FileOutputStream(gzipFile);
			gzipOS = new GZIPOutputStream(fos);
			buffer = new byte[1024];
			int len = 0;
			while((len=fis.read(buffer)) != -1)
			{
				gzipOS.write(buffer, 0, len);
			}
			//close resources
		}
		catch (IOException e) 
		{
			TLogger.error("Unhandled Exception -->", e);
		}
		finally
		{
			buffer = null;
			try 
			{
				if(gzipOS != null)
					gzipOS.close();
				if(fos != null)
					fos.close();
				if(fis != null)
					fis.close();
			}
			catch (IOException e)
			{
				TLogger.error("Unhandled Exception -->", e);
			}

			gzipFile = null;
			fos = null;
			fis = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit compressGzipFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	private void compressGzipFile(JSONObject fileJson, String gzipFile) 
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry compressGzipFile.. Started at --> "+ new Date());
		}

		File sourceFile = null;
		GZIPOutputStream gzipOS = null;
		FileOutputStream outputStream = null;
		TarArchiveOutputStream targetOutStream = null;
		String fileName = null;

		try
		{
			outputStream = new FileOutputStream(gzipFile);
			gzipOS = new GZIPOutputStream(outputStream);
			targetOutStream = new TarArchiveOutputStream(gzipOS);

			for(int fileSeq = 1; fileSeq <= ((Long)fileJson.get(COUNT)).intValue(); fileSeq ++)
			{
				fileName = fileJson.get(FILE_NAME) + "_" + decimalFormat.format(fileSeq) + "." + fileJson.get(FORMAT);
				TLogger.debug("compressGzipFile service received gzipFile Name-->"+gzipFile+"file Name -->"+fileName);
				sourceFile = new File(fileName);
				addFileToTar(sourceFile, targetOutStream);
			}

			//close resources
			targetOutStream.close();
			gzipOS.close();
			outputStream.close();
		}
		catch (IOException e) 
		{
			TLogger.error("Unhandled Exception -->", e);
		}
		finally
		{
			sourceFile = null;
			fileName = null;

			try 
			{
				if(targetOutStream != null)
					targetOutStream.close();
				if(gzipOS != null)
					gzipOS.close();
				if(outputStream != null)
					outputStream.close();
			}
			catch (IOException e)
			{
				TLogger.error("Unhandled Exception -->", e);
			}

			gzipFile = null;
			outputStream = null;
			targetOutStream = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit compressGzipFile service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	private void addFileToTar(File sourceFile, TarArchiveOutputStream targetOutStream) throws IOException
	{
		FileInputStream inputStream = null;
		BufferedInputStream bufferedInputStream = null;
		TarArchiveEntry tarEntry = null;

		try
		{
			inputStream = new FileInputStream(sourceFile);
			bufferedInputStream = new BufferedInputStream(inputStream);
			tarEntry = new TarArchiveEntry(sourceFile, sourceFile.getName());
			targetOutStream.putArchiveEntry(tarEntry);
			IOUtils.copy(bufferedInputStream, targetOutStream);
			targetOutStream.closeArchiveEntry();
			bufferedInputStream.close();
			inputStream.close();
		}
		catch(Exception exception)
		{
			exception.printStackTrace();
		}
		finally
		{
			try
			{
				if(bufferedInputStream != null)
					bufferedInputStream.close();
				if(inputStream != null)
					inputStream.close();
			}
			catch(Exception exception2)
			{
				exception2.printStackTrace();
			}

			inputStream = null;
			bufferedInputStream = null;
			tarEntry = null;
		}
	}

	public Object getJsonValue(String path, String jsonString) throws Exception
	{
		try
		{
			return JsonPath.read(jsonString.toString(), path);
		}
		catch (Exception e)
		{
			throw e;
		}

	}


	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceNotification createInterfaceNotification(InterfaceNotification interfaceNotification) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry createInterfaceNotification.. Started at --> "+ new Date());
		}

		InterfaceNotification newInterfaceNotification = null;

		try
		{


			if(interfaceNotification == null)
			{
				TLogger.error("interfaceNotification object should not be empty..");
				throw new IntegrationManagement.CreateInterfaceNotificationException("interfaceNotification object should not be empty..", null);
			}

			TLogger.debug("createInterfaceNotification service received interface notification Object for notification id -->"+interfaceNotification.getInterfaceNotificationId());
			if(interfaceNotification.getInterfaces() == null || interfaceNotification.getInterfaces().getInterfaceId() == null)
			{
				TLogger.error("Interface Id should not be empty..");
				throw new IntegrationManagement.CreateInterfaceNotificationException("Interface Id should not be empty..", null);
			}

			newInterfaceNotification = new InterfaceNotification();
			newInterfaceNotification.setInterfaces(entityManager.find(Interfaces.class, interfaceNotification.getInterfaces().getInterfaceId()));

			newInterfaceNotification.setScenario(interfaceNotification.getScenario());
			newInterfaceNotification.setMedia(interfaceNotification.getMedia());
			if(interfaceNotification.getLanguage() != null)
				newInterfaceNotification.setLanguage(interfaceNotification.getLanguage());
			newInterfaceNotification.setSubject(interfaceNotification.getSubject());
			newInterfaceNotification.setTemplateName(interfaceNotification.getTemplateName());
			newInterfaceNotification.setToAddress(interfaceNotification.getToAddress());	
			if(interfaceNotification.getToCC() != null)
				newInterfaceNotification.setToCC(interfaceNotification.getToCC());
			if(interfaceNotification.getToBCC() != null)
				newInterfaceNotification.setToBCC(interfaceNotification.getToBCC());
			newInterfaceNotification.setToFirstName(interfaceNotification.getToFirstName());


			if(interfaceNotification.getStatus() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.CreateInterfaceNotificationException("Status should not be empty..", null);
			}

			newInterfaceNotification.setStatus(this.entityManager.find(Status.class,interfaceNotification.getStatus().getStatusId()));

			entityManager.persist(newInterfaceNotification);
			entityManager.flush();

			return newInterfaceNotification;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateInterfaceNotificationException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateInterfaceNotificationException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateInterfaceNotificationException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newInterfaceNotification = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit createInterfaceNotification service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceNotification updateInterfaceNotification(InterfaceNotification interfaceNotification) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry UpdateInterfaceNotification.. Started at --> "+ new Date());
		}

		InterfaceNotification newInterfaceNotification = null;

		try
		{


			if(interfaceNotification == null)
			{
				TLogger.error("interfaceNotification object should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceNotificationException("interfaceNotification object should not be empty..", null);
			}

			TLogger.debug("createInterfaceNotification service received interface notification Object for notification id -->"+interfaceNotification.getInterfaceNotificationId());
			if(interfaceNotification.getInterfaces() == null || interfaceNotification.getInterfaces().getInterfaceId() == null)
			{
				TLogger.error("Interface Id should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceNotificationException("Interface Id should not be empty..", null);
			}


			newInterfaceNotification = entityManager.find(InterfaceNotification.class, interfaceNotification.getInterfaceNotificationId());
			if(newInterfaceNotification == null)
			{
				TLogger.error("interfaceNotification object is not exits..");
				throw new IntegrationManagement.UpdateInterfaceNotificationException("interfaceNotification object is not exits..", null);
			}
			newInterfaceNotification.setInterfaces(entityManager.find(Interfaces.class, interfaceNotification.getInterfaces().getInterfaceId()));

			if(interfaceNotification.getScenario() != null )
				newInterfaceNotification.setScenario(interfaceNotification.getScenario());
			if(interfaceNotification.getMedia() != null)
				newInterfaceNotification.setMedia(interfaceNotification.getMedia());
			if(interfaceNotification.getLanguage() != null)
				newInterfaceNotification.setLanguage(interfaceNotification.getLanguage());
			if(interfaceNotification.getSubject() != null)
				newInterfaceNotification.setSubject(interfaceNotification.getSubject());
			if(interfaceNotification.getTemplateName() != null)
				newInterfaceNotification.setTemplateName(interfaceNotification.getTemplateName());
			if(interfaceNotification.getToAddress() != null)
				newInterfaceNotification.setToAddress(interfaceNotification.getToAddress());	
			if(interfaceNotification.getToCC() != null)
				newInterfaceNotification.setToCC(interfaceNotification.getToCC());
			if(interfaceNotification.getToBCC() != null)
				newInterfaceNotification.setToBCC(interfaceNotification.getToBCC());
			if(interfaceNotification.getToFirstName() != null)
				newInterfaceNotification.setToFirstName(interfaceNotification.getToFirstName());


			if(interfaceNotification.getStatus() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.UpdateInterfaceNotificationException("Status should not be empty..", null);
			}

			newInterfaceNotification.setStatus(this.entityManager.find(Status.class,interfaceNotification.getStatus().getStatusId()));

			entityManager.persist(newInterfaceNotification);
			entityManager.flush();

			return newInterfaceNotification;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateInterfaceNotificationException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateInterfaceNotificationException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateInterfaceNotificationException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newInterfaceNotification = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit UpdateInterfaceNotification service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}



	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceNotification> getInterfaceNotificationByInterfaceIdAndStatus(Long interfaceId, Long statusId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryByInterfaceIdAndStatus.. Started at --> "+ new Date());
		}


		Query query = null;
		List<InterfaceNotification> fileNotificationsList = null;

		try
		{
			TLogger.debug("getInterfaceNotificationByInterfaceIdAndStatus service received interface id-->"+interfaceId+"statusId-->"+statusId);
			if(interfaceId == null || statusId == null)
			{
				TLogger.error("interfaceId or statusId should not be empty..");
				throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndStatus("interfaceId or statusId should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceNotification.class.getCanonicalName() + " where interfaces = :interfaces and status=:status");
			query.setParameter("interfaces",entityManager.find(Interfaces.class, interfaceId));
			query.setParameter("status",entityManager.find(Status.class, statusId));
			fileNotificationsList= query.getResultList();

			return fileNotificationsList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndStatus("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndStatus("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndStatus("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			fileNotificationsList = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit GetInterfaceNotificationByInterfaceIdAndStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}


	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceNotification> getInterfaceNotificationByInterfaceIdAndScenario(Long interfaceId, String scenario) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceNotificationByInterfaceIdAndScenario.. Started at --> "+ new Date());
		}


		Query query = null;
		List<InterfaceNotification> interfaceNotificationsList = null;

		try
		{
			TLogger.debug("getInterfaceNotificationByInterfaceIdAndScenario service received interface id-->"+interfaceId+",scenario-->"+scenario);
			if(interfaceId == null || scenario == null)
			{
				TLogger.error("interfaceId or scenario should not be empty..");
				throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndScenarioException("interfaceId or scenario should not be empty..", null);
			}

			query = entityManager.createQuery("from " + InterfaceNotification.class.getCanonicalName() + " where interfaces = :interfaces and scenario = :scenario");
			query.setParameter("interfaces",entityManager.find(Interfaces.class, interfaceId));
			query.setParameter("scenario",scenario);
			interfaceNotificationsList= query.getResultList();
			//			TLogger.debug("interfaceNotificationsList :" + interfaceNotificationsList.size());
			return interfaceNotificationsList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndScenarioException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndScenarioException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceNotificationByInterfaceIdAndScenarioException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			interfaceNotificationsList = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit GetInterfaceNotificationByInterfaceIdAndScenario service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}
	}

	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public void verifyInventoryOrder(Long interfaceId) throws ApplicationException
	{

		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry verifyInventoryOrder.. Started at --> "+ new Date());
		}

		Interfaces interfaces = null;
		List<InterfaceSummary> transactionList = null;
		InterfaceFileSummary interfaceFileSummary = null;
		InterfaceFailure interfaceFailure = null;
		Query query = null;
		DataPublisher dataPublisher = null;
		ResponseBean responseBean = null;
		Context context = null;
		String request = null;
		String url = null;
		String status = null;
		String errorCode = null;
		String errorMessage = null;
		try 
		{ 
			TLogger.debug("verifyInventoryOrder service received interface id -->"+interfaceId);
			interfaces = getInterfaceById(interfaceId);
			context = new InitialContext();	
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the id : " + interfaceId);
				throw new IntegrationManagement.ProcessInQueueRecordsException("Interface does not exist for the id : " + interfaceId, null);
			}

			query = entityManager.createQuery("from "+InterfaceSummary.class.getCanonicalName()+" where interfaces =:interfaces and status =:status"); 
			query.setParameter("status", entityManager.find(Status.class, IntegrationConstants.RES_AVAILABLE_STATUS)); 
			query.setParameter("interfaces", entityManager.find(Interfaces.class, interfaceId));

			transactionList = query.getResultList(); 
			for (InterfaceSummary interfaceSummary : transactionList) 
			{
				request = getInterfaceAttributeValue(interfaceId, IntegrationConstants.VERIFY_REQUST_ATTR);
				url = getInterfaceAttributeValue(interfaceId, IntegrationConstants.VERIFY_URL_ATTR);
				request = request.replaceAll(IntegrationConstants.SNOC_ORDER_ID_IN_CONVERTER_TEMPLATE, String.valueOf(interfaceSummary.getReferenceData4()));
				request = request.replaceAll(IntegrationConstants.SNOC_ORDER_TYPE_IN_CONVERTER_TEMPLATE, interfaceSummary.getReferenceData5());
				dataPublisher = (DataPublisher) context.lookup(interfaces.getPublisher());
				responseBean = dataPublisher.processRequest(interfaceSummary.getTransactionId(), request, url,null);
				if("SUCCESS".equalsIgnoreCase(responseBean.getStatus()))
				{
					if(!responseBean.getResponseData().contains("status"))
						continue;
					status = getJsonValue(getInterfaceAttributeValue(interfaceId, IntegrationConstants.SNOC_ORDER_STATUS_PATH_ATTR), responseBean.getResponseData()).toString();
					if(IntegrationConstants.SNOC_COMPLETED_STATUS.equals(status))
					{
						interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));

						updateInterfaceSummary(interfaceSummary);
						interfaceFileSummary = getInterfaceFileSummary(interfaceSummary.getReferenceData3());
						if(interfaceFileSummary.getSuccessCount() == null)
							interfaceFileSummary.setSuccessCount(1L);
						else
							interfaceFileSummary.setSuccessCount(interfaceFileSummary.getSuccessCount()+1);
						updateInterfaceFileSummary(interfaceFileSummary);
					}
					else if(IntegrationConstants.SNOC_CANCELLED_STATUS.equals(status) || IntegrationConstants.SNOC_REJECTED_STATUS.equals(status) || IntegrationConstants.SNOC_VERIFICATION_FAILED_STATUS.equals(status))
					{
						interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.ERROR_STATUS));
						updateInterfaceSummary(interfaceSummary);
						interfaceFileSummary = getInterfaceFileSummary(interfaceSummary.getReferenceData3());
						if(interfaceFileSummary.getErrorCount() == null)
							interfaceFileSummary.setErrorCount(1L);
						else
							interfaceFileSummary.setErrorCount(interfaceFileSummary.getErrorCount()+1);
						updateInterfaceFileSummary(interfaceFileSummary);

						interfaceFailure = new InterfaceFailure();
						interfaceFailure.setInterfaceSummary(interfaceSummary);
						interfaceFailure.setFileId(interfaceSummary.getReferenceData3());
						if(responseBean.getAckData() != null)
						{
							interfaceFailure.setAckData(responseBean.getAckData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
							interfaceFailure.setAckTime(responseBean.getAckTime());
						}

						if(responseBean.getResponseData() != null)
						{
							interfaceFailure.setResponseData(responseBean.getResponseData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
							interfaceFailure.setResponseTime(responseBean.getResponseTime());
						}
						errorCode = String.valueOf(getJsonValue(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.ERROR_CODE_PATH_IN_RESPONSE), responseBean.getResponseData()));
						errorMessage = String.valueOf(getJsonValue(getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.ERROR_MESSAGE_PATH_IN_RESPONSE), responseBean.getResponseData()));
						if(errorCode == null || "null".equalsIgnoreCase(errorCode) || "".equalsIgnoreCase(errorCode))
						{
							interfaceFailure.setErrorCode(IntegrationConstants.UNKNOWN_ERROR);
							interfaceFailure.setErrorMessage(PropertiesLoader.getErrorDescriptionFor(IntegrationConstants.UNKNOWN_ERROR.toString()));
						}
						else if (errorMessage == null || "null".equalsIgnoreCase(errorMessage) || "".equalsIgnoreCase(errorMessage))
						{
							interfaceFailure.setErrorCode(Long.parseLong(errorCode));
							interfaceFailure.setErrorMessage("Error Reason not available");
						}
						else
						{
							interfaceFailure.setErrorCode(Long.valueOf(errorCode));
							interfaceFailure.setErrorMessage(errorMessage);
						}
						createInterfaceFailure(interfaceFailure);
					}
				}
			}
		} 
		catch (NullPointerException nullPointerException) 
		{ 
			TLogger.error("Error in initialising entity manager", nullPointerException); 
			throw new IntegrationManagement.VerifyInventoryOrderException("Error in initialising entity manager", nullPointerException); 
		} 
		catch(PersistenceException persistenceException) 
		{ 
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
			throw new IntegrationManagement.VerifyInventoryOrderException("Persistence Exception " + persistenceException.getMessage(), persistenceException); 
		} 
		catch(ApplicationException applicationException) 
		{ 
			TLogger.error(applicationException.getMessage(), applicationException); 
			throw applicationException; 
		} 
		catch(Exception exception) 
		{ 
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception); 
			throw new IntegrationManagement.VerifyInventoryOrderException("Unhandled Exception :: " + exception.getMessage(), exception); 
		} 
		finally 
		{ 
			interfaces = null;
			transactionList = null;
			interfaceFileSummary = null;
			interfaceFailure = null;
			query = null;
			dataPublisher = null;
			responseBean = null;
			context = null;
			request = null;

			url = null;
			status = null;
			errorCode = null;
			errorMessage = null;
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit processInQueueRecords service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}

			startTime = null;
		} 

	}

	@SuppressWarnings("unchecked")
	private InterfaceFileSummary createInterfaceFileSummaryByReceiveFile(FilePropertiesBean bean,Interfaces interfaces,String fileName,String message,InterfaceFileSummary interfaceFileSummary,Long statusId, int lastUpdatedTime) throws ApplicationException
	{
		if(interfaceFileSummary == null)
		{
			interfaceFileSummary = new InterfaceFileSummary();
		}
		interfaceFileSummary.setFileName(fileName);
		interfaceFileSummary.setInterfaces(interfaces);
		interfaceFileSummary.setUploadedBy(Long.parseLong(bean.getClientId()));
		JSONObject remoteServerjsonObject = new JSONObject();
		remoteServerjsonObject.put("Host", bean.getRemoteHost());
		remoteServerjsonObject.put("Port", bean.getRemotePort());
		remoteServerjsonObject.put("User", bean.getSecurityPrincipal());
		if(bean.getSecurityCredentialsPath() != null)
			remoteServerjsonObject.put("PassPath", bean.getSecurityCredentialsPath());
		if(bean.getSecurityCredentials() != null)
			remoteServerjsonObject.put("Pass", bean.getSecurityCredentials());
		remoteServerjsonObject.put("RejectedDir", bean.getRemoteRejectedDir());
		remoteServerjsonObject.put("RejectedCtlDir", bean.getRemoteRejectedControlDir());
		remoteServerjsonObject.put("RejectedBkpDir", bean.getRemoteRejectedBackupDir());
		remoteServerjsonObject.put("RejectedCtlBkpDir", bean.getRemoteRejectedControlBackupDir());
		remoteServerjsonObject.put("clientId", bean.getClientId());
		remoteServerjsonObject.put("clientName", getInterfaceAttributeValue(interfaces.getInterfaceId(), bean.getClientId()+"_NAME"));

		interfaceFileSummary.setReceivedServerDetails(remoteServerjsonObject.toJSONString());
		if(bean.getDestHost() != null)
		{
			JSONObject sendServerjsonObject = new JSONObject();
			sendServerjsonObject.put("Host", bean.getDestHost());
			sendServerjsonObject.put("Port", bean.getDestPort());
			sendServerjsonObject.put("User", bean.getDestSecurityPrincipal());
			if(bean.getDestSecurityCredentialsPath() != null)
				sendServerjsonObject.put("PassPath", bean.getDestSecurityCredentialsPath());
			if(bean.getSecurityCredentials() != null)
				sendServerjsonObject.put("Pass", bean.getDestSecurityCredentials());
			sendServerjsonObject.put("DestDir", bean.getDestDir());
			interfaceFileSummary.setSendServerDetails(sendServerjsonObject.toJSONString());
		}
		JSONObject localServerjsonObject = new JSONObject();
		localServerjsonObject.put("Dir", bean.getLocalDir());
		localServerjsonObject.put("BkpDir", bean.getLocalBackupDir());
		localServerjsonObject.put("CtlDir", bean.getLocalControlDir());
		localServerjsonObject.put("CtlBkpDir", bean.getLocalControlBackupDir());
		localServerjsonObject.put("RejectedDir", bean.getLocalRejectedDir());
		localServerjsonObject.put("RejectedCtlDir", bean.getLocalRejectedControlDir());
		localServerjsonObject.put("RejectedBkpDir", bean.getLocalRejectedBackupDir());
		localServerjsonObject.put("RejectedCtlBkpDir", bean.getLocalRejectedControlBackupDir());
		if(bean.getLocalFilterBackupDir() != null)
			localServerjsonObject.put("FilterBkpDir", bean.getLocalFilterBackupDir());
		if(bean.getLocalFilterControlBackupDir() != null)
			localServerjsonObject.put("FilterCtlBkpDir", bean.getLocalFilterControlBackupDir());
		interfaceFileSummary.setLocalServerDetails(localServerjsonObject.toJSONString());
		interfaceFileSummary.setTotalCount(0L);
		interfaceFileSummary.setSuccessCount(0L);
		interfaceFileSummary.setErrorCount(0L);
		interfaceFileSummary.setUploadedOn(new Date());
		interfaceFileSummary.setMessage(message);
		interfaceFileSummary.setProcessedOn(new Date());
		if(lastUpdatedTime > 0)
			interfaceFileSummary.setValidatedOn(new Date(lastUpdatedTime * 1000L));
		Status status  = entityManager.find(Status.class, statusId);

		if(status == null)
		{
			TLogger.error("Invalid status id : " + statusId);
			throw new IntegrationManagement.ProcessFileException("Invalid status id : " +statusId, null);
		}

		interfaceFileSummary.setStatus(status);

		//		entityManager.persist(interfaceFileSummary);
		//		entityManager.flush();
		if(interfaceFileSummary.getFileId() == null)
			interfaceFileSummary = integrationManagementLocal.createInterfaceFileSummary(interfaceFileSummary);
		else
			interfaceFileSummary = integrationManagementLocal.updateInterfaceFileSummary(interfaceFileSummary);
		return interfaceFileSummary;

	}

	private void createInterfaceFileSummaryDetailsByReceiveFile(String remoteFile,String controlFile,Long totalCount,InterfaceFileSummary interfaceFileSummary) throws ApplicationException
	{
		try
		{
			InterfaceFileSummaryDetails interfaceFileSummaryDetails = new InterfaceFileSummaryDetails();
			interfaceFileSummaryDetails.setFileName(remoteFile);
			interfaceFileSummaryDetails.setControlFileName(controlFile);
			interfaceFileSummaryDetails.setFileType(IntegrationConstants.ACTUAL_FILE_TYPE_CHAR);
			interfaceFileSummaryDetails.setTotalCount(totalCount);
			interfaceFileSummaryDetails.setSuccessCount(0L);
			interfaceFileSummaryDetails.setErrorCount(0L);
			interfaceFileSummaryDetails.setInterfaceFileSummary(interfaceFileSummary);
			//		entityManager.persist(interfaceFileSummaryDetails);
			//		entityManager.flush();
			integrationManagementLocal.createInterfaceFileSummaryDetails(interfaceFileSummaryDetails);
		}
		catch(ApplicationException applicationException)
		{
			throw applicationException;
		}
		catch(Exception e)
		{
		}
	}


	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceFileSummaryDetails> getInterfaceFileSummaryDetailsByFileType(Long fileId,String fileType) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetailsByFileType.. Started at --> "+ new Date());
		}

		Query query=null;

		try
		{
			query= entityManager.createQuery("from " + InterfaceFileSummaryDetails.class.getCanonicalName() +" where file_id_n = "+fileId+"and file_type_v = '"+fileType+"'");
			return query.getResultList();
		}

		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByFileTypeException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByFileTypeException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}

		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByFileTypeException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{

			query = null;


			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetailsByFileType service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}
			startTime = null;
		}

	}

	private void sendNotificationForFileValidation(String input)
	{
		Map<String,Object> notifiactionMap = null;
		Map<String,Object> inputMap = new HashMap<String, Object>();
		List<Map<String,Object>> notificationList = null;
		Map<String, Object> finalInputMap = null;
		try
		{
			notificationList = new ArrayList<Map<String,Object>>();
			finalInputMap = new HashMap<String, Object>();
			notifiactionMap = new LinkedHashMap<String,Object>();
			notifiactionMap.put("subject", IntegrationConstants.DWH_FV_SUBJECT);
			notifiactionMap.put("templateName", IntegrationConstants.DWH_FV_TEMPLATE);
			notifiactionMap.put("to", IntegrationConstants.DWH_FV_TO_ADDRESS);
			notifiactionMap.put("cc", "");
			notifiactionMap.put("bcc", "");
			notifiactionMap.put("media", IntegrationConstants.DWH_FV_MEDIA);
			notifiactionMap.put("language",IntegrationConstants.DWH_FV_LANG);

			inputMap = new HashMap<String, Object>();
			inputMap.put("fileNames",input);
			notifiactionMap.put("data", inputMap);
			notificationList.add(notifiactionMap);

			if(notificationList.size() > 0)
			{
				finalInputMap.put("notifications", notificationList);                        
				integrationUtilManagementLocal.SendActiveMqMsg(new ObjectMapper().writeValueAsString(finalInputMap));
			}
		}
		catch(Exception exception)
		{
			TLogger.error("Error occured : ",exception);
		}

	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param detailsId
	 * @return InterfaceFileSummaryDetails
	 * @throws ApplicationException
	 */
	public InterfaceFileSummaryDetails getInterfaceFileSummaryDetailsById(Long detailsId) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceFileSummaryDetailsById..");
		}

		InterfaceFileSummaryDetails fileSummaryDetails = null;

		try
		{
			if(detailsId == null)
			{
				TLogger.error("Details ID should not be empty..", null);
				throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdException("Details ID should not be empty..", null);
			}

			fileSummaryDetails = entityManager.find(InterfaceFileSummaryDetails.class, detailsId);
			return fileSummaryDetails;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceFileSummaryDetailsByIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceFileSummaryDetailsById..");
			}
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param moduleId
	 * @param jsonRequestData
	 * @param refId
	 * @return ResponseBean
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public ResponseBean publishToInterface(Long moduleId, String jsonRequestData, String refId) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry publishToInterface..");
		}

		Module module = null;
		Set<Interfaces> interfaceSet = null;
		ResponseBean responseBean = null;

		try
		{
			responseBean = new ResponseBean();

			if(moduleId == null)
			{
				TLogger.error("Module ID should not be empty..");
				throw new IntegrationManagement.PublishToInterfaceException("Module ID should not be empty..", null);
			}
			if(jsonRequestData == null)
			{
				TLogger.error("Request Data should not be empty..");
				throw new IntegrationManagement.PublishToInterfaceException("Request Data should not be empty..", null);
			}

			module = entityManager.find(Module.class, moduleId);
			if(module == null)
			{
				TLogger.error("Module does not exist for the given ID : " + moduleId);
				throw new IntegrationManagement.PublishToInterfaceException("Module does not exist for the given ID : " + moduleId, null);
			}

			interfaceSet = module.getInterfaces();
			if(interfaceSet.isEmpty())
			{
				TLogger.error("Pls configure the interfaces for the module :: " + moduleId);
				throw new IntegrationManagement.PublishToInterfaceException("Pls configure the interfaces for the module :: " + moduleId, null);
			}

			for (Interfaces interfaces : interfaceSet) 
			{
				if(IntegrationConstants.SEND_TRANS_TYPE.equals(interfaces.getTransactionType()))
				{
					return convertRequest(interfaces, jsonRequestData, refId, null);
				}
			}
			return responseBean;
		}
		catch (NullPointerException nullPointerException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(nullPointerException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Error in initialising entity manager", nullPointerException);
//			throw new IntegrationManagement.PublishToInterfaceException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(persistenceException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
//			throw new IntegrationManagement.PublishToInterfaceException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(applicationException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error(applicationException.getMessage(), applicationException);
//			throw applicationException;
		}
		catch(Exception exception)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(exception.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
//			throw new IntegrationManagement.PublishToInterfaceException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;
			interfaceSet = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit publishToInterface..");
			}
		}
		return responseBean;
	}

	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public String invokePrimarySalesInterface(Long moduleId, String jsonRequestData) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry invokePrimarySalesInterface..");
		}

		InterfaceSummary summary = null;
		InterfaceFailure newInterfaceFailure = null;
		String convertedRequestData = null;
		/*ApplicationException appException = null;
		Exception newException = null;*/
		String refData1 = null;
		String refData5 = null;
		String exceptionMsg = null;
		org.json.JSONObject serviceResponseJsonObject = null;
		org.json.JSONObject responseJsonObject = null;
		org.json.JSONObject jsonResponse = null;
		ResponseBean responseBean = null;
		String attributeValue = null;
		org.json.JSONObject jsonResponseObject = null;
		JSONObject resConf = null;
		org.json.JSONArray items = null;
		org.json.JSONObject soapBody = null;
		Document document = null;
		Long refData4 = null;
		Long interfaceId = null;
		Long transactionId = null;

		try
		{
			responseJsonObject = new org.json.JSONObject();
			serviceResponseJsonObject = processSummaryRequest(moduleId, jsonRequestData);
			
			if(serviceResponseJsonObject.get("status") != null && "FAIL".equalsIgnoreCase(serviceResponseJsonObject.getString("status")))
				return serviceResponseJsonObject.toString();
			if(serviceResponseJsonObject.get("interface_id") == null)
			{
				TLogger.error("Interface ID does not exist..");
				throw new IntegrationManagement.InvokePrimarySalesInterfaceException("Interface ID does not exist..", null);
			}
			if(serviceResponseJsonObject.get("transaction_id") == null)
			{
				TLogger.error("Transaction ID does not exist..");
				throw new IntegrationManagement.InvokePrimarySalesInterfaceException("Transaction ID does not exist..", null);
			}
			
			interfaceId = serviceResponseJsonObject.getLong("interface_id");
			transactionId = serviceResponseJsonObject.getLong("transaction_id");
			responseJsonObject.put("transaction_id", transactionId);
			convertedRequestData = serviceResponseJsonObject.getString("convertedRequestData");
			refData1 = serviceResponseJsonObject.get("refData1") != null ? serviceResponseJsonObject.getString("refData1") : "";
			refData5 = serviceResponseJsonObject.get("refData5") != null ? serviceResponseJsonObject.getString("refData5") : "";

			responseBean = (ResponseBean) serviceResponseJsonObject.get("responseBean");
			TLogger.debug("responseBean.getStatus() : " + responseBean.getStatus());
			if("Error".equalsIgnoreCase(responseBean.getStatus()))
			{
				summary = entityManager.find(InterfaceSummary.class, transactionId);
				newInterfaceFailure = new InterfaceFailure();
				newInterfaceFailure.setInterfaceSummary(summary);
				newInterfaceFailure.setErrorCode(responseBean.getErrorCode());
				newInterfaceFailure.setErrorMessage(responseBean.getErrorMessage());
				integrationManagementLocal.createInterfaceFailure(newInterfaceFailure);
				
				summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
				summary.setReferenceData1(refData1);
				summary.setReferenceData5(refData5);
				summary.setStatus(entityManager.find(Status.class, IntegrationConstants.ERROR_STATUS));
				
				responseJsonObject.put("status", "FAIL");
				responseJsonObject.put("err_code", responseBean.getErrorCode());
				responseJsonObject.put("err_msg", responseBean.getErrorMessage());
				if(responseBean.getErrorCode() == null || IntegrationConstants.INTERNAL_SERVER_ERR_CODE.longValue() == responseBean.getErrorCode().longValue())
				{
					responseJsonObject.put("err_msg", "Unexpected rejection from target system..");
					if(interfaceId.longValue() == IntegrationConstants.CREATE_SO_INTERFACE_ID.longValue())
						responseJsonObject.put("err_msg", "Create SO Unsuccessful");
					else if(interfaceId.longValue() == IntegrationConstants.QUERY_STOCK_INTERFACE_ID.longValue())
						responseJsonObject.put("err_msg", "Query Stock Unsuccessful");
				}
				
				entityManager.flush();
				return responseJsonObject.toString();
			}
			
			jsonResponseObject = new org.json.JSONObject();
			document = lookupMappingLocal.convertStringToDocument(formatXml(responseBean.getResponseData()));
			for(int i = 0; i < document.getChildNodes().getLength(); i ++)
			{
				if(Document.ELEMENT_NODE == document.getChildNodes().item(i).getNodeType())
				{
					if(document.getChildNodes().item(i).getChildNodes().getLength() == 1)
						jsonResponseObject.put(document.getChildNodes().item(i).getNodeName(), document.getChildNodes().item(i).getFirstChild().getNodeValue().trim());
					if(document.getChildNodes().item(i).getChildNodes().getLength() > 1)
						fillObject(document.getChildNodes().item(i).getNodeName(), document.getChildNodes().item(i).getChildNodes(), jsonResponseObject);
				}
			}
			
			TLogger.debug("jsonResponseObject : " + jsonResponseObject);
			
			attributeValue = getInterfaceAttributeValue(interfaceId, IntegrationConstants.RESPONSE_CONF_ATTR);
			if(attributeValue == null || attributeValue.trim().isEmpty())
			{
				TLogger.error("Pls configure the Response Conf for inteface :: " + interfaceId);
				exceptionMsg = "Pls configure the Response Conf for inteface :: " + interfaceId;
				throw new IntegrationManagement.SyncBalanceInterfaceExeption("Pls configure the Response Conf for inteface :: " + interfaceId, null);
			}
			resConf = (JSONObject) new JSONParser().parse(attributeValue);
			
			soapBody = jsonResponseObject.getJSONObject(resConf.get("soap-envelope").toString()).getJSONObject(resConf.get("soap-body").toString());

			if(interfaceId.longValue() == IntegrationConstants.CREATE_SO_INTERFACE_ID.longValue())
			{
				if(soapBody.isNull(resConf.get("soap-response").toString()))
				{
					refData4 = 2L;
					responseJsonObject.put("err_code", 101L);
					responseJsonObject.put("err_msg", "Request Process failed..");
					responseJsonObject.put("status", "FAIL");
					
					if(soapBody.get(resConf.get("soap-fault").toString()) != null && soapBody.getJSONObject(resConf.get("soap-fault").toString()).get("faultstring") != null)
					{
						refData4 = 1L;
						responseJsonObject.put("err_msg", soapBody.getJSONObject(resConf.get("soap-fault").toString()).getString("faultstring"));
					}
				}
				else
				{
					jsonResponse = soapBody.getJSONObject(resConf.get("soap-response").toString()).getJSONObject("Item");
					if(jsonResponse != null && jsonResponse.get("Status") != null && resConf.get("success_value").toString().equalsIgnoreCase(jsonResponse.getString("Status")))
					{
						refData4 = 0L;
						responseJsonObject.put("status", "SUCCESS");
						jsonResponse.remove("Status");
						responseJsonObject.put("item", jsonResponse);
					}
					else
					{
						refData4 = 2L;
						responseJsonObject.put("err_code", 101L);
						responseJsonObject.put("err_msg", "Request Process failed..");
						responseJsonObject.put("status", "FAIL");

						if(jsonResponse != null)
						{
							refData4 = 1L;
							responseJsonObject.put("err_msg", jsonResponse.get("Rejection_Note"));
							jsonResponse.remove("Rejection_Note");
							jsonResponse.remove("Status");
							responseJsonObject.put("item", jsonResponse);
						}
					}
				}
			}
			else if(interfaceId.longValue()  == IntegrationConstants.QUERY_STOCK_INTERFACE_ID.longValue())
			{
				if(soapBody.isNull(resConf.get("soap-response").toString()))
				{
					refData4 = 2L;
					responseJsonObject.put("err_code", 101L);
					responseJsonObject.put("err_msg", "Request Process failed..");
					responseJsonObject.put("status", "FAIL");
					
					if(soapBody.get(resConf.get("soap-fault").toString()) != null && soapBody.getJSONObject(resConf.get("soap-fault").toString()).get("faultstring") != null)
					{
						refData4 = 1L;
						responseJsonObject.put("err_msg", soapBody.getJSONObject(resConf.get("soap-fault").toString()).getString("faultstring"));
					}
				}
				else
				{
					refData4 = 0L;
					items = new org.json.JSONArray();
					if(soapBody.getJSONObject(resConf.get("soap-response").toString()).get("Item") instanceof org.json.JSONArray)
						items = soapBody.getJSONObject(resConf.get("soap-response").toString()).getJSONArray("Item");
					else
						items.put(soapBody.getJSONObject(resConf.get("soap-response").toString()).getJSONObject("Item"));

					org.json.JSONObject jsonObj = null;
					org.json.JSONObject item = null;
					org.json.JSONArray products = new org.json.JSONArray();
					for(int i = 0; i < items.length(); i ++)
					{
						jsonObj = items.getJSONObject(i);
						item = new org.json.JSONObject();
						item.put("matrl_code", jsonObj.get("MaterialCode"));
						if(!jsonObj.isNull("Plant"))
							item.put("plant", jsonObj.get("Plant"));
						if(!jsonObj.isNull("Stock"))
							item.put("stock", jsonObj.get("Stock"));
						if(!jsonObj.isNull("Remarks"))
							item.put("remarks", jsonObj.get("Remarks"));
						products.put(item);
					}
					responseJsonObject.put("products", products);
					responseJsonObject.put("status", "SUCCESS");
				}
			}
			responseJsonObject.put("trans_dt", yyyy_MM_dd_T_HH_mm_ss_S.format(new Date()));
			
			summary = entityManager.find(InterfaceSummary.class, transactionId);
			summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setOriginalResponseData(responseBean.getResponseData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setResponseData(responseJsonObject.toString().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setResponseTime(new Date());
			summary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
			summary.setReferenceData1(refData1);
			summary.setReferenceData4(refData4);
			summary.setReferenceData5(refData5);
			entityManager.flush();

			return responseJsonObject.toString();
		}
		catch (NullPointerException nullPointerException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", nullPointerException.getMessage());

			TLogger.error("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", persistenceException.getMessage());

			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", (exceptionMsg != null ? exceptionMsg : applicationException.getMessage()));

			TLogger.error(applicationException.getMessage(), applicationException);
		}
		catch(Exception exception)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", exception.getMessage());

			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			summary = null;
			newInterfaceFailure = null;
			convertedRequestData = null;
			refData1 = null;
			refData5 = null;
			exceptionMsg = null;
			serviceResponseJsonObject = null;
			jsonResponse = null;
			responseBean = null;
			attributeValue = null;
			jsonResponseObject = null;
			resConf = null;
			items = null;
			soapBody = null;
			document = null;
			refData4 = null;
			interfaceId = null;
			transactionId = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit invokePrimarySalesInterface..");
			}
		}
		return responseJsonObject.toString();
	}
	
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public String syncBalanceInterface(Long moduleId, String jsonRequestData) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry syncBalanceInterface..");
		}

		InterfaceSummary summary = null;
		InterfaceFailure newInterfaceFailure = null;
		String convertedRequestData = null;
		/*ApplicationException appException = null;
		Exception newException = null;*/
		String refData1 = null;
		String refData5 = null;
		String exceptionMsg = null;
		org.json.JSONObject serviceResponseJsonObject = null;
		org.json.JSONObject responseJsonObject = null;
		org.json.JSONObject jsonResponse = null;
		org.json.JSONArray jsonArray = null;
		ResponseBean responseBean = null;
		String attributeValue = null;
		org.json.JSONObject jsonResponseObject = null;
		org.json.JSONObject transResult = null;
		org.json.JSONObject soapBody = null;
		Document document = null;
		Long refData4 = null;
		Long interfaceId = null;
		Long transactionId = null;

		try
		{
			responseJsonObject = new org.json.JSONObject();
			serviceResponseJsonObject = processSummaryRequest(moduleId, jsonRequestData);
			
			if(serviceResponseJsonObject.get("status") != null && "FAIL".equalsIgnoreCase(serviceResponseJsonObject.getString("status")))
				return serviceResponseJsonObject.toString();
			if(serviceResponseJsonObject.get("interface_id") == null)
			{
				TLogger.error("Interface ID does not exist..");
				throw new IntegrationManagement.SyncBalanceInterfaceExeption("Interface ID does not exist..", null);
			}
			if(serviceResponseJsonObject.get("transaction_id") == null)
			{
				TLogger.error("Transaction ID does not exist..");
				throw new IntegrationManagement.SyncBalanceInterfaceExeption("Transaction ID does not exist..", null);
			}
			
			interfaceId = serviceResponseJsonObject.getLong("interface_id");
			transactionId = serviceResponseJsonObject.getLong("transaction_id");
			responseJsonObject.put("transaction_id", transactionId);
			convertedRequestData = serviceResponseJsonObject.getString("convertedRequestData");
			refData1 = serviceResponseJsonObject.get("refData1") != null ? serviceResponseJsonObject.getString("refData1") : "";
			refData5 = serviceResponseJsonObject.get("refData5") != null ? serviceResponseJsonObject.getString("refData5") : "";

			responseBean = (ResponseBean) serviceResponseJsonObject.get("responseBean");
			TLogger.debug("responseBean.getStatus() : " + responseBean.getStatus());
			if("Error".equalsIgnoreCase(responseBean.getStatus()))
			{
				summary = entityManager.find(InterfaceSummary.class, transactionId);
				newInterfaceFailure = new InterfaceFailure();
				newInterfaceFailure.setInterfaceSummary(summary);
				newInterfaceFailure.setErrorCode(responseBean.getErrorCode());
				newInterfaceFailure.setErrorMessage(responseBean.getErrorMessage());
				integrationManagementLocal.createInterfaceFailure(newInterfaceFailure);
				
				summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
				summary.setReferenceData1(refData1);
				summary.setReferenceData5(refData5);
				summary.setStatus(entityManager.find(Status.class, IntegrationConstants.ERROR_STATUS));
				
				responseJsonObject.put("status", "FAIL");
				responseJsonObject.put("err_code", responseBean.getErrorCode());
				responseJsonObject.put("err_msg", responseBean.getErrorMessage());
				if(responseBean.getErrorCode() == null || IntegrationConstants.INTERNAL_SERVER_ERR_CODE.longValue() == responseBean.getErrorCode().longValue())
				{
					if(interfaceId.longValue() == IntegrationConstants.QUERY_BALANCE_INTERFACE_ID.longValue())
						responseJsonObject.put("err_msg", "Query Balance Unsuccessful");
					else if(interfaceId.longValue() == IntegrationConstants.TRANSFER_BALANCE_INTERFACE_ID.longValue())
						responseJsonObject.put("err_msg", "Transfer Balance Unsuccessful");
				}
				
				entityManager.flush();
				return responseJsonObject.toString();
			}

			jsonResponseObject = new org.json.JSONObject();
			document = lookupMappingLocal.convertStringToDocument(formatXml(responseBean.getResponseData()));
			for(int i = 0; i < document.getChildNodes().getLength(); i ++)
			{
				if(Document.ELEMENT_NODE == document.getChildNodes().item(i).getNodeType())
				{
					if(document.getChildNodes().item(i).getChildNodes().getLength() == 1)
						jsonResponseObject.put(document.getChildNodes().item(i).getNodeName(), document.getChildNodes().item(i).getFirstChild().getNodeValue().trim());
					if(document.getChildNodes().item(i).getChildNodes().getLength() > 1)
						fillObject(document.getChildNodes().item(i).getNodeName(), document.getChildNodes().item(i).getChildNodes(), jsonResponseObject);
				}
			}
			
			TLogger.debug("jsonResponseObject : " + jsonResponseObject);
			
			if(!jsonResponseObject.isNull("soapenv:Envelope"))
			{
				soapBody = jsonResponseObject.getJSONObject("soapenv:Envelope").getJSONObject("soapenv:Body");
			}
			else if(!jsonResponseObject.isNull("soap-envelope"))
			{
				soapBody = jsonResponseObject.getJSONObject("soap-envelope").getJSONObject("soap-body");
			}

			if(soapBody.isNull("api:Result"))
			{
				refData4 = 2L;
				responseJsonObject.put("err_code", 101L);
				responseJsonObject.put("err_msg", "Request Process failed..");
				responseJsonObject.put("status", "FAIL");
				
				if(soapBody.get("soap-fault") != null && soapBody.getJSONObject("soap-fault").get("faultstring") != null)
					responseJsonObject.put("err_msg", soapBody.getJSONObject("soap-fault").getString("faultstring"));
			}
			else
			{
//				jsonResponse = XML.toJSONObject(responseBean.getResponseData()).getJSONObject("soapenv:Envelope").getJSONObject("soapenv:Body").getJSONObject("api:Result").getJSONObject("res:Header");
				jsonResponse = soapBody.getJSONObject("api:Result").getJSONObject("res:Header");
				if(jsonResponse != null && jsonResponse.get("res:ConversationID") != null && !jsonResponse.getString("res:ConversationID").trim().isEmpty())
					responseJsonObject.put("ext_ref_id", jsonResponse.getString("res:ConversationID").trim());

				if(responseBean.getResponseData().contains("res:ResultCode"))
				{
//					jsonResponse = XML.toJSONObject(responseBean.getResponseData()).getJSONObject("soapenv:Envelope").getJSONObject("soapenv:Body").getJSONObject("api:Result").getJSONObject("res:Body");
					jsonResponse = soapBody.getJSONObject("api:Result").getJSONObject("res:Body");
//					TLogger.debug("JSON Response body Object ::"+jsonResponse);

					if(jsonResponse != null && jsonResponse.getString("res:ResultCode").equals("0"))
					{
						refData4 = 0L;
						responseJsonObject.put("status", "SUCCESS");
						responseJsonObject.put("trans_dt", yyyy_MM_dd_T_HH_mm_ss_S.format(new Date()));

						if(interfaceId.longValue() == IntegrationConstants.TRANSFER_BALANCE_INTERFACE_ID.longValue() 
								&& responseBean.getResponseData().contains("res:TransactionResult"))
						{
							transResult = jsonResponse.getJSONObject("res:TransactionResult");
//							TLogger.debug("transResult : " + transResult);
							if(transResult != null && transResult.get("res:TransactionID") != null && !transResult.getString("res:TransactionID").trim().isEmpty())
								responseJsonObject.put("ext_ref_id", transResult.getString("res:TransactionID").trim());
						}
						else if(interfaceId.longValue() == IntegrationConstants.QUERY_BALANCE_INTERFACE_ID.longValue() 
								&& responseBean.getResponseData().contains("res:AccountBalanceItem"))
						{
							jsonArray = new org.json.JSONArray();

							if(jsonResponse.getJSONObject("res:QueryOrganizationBalanceResult").getJSONObject("res:AccountBalanceData").get("res:AccountBalanceItem") instanceof org.json.JSONArray)
								jsonArray = jsonResponse.getJSONObject("res:QueryOrganizationBalanceResult").getJSONObject("res:AccountBalanceData").getJSONArray("res:AccountBalanceItem");
							else if(jsonResponse.getJSONObject("res:QueryOrganizationBalanceResult").getJSONObject("res:AccountBalanceData").get("res:AccountBalanceItem") instanceof org.json.JSONObject)
								jsonArray.put(jsonResponse.getJSONObject("res:QueryOrganizationBalanceResult").getJSONObject("res:AccountBalanceData").getJSONObject("res:AccountBalanceItem"));

							attributeValue = integrationManagementLocal.getInterfaceAttributeValue(interfaceId, IntegrationConstants.BALANCE_RESPONSE_CONF_ATTR);
							if(attributeValue == null || attributeValue.trim().isEmpty())
							{
								TLogger.error("Pls configure the Balance Response Conf for the inteface id :: " + interfaceId);
								exceptionMsg = "Pls configure the Balance Response Conf for the inteface id :: " + interfaceId;
								throw new IntegrationManagement.SyncBalanceInterfaceExeption("Pls configure the Balance Response Conf for the inteface id :: " + interfaceId, null);
							}

							JSONObject resConf = (JSONObject) new JSONParser().parse(attributeValue); 
							org.json.JSONObject childObject = null;
							org.json.JSONArray balanceArr = new org.json.JSONArray();
							org.json.JSONObject balanceObj = null;
							for(int i = 0; i < jsonArray.length(); i ++)
							{
								childObject = jsonArray.getJSONObject(i);
								if(refData1.equalsIgnoreCase(childObject.getString(resConf.get("org_ref_code").toString())))
								{
									responseJsonObject.put("operator_bal", childObject.getString(resConf.get("balance").toString()));
									responseJsonObject.put("currency", childObject.getString(resConf.get("currency").toString()));
								}
								else
								{
									balanceObj = new org.json.JSONObject();
									balanceObj.put("bal", childObject.getString(resConf.get("balance").toString()));
									balanceObj.put("currency", childObject.getString(resConf.get("currency").toString()));
									balanceObj.put("outlet_ref_code", childObject.getString(resConf.get("org_ref_code").toString()));
									balanceArr.put(balanceObj);
								}
							}
							if(balanceArr.length() > 0)
								responseJsonObject.put("balance", balanceArr);

							attributeValue = null;
							resConf = null;
							childObject = null;
							balanceArr = null;
							balanceObj = null;
						}
					}
					else
					{
						refData4 = 2L;
						responseJsonObject.put("status", "FAIL");
						responseJsonObject.put("trans_dt", yyyy_MM_dd_T_HH_mm_ss_S.format(new Date()));
						responseJsonObject.put("err_code", 101);
						if(jsonResponse != null)
						{
							refData4 = 1L;
							
							if(jsonResponse.get("res:ResultCode") != null)
								responseJsonObject.put("ext_err_code", jsonResponse.getString("res:ResultCode"));
							if(jsonResponse.get("res:ResultDesc") != null)
								responseJsonObject.put("err_msg", jsonResponse.getString("res:ResultDesc").trim());
							
							if(interfaceId.longValue() == IntegrationConstants.TRANSFER_BALANCE_INTERFACE_ID.longValue() 
									&& responseBean.getResponseData().contains("res:TransactionResult"))
							{
								transResult = jsonResponse.getJSONObject("res:TransactionResult");
//								TLogger.debug("transResult : " + transResult);
								if(transResult != null && transResult.get("res:TransactionID") != null && !transResult.getString("res:TransactionID").trim().isEmpty())
									responseJsonObject.put("ext_ref_id", transResult.getString("res:TransactionID").trim());
							}
						}
					}
				}
			}

			summary = entityManager.find(InterfaceSummary.class, transactionId);
			summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setOriginalResponseData(responseBean.getResponseData().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setResponseData(responseJsonObject.toString().getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			summary.setResponseTime(new Date());
			summary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
			summary.setReferenceData1(refData1);
			summary.setReferenceData4(refData4);
			summary.setReferenceData5(refData5);
			entityManager.flush();

			return responseJsonObject.toString();
		}
		catch (NullPointerException nullPointerException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", nullPointerException.getMessage());

			TLogger.error("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", persistenceException.getMessage());

			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", (exceptionMsg != null ? exceptionMsg : applicationException.getMessage()));

			TLogger.error(applicationException.getMessage(), applicationException);
		}
		catch(Exception exception)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", exception.getMessage());

			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			summary = null;
			convertedRequestData = null;
			refData1 = null;
			refData5 = null;
			exceptionMsg = null;
			serviceResponseJsonObject = null;
			jsonResponse = null;
			jsonArray = null;
			responseBean = null;
			newInterfaceFailure = null;
			attributeValue = null;
			jsonResponseObject = null;
			transResult = null;
			soapBody = null;
			document = null;
			refData4 = null;
			interfaceId = null;
			transactionId = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit syncBalanceInterface..");
			}
		}
		return responseJsonObject.toString();
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param moduleId
	 * @param jsonRequestData
	 * @return JSONObject
	 */
	private org.json.JSONObject processSummaryRequest(Long moduleId, String jsonRequestData)
	{
		Module module = null;
		Interfaces interfaces = null;
		InterfaceSummary interfaceSummary = null;
		InterfaceSummary newInterfaceSummary = null;
		DataConverter dataConverter = null;
		Context context = null;
		DataPublisher dataPublisher = null;
		String convertedRequestData = null;
		Long errorCode = null;
		String errorMessage = null;
		Boolean success = true;
		BasicDBObject requestObject = null;
		String refIdAttribute = null;
		Object value = null;
		List<String> convertedDataList = null;
		StringWriter sWriter = null;
		PrintWriter pWriter = null;
		/*ApplicationException appException = null;
		Exception newException = null;*/
		String refData1 = null;
		String refData5 = null;
		String exceptionMsg = null;
		boolean isException = false;		
		org.json.JSONObject responseJsonObject = null;
		ResponseBean responseBean = null;
		ResponseBean failureBean = null;

		try
		{
			responseJsonObject = new org.json.JSONObject();
			failureBean = new ResponseBean();
			
			if(moduleId == null)
			{
				TLogger.error("Module ID should not be empty..");
				exceptionMsg = "Module ID should not be empty..";
				throw new IntegrationManagement.ProcessSummaryRequestException("Module ID should not be empty..", null);
			}
			if(jsonRequestData == null)
			{
				TLogger.error("Request Data should not be empty..");
				exceptionMsg = "Request Data should not be empty..";
				throw new IntegrationManagement.ProcessSummaryRequestException("Request Data should not be empty..", null);
			}

			module = entityManager.find(Module.class, moduleId);
			if(module == null)
			{
				TLogger.error("Module does not exist for the given ID : " + moduleId);
				exceptionMsg = "Module does not exist for the given ID : " + moduleId;
				throw new IntegrationManagement.ProcessSummaryRequestException("Module does not exist for the given ID : " + moduleId, null);
			}

			if(module.getInterfaces().isEmpty())
			{
				TLogger.error("Pls configure the interfaces for the module :: " + moduleId);
				exceptionMsg = "Pls configure the interfaces for the module :: " + moduleId;
				throw new IntegrationManagement.ProcessSummaryRequestException("Pls configure the interfaces for the module :: " + moduleId, null);
			}

			for (Interfaces interfaceObj : module.getInterfaces()) 
			{
				if(IntegrationConstants.SEND_TRANS_TYPE.equals(interfaceObj.getTransactionType()))
				{
					interfaces = interfaceObj;
				}
			}

			interfaceSummary = new InterfaceSummary();
			interfaceSummary.setInterfaces(interfaces);
			interfaceSummary.setOriginalRequestData(jsonRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestData(jsonRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestTime(new Date());
			interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.INTERMEDIATE_STATUS));
			interfaceSummary.setRetryCount(0L);

			newInterfaceSummary = integrationManagementLocal.createInterfaceSummary(interfaceSummary);
			responseJsonObject.put("transaction_id", newInterfaceSummary.getTransactionId());
			failureBean.setTransactionId(newInterfaceSummary.getTransactionId());
			
			refIdAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.REF_ID_ATTR);
			if(refIdAttribute == null || refIdAttribute.trim().isEmpty())
			{
				TLogger.error("Pls configure the ref id attribute for interface id :: " + interfaces.getInterfaceId());
				exceptionMsg = "Pls configure the ref id attribute for interface id :: " + interfaces.getInterfaceId();
				throw new IntegrationManagement.ProcessSummaryRequestException("Pls configure the ref id attribute for interface id :: " + interfaces.getInterfaceId(), null);
			}
			requestObject = (BasicDBObject) JSON.parse(jsonRequestData);
			if(requestObject != null)
			{
				value = getFieldValue(requestObject, refIdAttribute);
				if(value != null)
				{
					TLogger.debug("Ref ID : " + value);
					if(value instanceof String || value instanceof Long || value instanceof Integer)
						refData1 = value.toString();
					if(refData1 == null || refData1.trim().isEmpty())
						TLogger.debug("Reference ID is empty..");
				}
				else
					TLogger.debug("Reference ID is empty..");
			}

			//Setting refData5..
			refIdAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.REF_CODE_PATH_ATTR);
			if(refIdAttribute == null || refIdAttribute.trim().isEmpty())
			{
				TLogger.error("Pls configure the ref code path attribute for inteface id :: " + interfaces.getInterfaceId());
				exceptionMsg = "Pls configure the ref code path attribute for inteface id :: " + interfaces.getInterfaceId();
				throw new IntegrationManagement.ProcessSummaryRequestException("Pls configure the ref code path attribute for inteface id :: " + interfaces.getInterfaceId(), null);
			}

			requestObject = (BasicDBObject) JSON.parse(jsonRequestData);
			value = getFieldValue(requestObject, refIdAttribute);
			TLogger.debug("Ref Data Path Value : " + value);
			if(value != null)
			{
				TLogger.debug("Ref Data 5 : " + value);
				if(value instanceof String || value instanceof Long || value instanceof Integer)
					refData5 = value.toString();
				if(refData5 == null || refData5.trim().isEmpty())
					TLogger.debug("RefData5 is empty..");
			}

			failureBean.setRefData1(refData1);
			failureBean.setRefData5(refData5);
			failureBean.setStatusId(IntegrationConstants.ERROR_STATUS);
			
			context = new InitialContext();	
			if(interfaces.getConverter() != null && !equals(interfaces.getConverter().trim().isEmpty()))
			{
				dataConverter = (DataConverter) context.lookup(interfaces.getConverter());
				if(dataConverter == null)
				{
					TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
					exceptionMsg = "Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId();
					throw new IntegrationManagement.ProcessSummaryRequestException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
				}

				try
				{
					convertedRequestData = dataConverter.processRequest(interfaces.getInterfaceId(), jsonRequestData, null);
				}
				catch(ApplicationException applicationException)
				{
//					appException = applicationException;
					if(applicationException.getFaultInfo() != null)
					{
						errorMessage = applicationException.getFaultInfo().getMessage();
						exceptionMsg = applicationException.getFaultInfo().getMessage();
					}
					else
					{
						sWriter = new StringWriter();
						pWriter = new PrintWriter(sWriter);
						applicationException.printStackTrace(pWriter);
						errorMessage = sWriter.toString();
						exceptionMsg = applicationException.getMessage();
					}

					TLogger.error("Exception Occured :: " + applicationException.getMessage());
					isException = true;
				}
				catch(Exception exception)
				{
//					newException = exception;
					exceptionMsg = exception.getMessage();

					sWriter = new StringWriter();
					pWriter = new PrintWriter(sWriter);
					exception.printStackTrace(pWriter);
					TLogger.error("Exception Occured :: " + exception.getMessage());
					isException = true;
					errorMessage = exception.getMessage();
				}	
			}

			TLogger.debug("IsException : " + isException);

			if(isException)
			{
				failureBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
				failureBean.setErrorMessage(errorMessage);
				integrationUtilManagementLocal.updateInterfaceFailerStatus(failureBean);

				responseJsonObject.put("status", "FAIL");
				responseJsonObject.put("err_code", IntegrationConstants.SERVICE_ERROR_CODE.toString());
				responseJsonObject.put("err_msg", exceptionMsg);
				return responseJsonObject;
			}

			if(convertedRequestData == null || convertedRequestData.trim().isEmpty())
			{
				failureBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
				failureBean.setErrorMessage("Unable to prepare converted request..");
				integrationUtilManagementLocal.updateInterfaceFailerStatus(failureBean);
				
				TLogger.debug("Unable to prepare converted request..");
				responseJsonObject.put("status", "FAIL");
				responseJsonObject.put("err_code", IntegrationConstants.SERVICE_ERROR_CODE.toString());
				responseJsonObject.put("err_msg", "Unable to prepare converted request..");
				return responseJsonObject;
			}

			newInterfaceSummary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			newInterfaceSummary.setReferenceData1(refData1);
			newInterfaceSummary.setReferenceData5(refData5);
			entityManager.flush();
			
			if(convertedRequestData.endsWith("Error"))
			{
				convertedDataList = Arrays.asList(convertedRequestData.split(","));
				for(String msg : convertedDataList)
				{
					if(msg.contains("ErrorCode"))
					{
						errorCode = Long.parseLong(msg.split(":")[1]);
					}
					else if(msg.contains("ErrorMessage"))
					{
						errorMessage = msg.split(":")[1];
					}
				}
				success = false;
			}

			if(!success)
			{
				failureBean.setErrorCode(errorCode);
				failureBean.setErrorMessage(errorMessage);
				integrationUtilManagementLocal.updateInterfaceFailerStatus(failureBean);

				responseJsonObject.put("status", "FAIL");
				responseJsonObject.put("err_code", errorCode);
				responseJsonObject.put("err_msg", errorMessage);
				return responseJsonObject;
			}

			if(convertedRequestData.contains(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE))
				convertedRequestData = convertedRequestData.replace(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE, newInterfaceSummary.getTransactionId().toString());

			TLogger.debug("refData1 : " + refData1 + " : refData5 : " + refData5 + " : TransID : " + newInterfaceSummary.getTransactionId());

			context = new InitialContext();
			dataPublisher = (DataPublisher) context.lookup(newInterfaceSummary.getInterfaces().getPublisher());
			responseBean = dataPublisher.processRequest(newInterfaceSummary.getTransactionId(), convertedRequestData, null, interfaces.getInterfaceId());
		
			responseJsonObject.put("status", "Success");
			responseJsonObject.put("interface_id", newInterfaceSummary.getInterfaces().getInterfaceId());
			responseJsonObject.put("convertedRequestData", convertedRequestData);
			responseJsonObject.put("refData1", refData1);
			responseJsonObject.put("refData5", refData5);
			responseJsonObject.put("responseBean", responseBean);
			
			return responseJsonObject;
		}
		catch (NullPointerException nullPointerException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", nullPointerException.getMessage());

			TLogger.error("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", persistenceException.getMessage());

			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", (exceptionMsg != null ? exceptionMsg : applicationException.getMessage()));

			TLogger.error(applicationException.getMessage(), applicationException);
		}
		catch(Exception exception)
		{
			responseJsonObject.put("status", "FAIL");
			responseJsonObject.put("err_code", 101L);
			responseJsonObject.put("err_msg", exception.getMessage());

			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;
			interfaces = null;
			interfaceSummary = null;
			newInterfaceSummary = null;
			dataConverter = null;
			context = null;
			dataPublisher = null;
			convertedRequestData = null;
			errorCode = null;
			errorMessage = null;
			success = true;
			requestObject = null;
			refIdAttribute = null;
			value = null;
			convertedDataList = null;
			sWriter = null;
			pWriter = null;
			refData1 = null;
			refData5 = null;
			exceptionMsg = null;
			responseBean = null;
			failureBean = null;
		}
		return responseJsonObject;
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Alogirthm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param nodeName
	 * @param nodeList
	 * @param jsonObject
	 * @throws Exception
	 */
	private void fillObject(String nodeName, NodeList nodeList, org.json.JSONObject jsonObject) throws Exception
	{
		org.json.JSONObject childJson = null;
		org.json.JSONArray childArr = null;
		String arrNodeName = null;
		
		try
		{
//			TLogger.debug(nodeName + " : isArray(nodeList) : " + isArray(nodeList));
			if(isArray(nodeList))
			{
				childArr = new org.json.JSONArray();
				for(int i = 0; i < nodeList.getLength(); i ++)
				{
					if(Document.ELEMENT_NODE == nodeList.item(i).getNodeType())
					{
						if(nodeList.item(i).getChildNodes().getLength() > 1)
						{
							arrNodeName = nodeList.item(i).getNodeName();
							fillObject(nodeList.item(i).getNodeName(), nodeList.item(i).getChildNodes(), childArr);
						}
					}
				}
			
//				TLogger.debug("Adding object : " + jsonObject + " : " + childArr);
				childJson = new org.json.JSONObject();
				childJson.put(arrNodeName, childArr);
				jsonObject.put(nodeName, childJson);
			}
			else
			{
				childJson = new org.json.JSONObject();
//				TLogger.debug("node name : " + nodeName);
				for(int i = 0; i < nodeList.getLength(); i ++)
				{
					if(Document.ELEMENT_NODE == nodeList.item(i).getNodeType())
					{
						if(nodeList.item(i).getChildNodes().getLength() == 1)
							childJson.put(nodeList.item(i).getNodeName(), nodeList.item(i).getFirstChild().getNodeValue().trim());
						if(nodeList.item(i).getChildNodes().getLength() > 1)
							fillObject(nodeList.item(i).getNodeName(), nodeList.item(i).getChildNodes(), childJson);
					}
				}
				
//				TLogger.debug("Adding object : " + jsonObject + " : " + childJson);
				jsonObject.put(nodeName, childJson);
			}
		}
		catch(Exception exception)
		{
			throw exception;
		}
		finally
		{
			childJson = null;
			childArr = null;
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Alogirthm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param nodeName
	 * @param nodeList
	 * @param jsonArr
	 * @throws Exception
	 */
	private void fillObject(String nodeName, NodeList nodeList, org.json.JSONArray jsonArr) throws Exception
	{
		org.json.JSONObject childJson = null;
		
		try
		{
			childJson = new org.json.JSONObject();
//			TLogger.debug("node name : " + nodeName);
			for(int i = 0; i < nodeList.getLength(); i ++)
			{
				if(Document.ELEMENT_NODE == nodeList.item(i).getNodeType())
				{
					if(nodeList.item(i).getChildNodes().getLength() == 1)
						childJson.put(nodeList.item(i).getNodeName(), nodeList.item(i).getFirstChild().getNodeValue().trim());
					if(nodeList.item(i).getChildNodes().getLength() > 1)
						fillObject(nodeList.item(i).getNodeName(), nodeList.item(i).getChildNodes(), childJson);
				}
			}
			
//			TLogger.debug("Adding object : " + jsonArr + " : " + childJson);
			jsonArr.put(childJson);
		}
		catch(Exception exception)
		{
			throw exception;
		}
		finally
		{
			childJson = null;
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param nodeList
	 * @return boolean
	 * @throws Exception
	 */
	private boolean isArray(NodeList nodeList) throws Exception
	{
		Set<String> nodeSet = null;
		int elementCount = 0;
		
		try
		{
			nodeSet = new HashSet<String>(); 
			for(int i = 0; i < nodeList.getLength(); i ++)
			{
				if(Document.ELEMENT_NODE == nodeList.item(i).getNodeType())
				{
					nodeSet.add(nodeList.item(i).getNodeName());
					elementCount++;
				}
			}
			if(elementCount > 1 && nodeSet.size() != elementCount)
				return true;
			return false;
		}
		catch(Exception exception)
		{
			throw exception;
		}
		finally
		{
			nodeSet = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param transId
	 * @param interfaceId
	 * @param jsonRequestData
	 * @param responseType
	 * @return String
	 * @throws ApplicationException
	 *//*
	private String staticResponseForOnlineInterface(Long transId, Long interfaceId, String jsonRequestData, String responseType) throws ApplicationException
	{
		JSONObject jsonRequest = null;
		JSONObject childJSON = null;
		String staticResponse = null;
		String childResponse = "";
		JSONObject resConf = null;
		String attributeValue = null;
		
		try
		{
			attributeValue = getInterfaceAttributeValue(interfaceId, IntegrationConstants.RESPONSE_CONF_ATTR);
			if(attributeValue != null)
				resConf = (JSONObject) new JSONParser().parse(attributeValue);

			jsonRequest = (JSONObject) ((JSONObject) new JSONParser().parse(jsonRequestData)).get("payload");

			if("Success".equalsIgnoreCase(responseType))
			{
				if(interfaceId.longValue() == IntegrationConstants.QUERY_BALANCE_INTERFACE_ID.longValue())
				{
					staticResponse = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Body><api:Result xmlns:api=\"http://cps.huawei.com/synccpsinterface/api_requestmgr\" xmlns:res=\"http://cps.huawei.com/synccpsinterface/result\"> <res:Header><res:Version>1.0</res:Version><res:OriginatorConversationID>SNOC_CONVRS_ID</res:OriginatorConversationID><res:ConversationID>SM_CONVRS_ID</res:ConversationID> </res:Header> <res:Body><res:ResultType>0</res:ResultType><res:ResultCode>0</res:ResultCode><res:ResultDesc>Process service request successfully.</res:ResultDesc><res:QueryOrganizationBalanceResult> <res:BOCompletedTime>CURRENT_TIMESTAMP</res:BOCompletedTime> <res:AccountBalanceData>ACC_BALANCE_INFO_LIST</res:AccountBalanceData></res:QueryOrganizationBalanceResult> </res:Body></api:Result> </soapenv:Body></soapenv:Envelope>";
					staticResponse = staticResponse.replace("SNOC_CONVRS_ID", transId.toString()).replace("SM_CONVRS_ID", "SM-" + transId).replace("CURRENT_TIMESTAMP", yyyyMMddHHmmssFormat.format(new Date()));

					//					staticResponse = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Body><api:Result xmlns:api=\"http://cps.huawei.com/synccpsinterface/api_requestmgr\" xmlns:res=\"http://cps.huawei.com/synccpsinterface/result\"> <res:Header><res:Version>1.0</res:Version><res:OriginatorConversationID>SNOC_CONVRS_ID</res:OriginatorConversationID><res:ConversationID>SM_CONVRS_ID</res:ConversationID> </res:Header> <res:Body><res:ResultType>0</res:ResultType><res:ResultCode>0</res:ResultCode><res:ResultDesc>Process service request successfully.</res:ResultDesc><res:QueryOrganizationBalanceResult> <res:BOCompletedTime>CURRENT_TIMESTAMP</res:BOCompletedTime> <res:AccountBalanceData><res:AccountBalanceItem> <res:AccountHolderID>ORG_REF_CODE</res:AccountHolderID> <res:AccountHolderPublicName>211674 - Agent A</res:AccountHolderPublicName> <res:AccountTypeName>Float Account</res:AccountTypeName> <res:AccountTypeAlias>Float Account</res:AccountTypeAlias> <res:AccountRuleProfileID>16</res:AccountRuleProfileID> <res:AccountRuleProfileName>Band A Store Float Account Rule Profile</res:AccountRuleProfileName> <res:AccountNo>800000000101002000</res:AccountNo> <res:AccountStatus>active</res:AccountStatus> <res:Currency>CURRENCY_IDR</res:Currency> <res:AvailableBalance>10000.00</res:AvailableBalance> <res:ReservedBalance>10.00</res:ReservedBalance> <res:UnclearedBalance>0</res:UnclearedBalance> <res:CurrentBalance>1000.00</res:CurrentBalance></res:AccountBalanceItem>ACC_BALANCE_INFO_LIST</res:AccountBalanceData></res:QueryOrganizationBalanceResult> </res:Body></api:Result> </soapenv:Body></soapenv:Envelope>";
					//					staticResponse = staticResponse.replace("SNOC_CONVRS_ID", transId.toString()).replace("SM_CONVRS_ID", "SM-" + transId).replace("CURRENT_TIMESTAMP", yyyyMMddHHmmssFormat.format(new Date())).replace("ORG_REF_CODE", (jsonRequest.get("org_ref_code").toString())).replace("CURRENCY_IDR", (jsonRequest.get("currency") != null && !jsonRequest.get("currency").toString().trim().isEmpty() ? jsonRequest.get("currency").toString() : "IDR"));

					childResponse = "<res:AccountBalanceItem> <res:AccountHolderID>ORG_REF_CODE</res:AccountHolderID> <res:AccountHolderPublicName>211674 - Agent A</res:AccountHolderPublicName> <res:AccountTypeName>Float Account</res:AccountTypeName> <res:AccountTypeAlias>Float Account</res:AccountTypeAlias> <res:AccountRuleProfileID>16</res:AccountRuleProfileID> <res:AccountRuleProfileName>Band A Store Float Account Rule Profile</res:AccountRuleProfileName> <res:AccountNo>800000000101002000</res:AccountNo> <res:AccountStatus>active</res:AccountStatus> <res:Currency>CURRENCY_IDR</res:Currency> <res:AvailableBalance>10000.00</res:AvailableBalance> <res:ReservedBalance>10.00</res:ReservedBalance> <res:UnclearedBalance>0</res:UnclearedBalance> <res:CurrentBalance>1000.00</res:CurrentBalance></res:AccountBalanceItem>";
					childResponse = childResponse.replace("ORG_REF_CODE", (jsonRequest.get("org_ref_code").toString())).replace("CURRENCY_IDR", (jsonRequest.get("currency") != null && !jsonRequest.get("currency").toString().trim().isEmpty() ? jsonRequest.get("currency").toString() : "IDR"));

					TLogger.debug("jsonRequest.get(\"query_details\") : " + jsonRequest.get("query_details"));
					if(jsonRequest.get("query_details") != null && !((JSONArray) jsonRequest.get("query_details")).isEmpty())
					{
						for(Object arrObj : ((JSONArray) jsonRequest.get("query_details")))
						{
							childResponse = childResponse + "<res:AccountBalanceItem> <res:AccountHolderID>ORG_REF_CODE</res:AccountHolderID> <res:AccountHolderPublicName>211674 - Agent A</res:AccountHolderPublicName> <res:AccountTypeName>Float Account</res:AccountTypeName> <res:AccountTypeAlias>Float Account</res:AccountTypeAlias> <res:AccountRuleProfileID>16</res:AccountRuleProfileID> <res:AccountRuleProfileName>Band A Store Float Account Rule Profile</res:AccountRuleProfileName> <res:AccountNo>800000000101002000</res:AccountNo> <res:AccountStatus>active</res:AccountStatus> <res:Currency>CURRENCY_IDR</res:Currency> <res:AvailableBalance>1000.00</res:AvailableBalance> <res:ReservedBalance>10.00</res:ReservedBalance> <res:UnclearedBalance>0</res:UnclearedBalance> <res:CurrentBalance>100.00</res:CurrentBalance></res:AccountBalanceItem>";
							childResponse = childResponse.replace("ORG_REF_CODE", arrObj.toString()).replace("CURRENCY_IDR", (jsonRequest.get("currency") != null && !jsonRequest.get("currency").toString().trim().isEmpty() ? jsonRequest.get("currency").toString() : "IDR"));
						}
					}
					staticResponse = staticResponse.replace("ACC_BALANCE_INFO_LIST", childResponse);
				}
				else if(interfaceId.longValue() == IntegrationConstants.TRANSFER_BALANCE_INTERFACE_ID.longValue())
				{
					staticResponse = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Body><api:Result xmlns:api=\"http://cps.huawei.com/synccpsinterface/api_requestmgr\" xmlns:res=\"http://cps.huawei.com/synccpsinterface/result\"> <res:Header><res:Version>1.0</res:Version><res:OriginatorConversationID>SNOC_CONVRS_ID</res:OriginatorConversationID><res:ConversationID>SM_CONVRS_ID</res:ConversationID> </res:Header> <res:Body><res:ResultType>0</res:ResultType><res:ResultCode>0</res:ResultCode><res:ResultDesc>Process service request successfully.</res:ResultDesc><res:TransactionResult> <res:TransactionID>SM_EXT_CONVRS_ID</res:TransactionID></res:TransactionResult> </res:Body></api:Result> </soapenv:Body></soapenv:Envelope>";
					staticResponse = staticResponse.replaceAll("SNOC_CONVRS_ID", transId.toString()).replace("SM_CONVRS_ID", "SM-" + transId).replace("SM_EXT_CONVRS_ID", (transId + yyyyMMddHHmmssFormat.format(new Date())));
				}
				else if(interfaceId.longValue() == IntegrationConstants.QUERY_STOCK_INTERFACE_ID.longValue())
				{
					staticResponse = "<soap-envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mob=\"http://mobii.com/\"><soapenv:Header/><soap-body><soap-response>REPLACE_ITEMS_RESPONSE</soap-response></soap-body></soap-envelope>";
					for(Object arrObj : ((JSONArray) ((JSONObject) jsonRequest.get("order")).get("products")))
					{
						childJSON = (JSONObject) arrObj;
						childResponse = childResponse + "<Item><MaterialCode>REPLACE_MAT_CODE</MaterialCode><Plant>REPLACE_PLANT_VAL</Plant><Stock>   1000.00</Stock><Remarks>OK</Remarks></Item>";
						childResponse = childResponse.replace("REPLACE_MAT_CODE", childJSON.get("matrl_code").toString()).replace("REPLACE_PLANT_VAL", childJSON.get("plant") != null ? childJSON.get("plant").toString() : "");
					}
					staticResponse = staticResponse.replace("REPLACE_ITEMS_RESPONSE", childResponse);
				}
				else if(interfaceId.longValue() == IntegrationConstants.CREATE_SO_INTERFACE_ID.longValue())
				{
					staticResponse = "<soap-envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mob=\"http://mobii.com/\"><soapenv:Header/><soap-body><soap-response><Item><SAP_SO_Number>REPLACE_SAP_SO_ID</SAP_SO_Number><Mobii_PO_Number>REPLACE_MOBI_PO_NO</Mobii_PO_Number><SO_Date>REPLACE_SO_DATE</SO_Date><Status>1</Status><SO_Amount>20000.00</SO_Amount></Item></soap-response></soap-body></soap-envelope>";
					staticResponse = staticResponse.replace("REPLACE_SAP_SO_ID", MMddHHmmss.format(new Date())).replace("REPLACE_MOBI_PO_NO", ((JSONObject) jsonRequest.get("order")).get("po_no").toString()).replace("REPLACE_SO_DATE", dd_dot_MM_dot_yyyy.format(new Date()));
				}
			}
			else if("Failure".equalsIgnoreCase(responseType))
			{
				if(interfaceId.longValue() == IntegrationConstants.QUERY_BALANCE_INTERFACE_ID.longValue())
				{
					staticResponse = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Body><api:Result xmlns:api=\"http://cps.huawei.com/synccpsinterface/api_requestmgr\" xmlns:res=\"http://cps.huawei.com/synccpsinterface/result\"> <res:Header><res:Version>1.0</res:Version><res:OriginatorConversationID>SNOC_CONVRS_ID</res:OriginatorConversationID><res:ConversationID>SM_CONVRS_ID</res:ConversationID> </res:Header> <res:Body><res:ResultType>0</res:ResultType><res:ResultCode>100</res:ResultCode><res:ResultDesc>Process service request failed.</res:ResultDesc><res:QueryOrganizationBalanceResult> <res:BOCompletedTime>CURRENT_TIMESTAMP</res:BOCompletedTime> </res:QueryOrganizationBalanceResult> </res:Body></api:Result> </soapenv:Body></soapenv:Envelope>";
					staticResponse = staticResponse.replace("SNOC_CONVRS_ID", transId.toString()).replace("SM_CONVRS_ID", "SM-" + transId).replace("CURRENT_TIMESTAMP", yyyyMMddHHmmssFormat.format(new Date()));
				}
				else if(interfaceId.longValue() == IntegrationConstants.TRANSFER_BALANCE_INTERFACE_ID.longValue())
				{
					staticResponse = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"> <soapenv:Body><api:Result xmlns:api=\"http://cps.huawei.com/synccpsinterface/api_requestmgr\" xmlns:res=\"http://cps.huawei.com/synccpsinterface/result\"> <res:Header><res:Version>1.0</res:Version><res:OriginatorConversationID>SNOC_CONVRS_ID</res:OriginatorConversationID><res:ConversationID>SM_CONVRS_ID</res:ConversationID> </res:Header> <res:Body><res:ResultType>0</res:ResultType><res:ResultCode>100</res:ResultCode><res:ResultDesc>Process service request failed.</res:ResultDesc><res:TransactionResult> <res:TransactionID>SM_EXT_CONVRS_ID</res:TransactionID></res:TransactionResult> </res:Body></api:Result> </soapenv:Body></soapenv:Envelope>";
					staticResponse = staticResponse.replaceAll("SNOC_CONVRS_ID", transId.toString()).replace("SM_CONVRS_ID", "SM-" + transId).replace("SM_EXT_CONVRS_ID", (transId + yyyyMMddHHmmssFormat.format(new Date())));
				}
				else if(interfaceId.longValue() == IntegrationConstants.QUERY_STOCK_INTERFACE_ID.longValue())
				{
					//					staticResponse = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mob=\"http://mobii.com/\"><soapenv:Header/><soapenv:Body><mob:MT_QueryStock_Response></mob:MT_QueryStock_Response></soapenv:Body></soapenv:Envelope>";
					staticResponse = "<soap-envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mob=\"http://mobii.com/\"><soapenv:Header/><soap-body><soap-response>REPLACE_ITEMS_RESPONSE</soap-response></soap-body></soap-envelope>";
					for(Object arrObj : ((JSONArray) ((JSONObject) jsonRequest.get("order")).get("products")))
					{
						childJSON = (JSONObject) arrObj;
						childResponse = childResponse + "<Item><MaterialCode>REPLACE_MAT_CODE</MaterialCode><Plant>REPLACE_PLANT_VAL</Plant><Stock>0.00</Stock><Remarks>Request Failed..</Remarks></Item>";
						childResponse = childResponse.replace("REPLACE_MAT_CODE", childJSON.get("matrl_code").toString()).replace("REPLACE_PLANT_VAL", childJSON.get("plant") != null ? childJSON.get("plant").toString() : "");
					}
					staticResponse = staticResponse.replace("REPLACE_ITEMS_RESPONSE", childResponse);
				}
				else if(interfaceId.longValue() == IntegrationConstants.CREATE_SO_INTERFACE_ID.longValue())
				{
					staticResponse = "<soap-envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mob=\"http://mobii.com/\"><soapenv:Header/><soap-body><soap-response><Item><Mobii_PO_Number>REPLACE_MOBI_PO_NO</Mobii_PO_Number><SO_Date>REPLACE_SO_DATE</SO_Date><Status>0</Status><Rejection_Note>Request failed..</Rejection_Note></Item></soap-response></soap-body></soap-envelope>";
					staticResponse = staticResponse.replace("REPLACE_MOBI_PO_NO", ((JSONObject) jsonRequest.get("order")).get("po_no").toString()).replace("REPLACE_SO_DATE", dd_dot_MM_dot_yyyy.format(new Date()));
				}
			}
			else
			{
				staticResponse = "<soap-envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap-body><soap-fault><faultcode>soapenv:Server</faultcode><faultstring>Application Error. Please see FaultInfo</faultstring><detail><ns2:FaultInfo xmlns:ns3=\"http://com/enhancesys/entities/schema/integration\" xmlns:ns2=\"http://com/enhancesys/integration/services/interfaces/IntegrationManagement\"><causedBy>java.lang.NullPointerException</causedBy><message>Error in initialising entity manager</message></ns2:FaultInfo></detail></soap-fault></soap-body></soap-envelope>";
			}
			
			if (attributeValue!=null) 
			{
				if(resConf != null)
				{
					staticResponse = staticResponse.replaceAll("soap-envelope", resConf.get("soap-envelope").toString());
					staticResponse = staticResponse.replaceAll("soap-body",resConf.get("soap-body").toString());
					staticResponse = staticResponse.replaceAll("soap-response", resConf.get("soap-response").toString());
					staticResponse = staticResponse.replaceAll("soap-fault", resConf.get("soap-fault").toString());
					if(resConf.get("soap-header")!=null)
						staticResponse = staticResponse.replaceAll("soap-header", resConf.get("soap-header").toString());
				}
			}
			
			staticResponse = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+staticResponse;
			
			return staticResponse;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception : " + exception.getMessage(), exception);
		}
		finally
		{
			jsonRequest = null;
			childJSON = null;
			childResponse = null;
			resConf = null;
			attributeValue = null;
		}
		return staticResponse;
	}
*/
	/**
	 * @author Vinayak Mahadev
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param xml
	 * @return
	 */
	private String formatXml(String xml) 
	{
		try 
		{
			final InputSource src = new InputSource(new StringReader(xml));
			final Node document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(src).getDocumentElement();
			final Boolean keepDeclaration = Boolean.valueOf(xml.startsWith("<?xml"));
			
			//May need this: System.setProperty(DOMImplementationRegistry.PROPERTY,"com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl");
			final DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();
			final DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation("LS");
			final LSSerializer writer = impl.createLSSerializer();
			
			writer.getDomConfig().setParameter("format-pretty-print", Boolean.TRUE); // Set this to true if the output needs to be beautified.
			writer.getDomConfig().setParameter("xml-declaration", keepDeclaration); // Set this to true if the declaration is needed to be outputted.
			
			return writer.writeToString(document);
		} 
		catch (Exception e) 
		{
			TLogger.error("Unhandled Exception : " + e.getMessage(), e);
			throw new RuntimeException(e);
		}
	}
	
	/**
	 * @author Vineetha
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaces
	 * @param jsonRequestData
	 * @param refId
	 * @return ResponseBean
	 * @throws ApplicationException
	 */
	private ResponseBean convertRequest(Interfaces interfaces, String jsonRequestData, String refId, Long refData3) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry convertRequest.." + interfaces.getInterfaceId());
		}

		InterfaceSummary summary = null;
		InterfaceSummary interfaceSummary = null;
		InterfaceSummary newInterfaceSummary = null;
		DataConverter dataConverter = null;
		Context context = null;
		String convertedRequestData = null;
		Long errorCode = null;
		String errorMessage = null;
		Boolean success = true;
		ResponseBean responseBean = null;
		ResponseBean resBean = null;
		BasicDBObject requestObject = null;
		BasicDBObject inputObject = null;
		BasicDBObject outputObject = null;
		String refIdAttribute = null;
		Object value = null;
		List<String> convertedDataList = null;
		String syncOffAttribute = null;
		StringWriter sWriter = null;
		PrintWriter pWriter = null;
		ApplicationException appException = null;
		Exception newException = null;
		String refData1 = null;
		String refData5 = null;
		String exceptionMsg = null;
		boolean isException = false;		

		try
		{
			resBean = new ResponseBean();

			if(interfaces == null)
			{
				TLogger.error("Interfaces Object should not be empty..");
				throw new IntegrationManagement.ConvertRequestException("Interfaces Object should not be empty..", null);
			}
			if(jsonRequestData == null)
			{
				TLogger.error("JSON Request should not be empty..");
				throw new IntegrationManagement.ConvertRequestException("JSON Request should not be empty..", null);
			}

			if(IntegrationConstants.SYNC_OFF_INTERFACE_LIST.contains(interfaces.getInterfaceId().toString()))
			{
				syncOffAttribute = integrationManagementLocal.getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.SYNC_OFF_ATTR);
				if(syncOffAttribute != null && !syncOffAttribute.trim().isEmpty() && "true".equalsIgnoreCase(syncOffAttribute.trim()))
				{
					TLogger.debug("Synchronization is disabled/off on modification of interface : " + interfaces.getInterfaceId());
					return null;
				}
			}

			interfaceSummary = new InterfaceSummary();
			interfaceSummary.setInterfaces(interfaces);
			interfaceSummary.setOriginalRequestData(jsonRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestData(jsonRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
			interfaceSummary.setRequestTime(new Date());
			interfaceSummary.setStatus(entityManager.find(Status.class, IntegrationConstants.INTERMEDIATE_STATUS));
			interfaceSummary.setRetryCount(0L);

			if(refData3 != null)
				interfaceSummary.setReferenceData3(refData3);

			if(refId != null && !refId.trim().isEmpty())
				interfaceSummary.setReferenceData1(refId);

			newInterfaceSummary = integrationManagementLocal.createInterfaceSummary(interfaceSummary);
			resBean.setTransactionId(newInterfaceSummary.getTransactionId());

			//Setting refId in refData1..
			if(refId == null || refId.trim().isEmpty())
			{
				refIdAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.REF_ID_ATTR);
				if(refIdAttribute == null || refIdAttribute.trim().isEmpty())
				{
					TLogger.error("Pls configure the ref id attribute for interface id :: " + interfaces.getInterfaceId());
					throw new IntegrationManagement.ConvertRequestException("Pls configure the ref id attribute for interface id :: " + interfaces.getInterfaceId(), null);
				}
				requestObject = (BasicDBObject) JSON.parse(jsonRequestData);
				if(requestObject != null)
				{
					value = getFieldValue(requestObject, refIdAttribute);
					if(value != null)
					{
						TLogger.debug("Ref ID : " + value);
						if(value instanceof String || value instanceof Long || value instanceof Integer)
							refData1 = value.toString();
						if(refData1 == null || refData1.trim().isEmpty())
							TLogger.debug("Reference ID is empty..");
					}
					else
						TLogger.debug("Reference ID is empty..");
				}
			}

			//Setting refData5..
			refIdAttribute = getInterfaceAttributeValue(interfaces.getInterfaceId(), IntegrationConstants.REF_CODE_PATH_ATTR);
			if(refIdAttribute == null || refIdAttribute.trim().isEmpty())
			{
				TLogger.error("Pls configure the ref code path attribute for inteface id :: " + interfaces.getInterfaceId());
				throw new IntegrationManagement.ConvertRequestException("Pls configure the ref code path attribute for inteface id :: " + interfaces.getInterfaceId(), null);
			}

			requestObject = (BasicDBObject) JSON.parse(jsonRequestData);
			value = getFieldValue(requestObject, refIdAttribute);
			TLogger.debug("Ref Data Path Value : " + value);
			if(value != null)
			{
				if(interfaces.getInterfaceId().longValue() == IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue() 
						|| interfaces.getModule().getModuleId().longValue() == IntegrationConstants.SM_USER_CREATION_MODULE_ID.longValue())
				{
					refData5 = value.toString();
				}
				else
				{
					inputObject = new BasicDBObject();
					inputObject.append("_id", Long.valueOf(value.toString()));

					if(interfaces.getInterfaceId().longValue() == IntegrationConstants.ORG_MODIFICATION_INTERFACE_ID.longValue() 
							|| interfaces.getInterfaceId().longValue() == IntegrationConstants.ORG_STATUS_CHANGE_INTERFACE_ID.longValue())
					{
						outputObject = mongoUtil.findOne("snoc", "organization", inputObject);
						if(outputObject != null)
							refData5 = outputObject.get("ref_code") != null ? outputObject.getString("ref_code") : null;
					}
					else if(interfaces.getInterfaceId().longValue() == IntegrationConstants.USER_MODIFICATION_INTERFACE_ID.longValue() 
							|| interfaces.getInterfaceId().longValue() == IntegrationConstants.USER_STATUS_CHANGE_INTERFACE_ID.longValue())
					{
						outputObject = mongoUtil.findOne("snoc", "user", inputObject);
						if(outputObject != null)
							refData5 = outputObject.get("operator_id") != null ? outputObject.getString("operator_id") : null;
					}
				}
			}

			context = new InitialContext();	
			if(interfaces.getConverter() != null && !equals(interfaces.getConverter().trim().isEmpty()))
			{
				dataConverter = (DataConverter) context.lookup(interfaces.getConverter());
				if(dataConverter == null)
				{
					TLogger.error("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId());
					throw new IntegrationManagement.ConvertRequestException("Pls configure the converter for the inteface id :: " + interfaces.getInterfaceId(), null);
				}

				try
				{
					convertedRequestData = dataConverter.processRequest(interfaces.getInterfaceId(), jsonRequestData, null);
				}
				catch(ApplicationException applicationException)
				{
					appException = applicationException;
					if(applicationException.getFaultInfo() != null)
					{
						errorMessage = applicationException.getFaultInfo().getMessage();
						exceptionMsg = applicationException.getFaultInfo().getMessage();
					}
					else
					{
						sWriter = new StringWriter();
						pWriter = new PrintWriter(sWriter);
						applicationException.printStackTrace(pWriter);
						errorMessage = sWriter.toString();
						exceptionMsg = applicationException.getMessage();
					}

					TLogger.error("Exception Occured :: " + applicationException.getMessage());
					isException = true;
				}
				catch(Exception exception)
				{
					newException = exception;
					exceptionMsg = exception.getMessage();

					sWriter = new StringWriter();
					pWriter = new PrintWriter(sWriter);
					exception.printStackTrace(pWriter);
					TLogger.error("Exception Occured :: " + exception.getMessage());
					isException = true;
					errorMessage = exception.getMessage();
				}	
			}

			TLogger.debug("IsException : " + isException);

			if(isException)
			{
				if(refId == null || refId.trim().isEmpty())
					newInterfaceSummary.setReferenceData1(refData1);
				newInterfaceSummary.setReferenceData5(refData5);
				integrationManagementLocal.updateInterfaceSummary(newInterfaceSummary);

				responseBean = new ResponseBean();
				responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
				responseBean.setTransactionId(newInterfaceSummary.getTransactionId());
				responseBean.setErrorCode(IntegrationConstants.SERVICE_ERROR_CODE);
				if(errorMessage != null && errorMessage.trim().length() > IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue())
				{
					errorMessage = errorMessage.substring(0, (IntegrationConstants.ERROR_MESSAGE_CHAR_LIMIT.intValue() - 1));
				}
				responseBean.setErrorMessage(errorMessage);
				integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);

				resBean.setErrorMessage(exceptionMsg);
				throw new IntegrationManagement.ConvertRequestException(exceptionMsg, appException != null ? appException : newException);
			}
			summary = entityManager.find(InterfaceSummary.class, newInterfaceSummary.getTransactionId());

			if(convertedRequestData != null && !convertedRequestData.trim().isEmpty())
			{
				TLogger.debug("Inside convertRequestData.." + summary.getTransactionId());
				summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
				summary.setStatus(entityManager.find(Status.class, IntegrationConstants.IN_QUEUE_STATUS));

				if(convertedRequestData.endsWith("Error"))
				{
					convertedDataList = Arrays.asList(convertedRequestData.split(","));
					for(String msg : convertedDataList)
					{
						if(msg.contains("ErrorCode"))
						{
							errorCode = Long.parseLong(msg.split(":")[1]);
						}
						else if(msg.contains("ErrorMessage"))
						{
							errorMessage = msg.split(":")[1];
						}
					}
					success = false;
				}

				if(!success)
				{
					responseBean = new ResponseBean();
					responseBean.setStatusId(IntegrationConstants.ERROR_STATUS); 
					responseBean.setTransactionId(summary.getTransactionId());
					responseBean.setErrorCode(errorCode);
					responseBean.setErrorMessage(errorMessage);
					integrationUtilManagementLocal.updateInterfaceFailerStatus(responseBean);
					return null;
				}
				if(convertedRequestData.contains(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE))
				{
					convertedRequestData = convertedRequestData.replace(IntegrationConstants.TRANS_ID_IN_CONVERTER_TEMPLATE, summary.getTransactionId().toString());
					summary.setRequestData(convertedRequestData.getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
				}
			}

			TLogger.debug("refData1 : " + refData1 + " : refData5 : " + refData5 + " : TransID : " + summary.getTransactionId());
			if(refId == null || refId.trim().isEmpty())
				summary.setReferenceData1(refData1);
			summary.setReferenceData5(refData5);
			entityManager.flush();

			return resBean;
		}
		catch (NullPointerException nullPointerException)
		{
			if(resBean.getErrorMessage() == null)
				resBean.setErrorMessage(nullPointerException.getMessage());
			resBean.setErrorCode(101L);
			TLogger.error("Error in initialising entity manager", nullPointerException);
//			throw new IntegrationManagement.ConvertRequestException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			if(resBean.getErrorMessage() == null)
				resBean.setErrorMessage(persistenceException.getMessage());
			resBean.setErrorCode(101L);
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
//			throw new IntegrationManagement.ConvertRequestException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			if(resBean.getErrorMessage() == null)
				resBean.setErrorMessage(applicationException.getMessage());
			resBean.setErrorCode(101L);
			TLogger.error(applicationException.getMessage(), applicationException);
//			throw applicationException;
		}
		catch(Exception exception)
		{
			if(resBean.getErrorMessage() == null)
				resBean.setErrorMessage(exception.getMessage());
			resBean.setErrorCode(101L);
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
//			throw new IntegrationManagement.ConvertRequestException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			summary = null;
			newInterfaceSummary = null;
			dataConverter = null;
			context = null;
			convertedRequestData = null;
			interfaceSummary = null;
			errorCode = null;
			errorMessage = null;
			success = true;
			responseBean = null;
			requestObject = null;
			refIdAttribute = null;
			convertedDataList = null;
			syncOffAttribute = null;
			inputObject = null;
			outputObject = null;
			pWriter = null;
			sWriter = null;
			appException = null;
			newException = null;
			refData1 = null;
			refData5 = null;
			exceptionMsg = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit convertRequest.." + interfaces.getInterfaceId());
			}
		}
		return resBean;
	}
	
	/**
	 * @author Suresh Uppru
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param dbObject
	 * @param path
	 * @return Object
	 * @throws Exception
	 */
	private Object getFieldValue(BasicDBObject dbObject, String path) throws Exception
	{
		BasicDBObject tempObject = null;
		String[] arr = null;

		try
		{
			if(dbObject == null || (path == null || path.trim().isEmpty()))
			{
				TLogger.debug("DBObject : " + dbObject + " : Path : " + path);
				return null;
			}

			tempObject = dbObject;
			arr = path.split("\\.");
//			TLogger.debug("arr.length : " + arr.length);
			for(int i = 0; i < arr.length; i ++)
			{
//				TLogger.debug("arr[i] : " + arr[i] + " :: tempObject.get(arr[i]) : " + tempObject.get(arr[i]));
				if(tempObject.get(arr[i]) == null || tempObject.get(arr[i]).toString().trim().isEmpty())
				{
//					TLogger.debug("inside null..");
					return "";
				}
				if(tempObject.get(arr[i]) instanceof BasicDBObject)
				{
//					TLogger.debug("inside Object.." + tempObject.get(arr[i]));
					tempObject = (BasicDBObject) tempObject.get(arr[i]);
					if(i == arr.length - 1)
						return tempObject;
				}
				if(tempObject.get(arr[i]) instanceof BasicDBList)
				{
//					TLogger.debug("inside List..");
					return tempObject.get(arr[i]);
				}
				if(tempObject.get(arr[i]) instanceof String)
				{
//					TLogger.debug("inside String.." + tempObject.get(arr[i]));
					return tempObject.get(arr[i]);
				}
				if(tempObject.get(arr[i]) instanceof Long)
				{
//					TLogger.debug("inside Long.." + tempObject.get(arr[i]));
					return ((Long) tempObject.get(arr[i])).toString();
				}
				if(tempObject.get(arr[i]) instanceof Integer)
				{
//					TLogger.debug("insdie integer.." + tempObject.get(arr[i]));
					return ((Integer) tempObject.get(arr[i])).toString();
				}
				if(tempObject.get(arr[i]) instanceof Double)
				{
//					TLogger.debug("inside Double.." + tempObject.get(arr[i]));
					return ((Double) tempObject.get(arr[i])).toString();
				}
			}
			return null;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ConvertRequestException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			tempObject = null;
			arr = null;
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void processOrderResponseConsumer(Long interfaceId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		TLogger.debug("Entry processOrderResponseConsumer.. Started at --> " + interfaceId + " : "+ new Date());

		Interfaces interfaces = null;
		Context context = null;
		DataConsumer consumer = null;
		ResponseBean responseBean = null;
		JSONObject jsonObject = null;
		InterfaceSummary summary = null;
//		InterfaceFileSummary fileSummary = null;
//		Connection connection = null;
//		PreparedStatement statement = null;
		String queueConsumer = null;
		String orderMasterId = null;

		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.ProcessOrderResponseConsumerException("Interface ID should not be empty..", null);
			}

			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID.. " + interfaceId);
				throw new IntegrationManagement.ProcessOrderResponseConsumerException("Interface does not exist for the given ID.. " + interfaceId, null);
			}

			if(!IntegrationConstants.PENDING_FOR_RESPONSE_INTERFACES.contains(interfaceId.toString()))
				return;

			context = new InitialContext();
			queueConsumer = getInterfaceAttributeValue(interfaceId, IntegrationConstants.QUEUE_CONSUMER_ATTR);
			consumer = (DataConsumer) context.lookup(queueConsumer);
			responseBean = consumer.processRequest(interfaces.getInterfaceId(), null);
			if(responseBean.getResponseData() != null && !responseBean.getResponseData().trim().isEmpty())
			{
				jsonObject = (JSONObject) new JSONParser().parse(responseBean.getResponseData());
				orderMasterId = ((JSONObject) jsonObject.get("data")).get("ord_master_id").toString();

//				Class.forName(IntegrationConstants.INTERFACE_JDBC_DRIVER);
//				connection = DriverManager.getConnection(IntegrationConstants.INTERFACE_JDBC_URL, IntegrationConstants.INTERFACE_JDBC_USER, IntegrationConstants.INTERFACE_JDBC_PASS);
				
				summary = getInterfaceSummaryByRefData4(Long.parseLong(orderMasterId));
//				TLogger.debug("summary : " + summary.getTransactionId());
				if(summary != null)
				{
//					TLogger.debug("OrderMasterID : " + summary.getReferenceData4());
				/*	fileSummary = getInterfaceFileSummary(summary.getReferenceData3());
					int len = (new String(summary.getOriginalRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim().split(",")).length;
					long successCount = fileSummary.getSuccessCount();
					long errorCount = fileSummary.getErrorCount();*/
					summary.setOriginalResponseData(JSON.serialize(jsonObject).getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
					summary.setResponseData(JSON.serialize(jsonObject).getBytes(IntegrationConstants.FILE_ENCODE_FORMAT));
					if(jsonObject.containsKey("ord_id") && jsonObject.get("ord_id") != null)
						summary.setReferenceData2(Long.parseLong(jsonObject.get("ord_id").toString()));
					boolean errorFlag = false;
//					long len = (new String(summary.getOriginalRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim().split(",")).length;
					
					/*if(IntegrationConstants.SP_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
					{
						statement = connection.prepareStatement(IntegrationConstants.spStockDumpUpdateQry);
					}
					else if(IntegrationConstants.SP_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
					{
						statement = connection.prepareStatement(IntegrationConstants.spAllocDumpUpdateQry);
					}
					else if(IntegrationConstants.VO_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
					{
						statement = connection.prepareStatement(IntegrationConstants.voucherStockDumpUpdateQry);
					}
					else if(IntegrationConstants.VO_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
					{
						statement = connection.prepareStatement(IntegrationConstants.voucherAllocDumpUpdateQry);
					}*/
					
//					TLogger.debug("success count : " + successCount + " : error count : " + errorCount);
//					TLogger.debug("statement : " + statement + " : error status : " + IntegrationConstants.ERROR_STATUS);
//					jsonObject.containsKey("status") && jsonObject.get("status") != null && jsonObject.get("status").toString().trim().equalsIgnoreCase(IntegrationConstants.ORDER_SUCCESS_STATUS.trim())
					if(jsonObject.containsKey("status") && jsonObject.get("status") != null && jsonObject.get("status").toString().trim().equalsIgnoreCase(IntegrationConstants.ORDER_SUCCESS_STATUS.trim()))
					{
						TLogger.debug("success");
						if(!IntegrationConstants.INTERMEDIATE_STATUS.equals(summary.getStatus().getStatusId()))
						{
							summary.setStatus(entityManager.find(Status.class, IntegrationConstants.COMPLETED_STATUS));
						}
						/*if(IntegrationConstants.VO_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setLong(1, IntegrationConstants.COMPLETED_STATUS);
							statement.setString(4, summary.getReferenceData1());
							statement.setLong(5, summary.getReferenceData3());
							statement.setLong(6, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS);
						}
						else if(IntegrationConstants.VO_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setLong(1, IntegrationConstants.COMPLETED_STATUS);
							statement.setString(4, summary.getReferenceData1().split("~")[0]);
							statement.setString(5, summary.getReferenceData1().split("~")[1]);
							statement.setLong(6, summary.getReferenceData3());
							statement.setLong(7, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS);
						}
						else if(IntegrationConstants.SP_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setString(1, IntegrationConstants.COMPLETED_STATUS.toString());
							statement.setString(4, summary.getReferenceData1());
							statement.setString(5, summary.getReferenceData3().toString());
							statement.setString(6, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS.toString());
						}
						else if(IntegrationConstants.SP_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setString(1, IntegrationConstants.COMPLETED_STATUS.toString());
							statement.setString(4, summary.getReferenceData1().split("~")[0]);
							statement.setString(5, summary.getReferenceData1().split("~")[1]);
							statement.setString(6, summary.getReferenceData3().toString());
							statement.setString(7, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS.toString());
						}
						
						statement.setString(2, null);
						statement.setString(3, null);
						int rowsUpdated = statement.executeUpdate();
						TLogger.debug(rowsUpdated + " Rows updated Sucessfully..");
						
						statement.close();*/
					}
					else
					{
						TLogger.debug("error");
						errorFlag = true;
						summary.setStatus(entityManager.find(Status.class, IntegrationConstants.ERROR_STATUS));
						/*if(IntegrationConstants.VO_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setLong(1, IntegrationConstants.ERROR_STATUS);
							statement.setString(4, summary.getReferenceData1());
							statement.setLong(5, summary.getReferenceData3());
							statement.setLong(6, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS);
						}
						else if(IntegrationConstants.VO_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setLong(1, IntegrationConstants.ERROR_STATUS);
							statement.setString(4, summary.getReferenceData1().split("~")[0]);
							statement.setString(5, summary.getReferenceData1().split("~")[1]);
							statement.setLong(6, summary.getReferenceData3());
							statement.setLong(7, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS);
						}
						else if(IntegrationConstants.SP_STOCK_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setString(1, IntegrationConstants.ERROR_STATUS.toString());
							statement.setString(4, summary.getReferenceData1());
							statement.setString(5, summary.getReferenceData3().toString());
							statement.setString(6, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS.toString());
						}
						else if(IntegrationConstants.SP_ALLOC_DUMP_PUB_INTERFACE_ID.longValue() == summary.getInterfaces().getInterfaceId().longValue())
						{
							statement.setString(1, IntegrationConstants.ERROR_STATUS.toString());
							statement.setString(4, summary.getReferenceData1().split("~")[0]);
							statement.setString(5, summary.getReferenceData1().split("~")[1]);
							statement.setString(6, summary.getReferenceData3().toString());
							statement.setString(7, IntegrationConstants.PENDING_FOR_RES_UPDATE_STATUS.toString());
						}
						
						statement.setString(2, (jsonObject.get("err_code") != null ? jsonObject.get("err_code").toString() : "212"));
						statement.setString(3, (jsonObject.get("err_msg") != null ? jsonObject.get("err_msg").toString() : "Internal Server Error.."));
						int rowsUpdated = statement.executeUpdate();
						TLogger.debug(rowsUpdated + " Rows updated Sucessfully..");*/
					
					}
					
						TLogger.debug("updating summary .. " + summary.getTransactionId());
						summary.setResponseTime(new Date());
						integrationManagementLocal.updateInterfaceSummary(summary);
						if(errorFlag)
						{
							/*fileSummary = getInterfaceFileSummary(summary.getReferenceData3());
							long successCount = fileSummary.getSuccessCount();
							long errorCount = fileSummary.getErrorCount();
							fileSummary.setSuccessCount(successCount - len);
							fileSummary.setErrorCount(errorCount + len);
							integrationManagementLocal.updateInterfaceFileSummary(fileSummary);*/
							
							InterfaceFailure interfaceFailure = new InterfaceFailure();
							interfaceFailure.setInterfaceSummary(summary);
							interfaceFailure.setFileId(summary.getReferenceData3());
							interfaceFailure.setErrorCode(jsonObject.get("err_code") != null && !jsonObject.get("err_code").toString().isEmpty() ? Long.parseLong(jsonObject.get("err_code").toString()) : IntegrationConstants.INTERNAL_SERVER_ERR_CODE);
							interfaceFailure.setErrorMessage(jsonObject.get("err_msg") != null && !jsonObject.get("err_msg").toString().isEmpty() ? jsonObject.get("err_msg").toString() : "Internal Server Error..");
							integrationManagementLocal.createInterfaceFailure(interfaceFailure);
						}
				}
			}
			else
				TLogger.debug("Response is empty from Queue..");
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.ProcessOrderResponseConsumerException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ProcessOrderResponseConsumerException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ProcessOrderResponseConsumerException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			context = null;
			consumer = null;
			responseBean = null;
			jsonObject = null;
			summary = null;
//			connection = null;
//			statement = null;
			queueConsumer = null;
			orderMasterId = null;
			
			TLogger.debug("Exit processOrderResponseConsumer " + interfaceId + " service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			startTime = null;
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param flag
	 * @return String
	 */
	private String getSMInterfaceMessage(Long interfaceId, boolean flag)
	{
		String message = "";
		
		try
		{
			if(interfaceId.longValue() == IntegrationConstants.ORG_CREATION_INTERFACE_ID.longValue())
				message = "Organization Creation ";
			else if(interfaceId.longValue() == IntegrationConstants.ORG_MODIFICATION_INTERFACE_ID.longValue())
				message = "Organization Modification ";
			else if(interfaceId.longValue() == IntegrationConstants.ORG_STATUS_CHANGE_INTERFACE_ID.longValue())
				message = "Organization Status Change ";
			else if(interfaceId.longValue() == IntegrationConstants.USER_MODIFICATION_INTERFACE_ID.longValue())
				message = "User Modification ";
			else if(interfaceId.longValue() == IntegrationConstants.USER_STATUS_CHANGE_INTERFACE_ID.longValue())
				message = "User Status Change ";
			else
				message = "User Creation ";
			
			if(flag)
				message += "Success. ";
			else
				message += "Failed. ";
			return message;
		}
		catch(Exception exception)
		{
			return "";
		}
		finally
		{
			message = null;
		}
	}
	
	public Boolean skipCompression(String interfaceId)
	{
		Boolean skipFlag = false;
		if (IntegrationConstants.SKIP_COMPRESSION_FOR_SEND_FILES != null
				&& !IntegrationConstants.SKIP_COMPRESSION_FOR_SEND_FILES.isEmpty()
				&& (Arrays.asList(IntegrationConstants.SKIP_COMPRESSION_FOR_SEND_FILES.split(","))
						.contains(interfaceId)))
		{
			skipFlag = true;
		}
		return skipFlag;
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceSummary
	 * @return InterfaceSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public InterfaceSummary updateSummaryRequestData(InterfaceSummary interfaceSummary) throws ApplicationException
	{
		InterfaceSummary existingInterfaceSummary = null;
		
		try
		{
			if(interfaceSummary == null)
			{
				TLogger.debug("Interface Summary object should not be empty..");
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Interface Summary object should not be empty..", null);
			}
			if(interfaceSummary.getTransactionId() == null)
			{
				TLogger.debug("Transaction ID should not be empty..");
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Transaction ID should not be empty..", null);
			}
			
			existingInterfaceSummary = entityManager.find(InterfaceSummary.class, interfaceSummary.getTransactionId());
			if(existingInterfaceSummary == null)
			{
				TLogger.debug("Interface Summary does not exist for the given ID.." + interfaceSummary.getTransactionId());
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Interface Summary does not exist for the given ID.." + interfaceSummary.getTransactionId(), null);
			}
			
			if(interfaceSummary.getOriginalRequestData() != null && !new String(interfaceSummary.getOriginalRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim().isEmpty())
				existingInterfaceSummary.setOriginalRequestData(interfaceSummary.getOriginalRequestData());
			if(interfaceSummary.getRequestData() != null && !new String(interfaceSummary.getRequestData(), IntegrationConstants.FILE_ENCODE_FORMAT).trim().isEmpty())
				existingInterfaceSummary.setRequestData(interfaceSummary.getRequestData());
			if(interfaceSummary.getStatus() != null && interfaceSummary.getStatus().getStatusId() != null)
				existingInterfaceSummary.setStatus(this.entityManager.find(Status.class,interfaceSummary.getStatus().getStatusId()));
			
			entityManager.flush();
			return existingInterfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateSummaryRequestDataException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateSummaryRequestDataException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateSummaryRequestDataException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			existingInterfaceSummary = null;
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param dailyDumpSummary
	 * @return DailyDumpSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public DailyDumpSummary createDailyDumpSummary(DailyDumpSummary dailyDumpSummary) throws ApplicationException
	{
		TLogger.debug("Entry createDailyDumpSummary..");
		
		DailyDumpSummary newDailyDumpSummary = null;
		Interfaces interfaces = null;
		
		try
		{
			if(dailyDumpSummary == null)
			{
				TLogger.error("Daily Dump Summary should not be empty..");
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Daily Dump Summary should not be empty..", null);
			}
			if(dailyDumpSummary.getInterfaces() == null || dailyDumpSummary.getInterfaces().getInterfaceId() == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Interface ID should not be empty..", null);
			}
			if(dailyDumpSummary.getStatus() == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Status should not be empty..", null);
			}
			
			interfaces = entityManager.find(Interfaces.class, dailyDumpSummary.getInterfaces().getInterfaceId());
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID : " + dailyDumpSummary.getInterfaces().getInterfaceId());
				throw new IntegrationManagement.UpdateSummaryRequestDataException("Interface does not exist for the given ID : " + dailyDumpSummary.getInterfaces().getInterfaceId(), null);
			}
			
			newDailyDumpSummary = new DailyDumpSummary();
			newDailyDumpSummary.setInterfaces(interfaces);
			newDailyDumpSummary.setStatus(dailyDumpSummary.getStatus());
			if(dailyDumpSummary.getCreatedDate() != null)
				newDailyDumpSummary.setCreatedDate(dailyDumpSummary.getCreatedDate());
			else
				newDailyDumpSummary.setCreatedDate(new Date());
			
			entityManager.persist(newDailyDumpSummary);
			entityManager.flush();
			
			return newDailyDumpSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.CreateDailyDumpSummaryException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.CreateDailyDumpSummaryException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.CreateDailyDumpSummaryException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			newDailyDumpSummary = null;
			interfaces = null;
			
			TLogger.debug("Exit createDailyDumpSummary..");
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param createdDate
	 * @return ResponseBean
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public ResponseBean notifyInterfaceOnDump(Long interfaceId, Date createdDate) throws ApplicationException
	{
		TLogger.debug("Entry notifyInterfaceOnDump..");
		
		DailyDumpSummary dailyDumpSummary = null;
		DailyDumpSummary newDailyDumpSummary = null;
		Interfaces interfaces = null;
		ResponseBean responseBean = null;
		
		try
		{
			responseBean = new ResponseBean();
			
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				responseBean.setErrorMessage("Interface ID should not be empty..");
				throw new IntegrationManagement.NotifyInterfaceOnDumpException("Interface ID should not be empty..", null);
			}
			if(createdDate == null)
			{
				TLogger.error("Created Date should not be empty..");
				responseBean.setErrorMessage("Created Date should not be empty..");
				throw new IntegrationManagement.NotifyInterfaceOnDumpException("Created Date should not be empty..", null);
			}
			
			if(!IntegrationConstants.DAILY_DUMP_INTERFACE_LIST.contains(interfaceId.toString()))
			{
				TLogger.error("Please provide valid daily dump Interface ID..");
				responseBean.setErrorMessage("Please provide valid daily dump Interface ID..");
				throw new IntegrationManagement.NotifyInterfaceOnDumpException("Please provide valid daily dump Interface ID..", null);
			}
			
			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID : " + interfaceId);
				responseBean.setErrorMessage("Interface does not exist for the given ID : " + interfaceId);
				throw new IntegrationManagement.NotifyInterfaceOnDumpException("Interface does not exist for the given ID : " + interfaceId, null);
			}
			
			dailyDumpSummary = new DailyDumpSummary();
			dailyDumpSummary.setInterfaces(interfaces);
			dailyDumpSummary.setCreatedDate(createdDate);
			dailyDumpSummary.setStatus(1L);
			
			try
			{
				newDailyDumpSummary = createDailyDumpSummary(dailyDumpSummary);
				if(newDailyDumpSummary != null)
					responseBean.setTransactionId(newDailyDumpSummary.getDumpId());
			}
			catch(ApplicationException applicationException)
			{
				if(applicationException.getFaultInfo() != null)
					responseBean.setErrorMessage(applicationException.getFaultInfo().getMessage());
				else
					responseBean.setErrorMessage(applicationException.getMessage());
			}
			catch(Exception exception)
			{
				responseBean.setErrorMessage(exception.getMessage());
			}
			
			return responseBean;
		}
		catch (NullPointerException nullPointerException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(nullPointerException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Error in initialising entity manager", nullPointerException);
			return responseBean;
		}
		catch(PersistenceException persistenceException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(persistenceException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			return responseBean;
		}
		catch(ApplicationException applicationException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(applicationException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error(applicationException.getMessage(), applicationException);
			return responseBean;
		}
		catch(Exception exception)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(exception.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			return responseBean;
		}
		finally
		{
			dailyDumpSummary = null;
			newDailyDumpSummary = null;
			interfaces = null;
			responseBean = null;
			
			TLogger.debug("Exit notifyInterfaceOnDump..");
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param createdDate
	 * @return DailyDumpSummary
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public DailyDumpSummary getDailyDumpSummaryByDate(Long interfaceId, Date createdDate) throws ApplicationException
	{
		TLogger.debug("Entry getDailyDumpSummaryByDate..");
		
		DailyDumpSummary dailyDumpSummary = null;
		Interfaces interfaces = null;
		Query query = null;
		List<DailyDumpSummary> dumpList = null;
		
		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Interface ID should not be empty..", null);
			}
			if(createdDate == null)
			{
				TLogger.error("Created Date should not be empty..");
				throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Created Date should not be empty..", null);
			}
			
			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID : " + interfaceId);
				throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Interface does not exist for the given ID : " + interfaceId, null);
			}
			
			query = entityManager.createQuery("from " + DailyDumpSummary.class.getCanonicalName() + " where interfaces.interfaceId =:interfaceId and status =:status and createdDate =:createdDate");
			query.setParameter("interfaceId", interfaceId);
			query.setParameter("status", 1L);
			query.setParameter("createdDate", createdDate);
			dumpList = query.getResultList();
			if(!dumpList.isEmpty())
				dailyDumpSummary = dumpList.iterator().next();
			return dailyDumpSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetDailyDumpSummaryByDateException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			dailyDumpSummary = null;
			query = null;
			dumpList = null;
			
			TLogger.debug("Exit getDailyDumpSummaryByDate..");
		}
	}
	
	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param status
	 * @return List<DailyDumpSummary>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<DailyDumpSummary> getDailyDumpSummaryByStatus(Long interfaceId, Long status) throws ApplicationException
	{
		TLogger.debug("Entry getDailyDumpSummaryByStatus..");
		
		Interfaces interfaces = null;
		Query query = null;
		List<DailyDumpSummary> dumpList = null;

		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Interface ID should not be empty..", null);
			}
			if(status == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Status should not be empty..", null);
			}

			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID : " + interfaceId);
				throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Interface does not exist for the given ID : " + interfaceId, null);
			}

			query = entityManager.createQuery("from " + DailyDumpSummary.class.getCanonicalName() + " where interfaces.interfaceId =:interfaceId and status =:status");
			query.setParameter("interfaceId", interfaceId);
			query.setParameter("status", 1L);
			dumpList = query.getResultList();

			return dumpList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			TLogger.debug("Exit getDailyDumpSummaryByStatus..");
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param dumpId
	 * @param status
	 * @return DailyDumpSummary
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public DailyDumpSummary updateDailyDumpSummaryStatus(Long dumpId, Long status) throws ApplicationException
	{
		TLogger.debug("Entry updateDailyDummpSummaryStatus..");

		DailyDumpSummary dailyDumpSummary = null;

		try
		{
			if(dumpId == null)
			{
				TLogger.error("Dump ID should not be empty..");
				throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Dump ID should not be empty..", null);
			}
			if(status == null)
			{
				TLogger.error("Status should not be empty..");
				throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Status should not be empty..", null);
			}

			dailyDumpSummary = entityManager.find(DailyDumpSummary.class, dumpId);
			if(dailyDumpSummary == null)
			{
				TLogger.error("Daily Dump Summary does not exist for the given ID : " + dumpId);
				throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Daily Dump Summary does not exist for the given ID : " + dumpId, null);
			}

			dailyDumpSummary.setStatus(status);
			entityManager.flush();

			return dailyDumpSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.UpdateDailyDumpSummaryStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			dailyDumpSummary = null;
			TLogger.debug("Exit updateDailyDummpSummaryStatus..");
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param moduleId
	 * @param jsonRequestData
	 * @param refId
	 * @param refData3
	 * @return ResponseBean
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public ResponseBean publishInternalRequest(Long moduleId, String jsonRequestData, String refId, Long refData3) throws ApplicationException
	{
		TLogger.debug("Entry publishInternalRequest..");

		Module module = null;
		Set<Interfaces> interfaceSet = null;
		ResponseBean responseBean = null;

		try
		{
			responseBean = new ResponseBean();

			if(moduleId == null)
			{
				TLogger.error("Module ID should not be empty..", null);
				throw new IntegrationManagement.PublishInternalRequestException("Module ID should not be empty..", null);
			}
			if(jsonRequestData == null)
			{
				TLogger.error("Request Data should not be empty..", null);
				throw new IntegrationManagement.PublishInternalRequestException("Request Data should not be empty..", null);
			}

			module = entityManager.find(Module.class, moduleId);
			if(module == null)
			{
				TLogger.error("Module does not exist for the given ID : " + moduleId);
				throw new IntegrationManagement.PublishInternalRequestException("Module does not exist for the given ID : " + moduleId, null);
			}

			interfaceSet = module.getInterfaces();
			if(interfaceSet.isEmpty())
			{
				TLogger.error("Pls configure the interfaces for the module :: " + moduleId);
				throw new IntegrationManagement.PublishInternalRequestException("Pls configure the interfaces for the module :: " + moduleId, null);
			}

			for (Interfaces interfaces : interfaceSet) 
			{
				if(IntegrationConstants.SEND_TRANS_TYPE.equals(interfaces.getTransactionType()))
				{
					return convertRequest(interfaces, jsonRequestData, refId, refData3);
				}
			}
			return responseBean;
		}
		catch (NullPointerException nullPointerException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(nullPointerException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(persistenceException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(applicationException.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error(applicationException.getMessage(), applicationException);
		}
		catch(Exception exception)
		{
			if(responseBean.getErrorMessage() == null)
				responseBean.setErrorMessage(exception.getMessage());
			responseBean.setErrorCode(101L);
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			module = null;
			interfaceSet = null;

			TLogger.debug("Exit publishInternalRequest..");
		}
		return responseBean;
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param refData3
	 * @param interfaceId
	 * @return List<InterfaceSummary>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<InterfaceSummary> getInterfaceSummariesByRefData3(Long refData3, Long interfaceId) throws ApplicationException
	{
		TLogger.debug("Entry getInterfaceSummariesByRefData3..");

		Query query = null;
		List<InterfaceSummary> summaries = null;
		String queryStr = null;

		try
		{
			if(refData3 == null)
			{
				TLogger.error("Reference Data 3 should not be empty..", null);
				throw new IntegrationManagement.PublishToInterfaceException("Reference Data 3 should not be empty..", null);
			}

			queryStr = "from " + InterfaceSummary.class.getCanonicalName() + " where referenceData3=:refData3";
			if(interfaceId != null)
				queryStr = queryStr + " and interfaces.interfaceId=:interfaceId";
			query = entityManager.createQuery(queryStr);
			query.setParameter("refData3", refData3);
			if(interfaceId != null)
				query.setParameter("interfaceId", interfaceId);
			summaries = query.getResultList();

			return summaries;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByRefData3Exception("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByRefData3Exception("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByRefData3Exception("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			query = null;
			summaries = null;
			queryStr = null;

			TLogger.debug("Exit getInterfaceSummariesByRefData3..");
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * 
	 * </pre>
	 * @param refData3
	 * @return List<ResponseBean>
	 * @throws ApplicationException
	 */
	public List<ResponseBean> getSummaryResponseDataByRefData3(Long refData3) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getSummaryResponseDataByRefData3 : " + refData3);
		}

		List<ResponseBean> resBeans = null;
		ResponseBean responseBean = null;
		Blob blobData = null;
		String responseData = null;
		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;

		try
		{
			if(refData3 == null)
			{
				TLogger.error("Reference Data 3 should not be empty..", null);
				throw new IntegrationManagement.GetSummaryResponseDataByRefData3Exception("Reference Data 3 should not be empty..", null);
			}

			resBeans = new ArrayList<ResponseBean>();
			connection = DriverManager.getConnection(IntegrationConstants.INTERFACE_JDBC_URL, IntegrationConstants.INTERFACE_JDBC_USER, IntegrationConstants.INTERFACE_JDBC_PASS);
			connection.setAutoCommit(false);
			statement = connection.prepareStatement("select interface_id_n, response_data_b from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=?");
			statement.setLong(1, refData3);
			resultSet = statement.executeQuery();
			while(resultSet.next())
			{
				responseBean = new ResponseBean();
				responseBean.setInterfaceId(resultSet.getLong("interface_id_n"));
				blobData = resultSet.getBlob("response_data_b");
				if(blobData != null)
				{
					responseData = new String(blobData.getBytes(1L, (int)blobData.length()));
					responseBean.setResponseData(responseData);
				}
				resBeans.add(responseBean);
			}

			if(resultSet != null)
				resultSet.close();
			if(statement != null)
				statement.close();
			if(connection != null)
				connection.close();

			return resBeans;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetSummaryResponseDataByRefData3Exception("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetSummaryResponseDataByRefData3Exception("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetSummaryResponseDataByRefData3Exception("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			try
			{
				if(resultSet != null)
					resultSet.close();
				if(statement != null)
					statement.close();
				if(connection != null)
					connection.close();
			}
			catch(Exception exception2)
			{
				exception2.printStackTrace();
			}

			resBeans = null;
			responseBean = null;
			blobData = null;
			responseData = null;
			resultSet = null;
			statement = null;
			connection = null;

			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getSummaryResponseDataByRefData3 : " + refData3);
			}
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * 
	 * @param refData3
	 * @param interfaceId
	 * @return List<Long>
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public List<Long> getSummaryTransIdsByRefData3(Long refData3, Long interfaceId) throws ApplicationException
	{
		TLogger.debug("Entry getSummaryTransIdsByRefData3..refData3 : " + refData3 + " : interfaceId : " + interfaceId);

		Connection connection = null;
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		List<Long> transIds = null;
		String queryStr = null;

		try
		{
			if(refData3 == null)
			{
				TLogger.error("Reference Data 3 should not be empty..", null);
				throw new IntegrationManagement.GetSummaryTransIdsByRefData3Exception("Reference Data 3 should not be empty..", null);
			}

			transIds = new ArrayList<Long>();

			connection = DriverManager.getConnection(IntegrationConstants.INTERFACE_JDBC_URL, IntegrationConstants.INTERFACE_JDBC_USER, IntegrationConstants.INTERFACE_JDBC_PASS);
			queryStr = "select trans_id_n from " + IntegrationConstants.INTERFACE_SCHEMA_NAME + ".tr_interface_summary where ref_data3_n=?";
			if(interfaceId != null)
				queryStr = queryStr + " and interface_id_n=?";

			statement = connection.prepareStatement(queryStr);
			statement.setLong(1, refData3);
			if(interfaceId != null)
				statement.setLong(2, interfaceId);

			resultSet = statement.executeQuery();
			while (resultSet.next()) 
			{
				transIds.add(resultSet.getLong(1));
			}

			if(resultSet != null)
				resultSet.close();
			if(statement != null)
				statement.close();
			if(connection != null)
				connection.close();

			return transIds;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetSummaryTransIdsByRefData3Exception("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetSummaryTransIdsByRefData3Exception("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetSummaryTransIdsByRefData3Exception("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			transIds = null;
			queryStr = null;

			try
			{
				if(resultSet != null)
					resultSet.close();
				if(statement != null)
					statement.close();
				if(connection != null)
					connection.close();
			}
			catch(Exception exception)
			{
				TLogger.error("Unhandled Exception : " + exception.getMessage(), exception);
			}

			connection = null;
			statement = null;
			resultSet = null;

			TLogger.debug("Exit getSummaryTransIdsByRefData3..");
		}
	}

	/**
	 * @author Satheesh Kumar
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @return List<KycSyncInfo>
	 * @throws ApplicationException
	 */
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	public List<KycSyncInfo> getKycSyncAttributesByInterfaceId(Long interfaceId) throws ApplicationException
	{
		TLogger.debug("Entry getKycSyncAttributesByInterfaceId..");

		Interfaces interfaces = null;
		Query query = null;
		List<KycSyncInfo> kycSyncInfoList = null;

		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Interface ID should not be empty..", null);
			}
			interfaces = entityManager.find(Interfaces.class, interfaceId);
			if(interfaces == null)
			{
				TLogger.error("Interface does not exist for the given ID : " + interfaceId);
				throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Interface does not exist for the given ID : " + interfaceId, null);
			}

			query = entityManager.createQuery("from " + KycSyncInfo.class.getCanonicalName() + " where interfaces.interfaceId =:interfaceId");
			query.setParameter("interfaceId", interfaceId);
			kycSyncInfoList = query.getResultList();

			return kycSyncInfoList;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetDailyDumpSummaryByStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetKycSyncAttributesByInterfaceIdException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			TLogger.debug("Exit getKycSyncAttributesByInterfaceId..");
		}
	}

	public String searchSO(String soId)  throws ApplicationException
	{
		Connection connection = null;
		try
		{
			connection = DriverManager.getConnection(IntegrationConstants.INTERFACE_JDBC_URL, IntegrationConstants.INTERFACE_JDBC_USER, IntegrationConstants.INTERFACE_JDBC_PASS);
			JSONArray jsonArray = checkTempTable("file_id", "select count(*),so_id,file_id,status,error_code,error_message from interface.sp_stock_dump where so_id ='"+soId+"' group by so_id,file_id,status,error_code,error_message", connection);
			if(jsonArray!=null && jsonArray.size()>0)
			{
				return jsonArray.toJSONString();
			}
			jsonArray = checkTempTable("file_id", "select count(*),so_id,file_id,status,error_code,error_message from interface.sp_alloc_dump where so_id ='"+soId+"' group by so_id,file_id,status,error_code,error_message", connection);
			if(jsonArray!=null && jsonArray.size()>0)
			{
				return jsonArray.toJSONString();
			}
			jsonArray = checkTempTable("file_id_n", "select count(*),so_id,file_id_n,status,error_code,error_message from interface.alloc_dump_voucher  where so_id ='"+soId+"' group by so_id,file_id_n,status,error_code,error_message", connection);
			if(jsonArray!=null && jsonArray.size()>0)
			{
				return jsonArray.toJSONString();
			}
			jsonArray = checkTempTable("file_id_n", "select count(*),so_id,file_id_n,status,error_code,error_message from interface.stock_dump_voucher  where so_id ='"+soId+"' group by so_id,file_id_n,status,error_code,error_message", connection);
			if(jsonArray!=null && jsonArray.size()>0)
			{
				return jsonArray.toJSONString();
			}

		}
		catch(Exception e)
		{
			TLogger.error("Unhandled Exception " + e.getMessage(), e);
			throw new IntegrationManagement.SearchSOException("Unhandled Exception " + e.getMessage(), e);
		}
		finally
		{
			try
			{
				if(connection != null)
					connection.close();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return "SO ID is not available in Mobii";
	}
	@SuppressWarnings("unchecked")
	@RolesAllowed("default")
	private JSONArray checkTempTable(String fileFlag, String query, Connection connection) throws Exception
	{
		ResultSet resultSet = null;
		JSONObject jsonObject = null;
		JSONArray jsonArray = null;
		Status status = null;
		InterfaceFileSummary interfaceFileSummary = null;
		try
		{
			jsonArray = new JSONArray();
			resultSet = fetchQueryResult(query, connection);
			while(resultSet.next())
			{
				status = entityManager.find(Status.class,Long.parseLong(resultSet.getString("status")));
				interfaceFileSummary = entityManager.find(InterfaceFileSummary.class,Long.parseLong(resultSet.getString(fileFlag)));
				jsonObject = new JSONObject();
				jsonObject.put("count",resultSet.getString("count"));
				jsonObject.put("so_id",resultSet.getString("so_id"));
				jsonObject.put("status",status.getName());
				jsonObject.put("error_code",resultSet.getString("error_code"));
				jsonObject.put("error_message",resultSet.getString("error_message"));
				jsonObject.put("file_id",resultSet.getString(fileFlag));
				if(interfaceFileSummary != null)
				{
					jsonObject.put("file_name",interfaceFileSummary.getFileName());
					jsonObject.put("processed_time",interfaceFileSummary.getProcessedOn());
				}
				jsonArray.add(jsonObject);
			}
			return jsonArray;
		}
		catch(Exception e)
		{
			throw e;
		}
		finally
		{
			try
			{

			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	private static ResultSet fetchQueryResult(String query, Connection connection) throws Exception
	{
		PreparedStatement statement = null;
		try
		{
			statement = connection.prepareStatement(query);
			return statement.executeQuery();
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	/**
	 * @author Satheesh Kumar
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param fileDetailsId
	 * @return void
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void removeInterfaceFileSummaryDetails(Long fileDetailsId) throws ApplicationException
	{
		if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry removeInterfaceFileSummaryDetails..");
		}

		InterfaceFileSummaryDetails fileSummaryDetails = null;

		try
		{
			if(fileDetailsId == null)
			{
				TLogger.error("File details id should not be empty..", null);
				throw new IntegrationManagement.RemoveInterfaceFileSummaryDetailsException("File details id should not be empty..", null);
			}

			fileSummaryDetails = entityManager.find(InterfaceFileSummaryDetails.class, fileDetailsId);
			if(fileSummaryDetails == null)
			{
				TLogger.error("File summary details not found..", null);
				throw new IntegrationManagement.RemoveInterfaceFileSummaryDetailsException("File summary details not found..", null);
			}

			entityManager.remove(fileSummaryDetails);
			entityManager.flush();
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.RemoveInterfaceFileSummaryDetailsException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.RemoveInterfaceFileSummaryDetailsException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.RemoveInterfaceFileSummaryDetailsException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit removeInterfaceFileSummaryDetails..");
			}
		}
	}

	/**
	 * @author Suresh Upparu
	 * <b>Algorithm</b>
	 * <pre>
	 * 
	 * </pre>
	 * @param interfaceId
	 * @param requiredDate
	 * @throws ApplicationException
	 */
	@RolesAllowed("default")
	public void reProcessPushDataFiles(Long interfaceId, Date requiredDate) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		TLogger.debug("Entry reProcessPushDataFiles.. interfaceId : " + interfaceId + " requiredDate :: " + requiredDate);

		Interfaces interfaces = null;
		Context context = null;
		PullDataToFile pullDataToFile = null;

		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty..");
				throw new IntegrationManagement.ReProcessPushDataFilesException("Interface ID should not be empty..", null);
			}
			if(requiredDate == null)
			{
				TLogger.error("Required Date should not be empty..");
				throw new IntegrationManagement.ReProcessPushDataFilesException("Required Date should not be empty..", null);
			}
			if(!IntegrationConstants.REPROCESS_ASYNC_PULL_DATA_TO_FILE_AND_PUSH_INTERFACE_LIST.contains(interfaceId.toString()))
			{
				TLogger.error("Invalid Interface ID supplied : " + interfaceId);
				throw new IntegrationManagement.ReProcessPushDataFilesException("Invalid Interface ID supplied : " + interfaceId, null);
			}

			interfaces = entityManager.find(Interfaces.class, interfaceId);
			context = new InitialContext();
			pullDataToFile = (PullDataToFile) context.lookup(interfaces.getConverter());

			try
			{
				pullDataToFile.processRequest(interfaceId, requiredDate);
			}
			catch(Exception exception)
			{
				TLogger.error("Internal Server Error..");
			}
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.ReProcessPushDataFilesException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.ReProcessPushDataFilesException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.ReProcessPushDataFilesException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaces = null;
			context = null;
			pullDataToFile = null;

			TLogger.debug("Entry reProcessPushDataFiles.. completed at : " + (System.currentTimeMillis() - startTime));
			startTime = null;
		}
	}
	@RolesAllowed("default")
	public void rollbackKPIFeedInterfaces(Long interfaceId, Long fileId) throws ApplicationException
	{
		Long startTime = System.currentTimeMillis();
		TLogger.debug("Entry rollbackKPIFeedInterfaces... InterfaceId :: " + interfaceId + "FileId :: " + fileId);
		String rollBackClass = null;
		InterfaceFileSummary interfaceFileSummary = null;
		Context context = null;
		CSVMerger csvMerger = null;
		try
		{
			if(interfaceId == null)
			{
				TLogger.error("Interface ID should not be empty");
				throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Interface ID should not be empty", null);
			}
			if (fileId == null)
			{
				TLogger.error("File ID should not be empty");
				throw new IntegrationManagement.RollbackKPIFeedInterfacesException("File ID should not be empty", null);
			}
			interfaceFileSummary = integrationManagementLocal.getInterfaceFileSummary(fileId);
			if(interfaceFileSummary == null)
			{
				TLogger.error("Provided File ID is invalid");
				throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Provided File ID is invalid", null);
			}
			if((!IntegrationConstants.KPI_FEED_INTERFACE_LIST.contains(interfaceId.toString()) 
					&& interfaceId.longValue() != IntegrationConstants.VOUCHER_INJECTION_INTERFACE_ID.longValue()) 
					|| interfaceFileSummary.getInterfaces().getInterfaceId().longValue() != interfaceId.longValue())
			{
				TLogger.error("Provided Interface ID is invalid");
				throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Provided Interface ID is invalid", null);
			}
			if(interfaceId.longValue() == IntegrationConstants.VOUCHER_INJECTION_INTERFACE_ID.longValue())
				rollBackClass = "java:global/EnhancesysManagement/IntegrationServices/RollbackVoucherInjection!com.enhancesys.integration.services.interfaces.merger.CSVMerger";
			else
				rollBackClass = "java:global/EnhancesysManagement/IntegrationServices/RollbackKPIFeed!com.enhancesys.integration.services.interfaces.merger.CSVMerger";
			context = new InitialContext();
			csvMerger = (CSVMerger) context.lookup(rollBackClass);
			try
			{
				csvMerger.processRequest(interfaceId, fileId);
			}
			catch(Exception e)
			{
				TLogger.error("Internal Server Error, Please contact support team.." + fileId);
			}
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.RollbackKPIFeedInterfacesException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			rollBackClass = null;
			context = null;
			csvMerger = null;
			TLogger.debug("Exit rollbackKPIFeedInterfaces...Took :: " + (System.currentTimeMillis() - startTime) + "milliseconds");
			startTime = null;
		}
	}

	@RolesAllowed("default")
	public InterfaceSummary getInterfaceSummaryByFileIdBatchIdAndStatus(Long interfaceFileId, String refData5, Long status) throws ApplicationException
	{
		//		Long startTime = System.currentTimeMillis();
		/*if(TLogger.debugIsEnabled())
		{
			TLogger.debug("Entry getInterfaceSummariesByFileIdAndStatus.. Started at --> "+ new Date());
		}*/
		InterfaceSummary interfaceSummary = null;
		Query query = null;

		try
		{
			TLogger.debug("getInterfaceSummaryByRefData3RefData5 service received interface file id--> " + interfaceFileId  + ", refData_5--> " + refData5 + ", status--> " + status);
			query = entityManager.createQuery("from " + InterfaceSummary.class.getCanonicalName() + " where ref_data3_n =:interfaceFileId and ref_data5_v  =:refData5 and status_n =:status");
			query.setParameter("interfaceFileId", interfaceFileId);
			query.setParameter("refData5", refData5);
			query.setParameter("status", status);
			interfaceSummary = (InterfaceSummary) query.getSingleResult();
			return interfaceSummary;
		}
		catch (NullPointerException nullPointerException)
		{
			TLogger.error("Error in initialising entity manager", nullPointerException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Error in initialising entity manager", nullPointerException);
		}
		catch(PersistenceException persistenceException)
		{
			TLogger.error("Persistence Exception " + persistenceException.getMessage(), persistenceException);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Persistence Exception " + persistenceException.getMessage(), persistenceException);
		}
		/*catch(ApplicationException applicationException)
		{
			TLogger.error(applicationException.getMessage(), applicationException);
			throw applicationException;
		}*/
		catch(Exception exception)
		{
			TLogger.error("Unhandled Exception :: " + exception.getMessage(), exception);
			throw new IntegrationManagement.GetInterfaceSummariesByFileIdAndStatusException("Unhandled Exception :: " + exception.getMessage(), exception);
		}
		finally
		{
			interfaceSummary = null;
			query = null;

			/*if(TLogger.debugIsEnabled())
			{
				TLogger.debug("Exit getInterfaceSummariesByFileIdAndStatus service at -->"+new Date()+" --- and took "+(System.currentTimeMillis()-startTime)+" milliseconds");
			}*/
			//			startTime = null;
		}
	}

	private SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
//	private SimpleDateFormat yyyyMMddHHmmssFormat = new SimpleDateFormat("yyyyMMddHHmmss");
//	private SimpleDateFormat MMddHHmmss = new SimpleDateFormat("MMddHHmm");
//	private SimpleDateFormat yyyy_MM_dd = new SimpleDateFormat("yyyy-MM-dd");
//	private SimpleDateFormat dd_dot_MM_dot_yyyy = new SimpleDateFormat("dd.MM.yyyy");
	private SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	private SimpleDateFormat yyyy_MM_dd_T_HH_mm_ss_S = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S");
	private MongoUtil mongoUtil = new MongoUtil();
	private DecimalFormat decimalFormat = new DecimalFormat("000");
	private static final String COUNT = "Count";
	private static final String FILE_NAME = "File Name";
	private static final String FORMAT = "Format";
	private static final String IS_JSON_OBJECT = "Is Json Object";
}